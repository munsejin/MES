using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MES.Controls;
using MES.Popup;
using System.Collections;
using System.Net;
using System.Xml;
using MES.P50_QUA;

namespace MES.CLS
{
    public class wnDm
    {
        wnAdo wAdo = new wnAdo();
        public DataTable selectList(StringBuilder sb)
        {
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }




        public int in_up_del_table(StringBuilder sb, string log_division)
        {
            try
            {


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, log_division);
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                Popup.pop오류리포트 msg = new pop오류리포트(e.Message + " - " + e.ToString());
                msg.ShowDialog();
                return 9;
            }
        }
        public DataTable fn_TopMenu_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.TopName ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine(" inner join (  select TopID from T_SubMenu where VIEW_YN = 'Y' group by TopID)b ");
            sb.AppendLine(" on a.TopID = b.TopID ");
            sb.AppendLine(" order by a.SortNo asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //유정훈 추가 (권한)
        public DataTable fn_TopMenu_Auth_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.TopName ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine(" inner join N_AUTH_TOP b  ");
            sb.AppendLine(" on a.TopID = b.TopID   ");
            sb.AppendLine("     and b.AUTH_YN  = 'Y'   ");
            sb.AppendLine(" where b.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine(" order by a.SortNo asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_SubMenu_List(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.SubID ");
            sb.AppendLine("     , a.SubName ");
            sb.AppendLine("     , a.AsmName ");
            sb.AppendLine("      , case when b.STAFF_CD is null then 'N' else 'Y' end as BOOKMARK ");
            sb.AppendLine(" from T_SubMenu a ");
            sb.AppendLine("  left outer join T_BOOKMARK_MENUS b ");
            sb.AppendLine("  on a.AsmName = b.AsmName ");
            sb.AppendLine("  and b.STAFF_CD = '"+Common.p_strStaffNo+"' ");
            sb.AppendLine(" where a.TopID = @TopID ");
            sb.AppendLine("     and a.VIEW_YN = 'Y'  ");
            sb.AppendLine(" order by a.SortNo asc ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@TopID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_SubMenu_List가나다순()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select '메뉴검색' as SubName ,'' as AsmName ");
            sb.AppendLine("     union all");
            sb.AppendLine("     select SubName,AsmName ");
            sb.AppendLine("      from");
            sb.AppendLine("     ( ");
            sb.AppendLine(" select top 1000 SubName,AsmName from  T_SubMenu a  ");
            sb.AppendLine(" where 1=1  and a.VIEW_YN = 'Y' ");
            sb.AppendLine("     order by SubName ");
            sb.AppendLine(" ) as b");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_SubMenu_count()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("    count( a.TopID) as cnt ");



            sb.AppendLine(" from T_SubMenu a ");

            sb.AppendLine("     where a.VIEW_YN = 'Y'  ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        //유정훈 추가 
        public DataTable fn_SubMenu_Auth_List(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.SubID ");
            sb.AppendLine("     , a.SubName ");
            sb.AppendLine("     , a.AsmName ");
            sb.AppendLine("      , case when c.STAFF_CD is null then 'N' else 'Y' end as BOOKMARK ");
            sb.AppendLine(" from T_SubMenu a ");
            sb.AppendLine(" inner join N_AUTH_SUB b ");
            sb.AppendLine(" on a.TopID = b.TopID ");
            sb.AppendLine("     and a.SubID = b.SubID ");
            sb.AppendLine("  left outer join T_BOOKMARK_MENUS c ");
            sb.AppendLine("  on a.AsmName = c.AsmName ");
            sb.AppendLine("  and c.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine(" where a.TopID = @TopID ");
            sb.AppendLine("     and b.AUTH_YN = 'Y'  ");
            sb.AppendLine("     and b.STAFF_CD = '" + Common.p_strStaffNo + "' ");

            sb.AppendLine(" order by a.SortNo asc ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@TopID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Group_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.GrpID ");
            sb.AppendLine("     , a.GrpName ");
            sb.AppendLine(" from T_Group a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.GrpName asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Group_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.GrpID ");
            sb.AppendLine("     , a.GrpName ");
            sb.AppendLine(" from T_Group a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.GrpID = @GrpID  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable n테이블_등록_코드중복확인(String table, String condtion)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select COUNT(*) as cnt  ");
            sb.AppendLine("     from ");

            sb.AppendLine(table);
            sb.AppendLine(condtion);

            Debug.WriteLine("중복체크" + sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_AllMenu_CheckList(string sGrp)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     z.* ");
            sb.AppendLine(" from ( ");
            sb.AppendLine(" select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , '' as SubID ");
            sb.AppendLine("     , a.TopName as MenuName");
            sb.AppendLine("     , a.SortNo as TopSort ");
            sb.AppendLine("     , 0 as SubSort ");
            sb.AppendLine("     , '' as ChkYN ");
            sb.AppendLine("     , (select count(*) from T_GroupSub where TopID = a.TopID and GrpID = @GrpID) as SubCnt ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine("     left outer join T_GroupTop g1 on g1.TopID = a.TopID and g1.GrpID = @GrpID ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , b.SubID ");
            sb.AppendLine("     , b.SubName as MenuName");
            sb.AppendLine("     , a.SortNo as TopSort ");
            sb.AppendLine("     , b.SortNo as SubSort ");
            sb.AppendLine("     , case when isnull(g2.GrpID, '') = '' then 'N' else 'Y' end as ChkYN ");
            sb.AppendLine("     , 0 as SubCnt ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine("     inner join T_SubMenu b on b.TopID = a.TopID ");
            sb.AppendLine("     left outer join T_GroupSub g2 on g2.TopID = b.TopID and g2.SubID = b.SubID and g2.GrpID = @GrpID ");

            sb.AppendLine(" ) z ");
            sb.AppendLine(" order by z.TopSort asc, z.SubSort asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_UnCheckList()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     a.USER_CODE ");
            sb.AppendLine("     , a.USER_ID ");
            sb.AppendLine("     , a.USER_NAME ");
            sb.AppendLine("     , a.FlgWrite ");
            sb.AppendLine("     , a.FlgPrint ");
            sb.AppendLine("     , isnull(b.GrpID, -1) as GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and isnull(b.GrpID, -1) = -1 ");
            sb.AppendLine(" order by a.USER_NAME asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_GroupUser_List(string sGrp)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     a.USER_CODE ");
            sb.AppendLine("     , a.USER_ID ");
            sb.AppendLine("     , a.USER_NAME ");
            sb.AppendLine("     , a.FlgWrite ");
            sb.AppendLine("     , a.FlgPrint ");
            sb.AppendLine("     , isnull(b.GrpID, -1) as GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and isnull(b.GrpID, -1) = @GrpID ");
            sb.AppendLine(" order by a.USER_NAME asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , (case when a.USER_SELECT = '1' then '부서별' when a.USER_SELECT = '2' then '담당자별' else '전체' end) as USER_SELECT_NM ");
            sb.AppendLine("     , c.CODE_DESC as USER_DEPT_NM ");
            sb.AppendLine("     , d.CODE_DESC as USER_MAN_NM ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join DEPTCODE c on c.DEPT_CODE = a.USER_DEPT ");
            sb.AppendLine("     left outer join MANCODE d on d.MAN_CODE = a.USER_MAN ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.USER_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.GrpID ");
            sb.AppendLine("     , d.CODE_DESC ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = a.USER_DEPT ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.USER_CODE = @USER_CODE  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@USER_CODE", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UserID_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.USER_ID = @USER_ID  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@USER_ID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEPTCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from DEPTCODE a ");
            sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.DEPT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEPTCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from DEPTCODE a ");
            sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.DEPT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , d.CODE_DESC as DEPT_NM ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = a.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.MAN_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.MAN_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MAJORCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MAJORCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.MAJOR_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MAJORCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MAJORCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.MAJOR_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEALKIND_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from DEALKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.DEAL_KIND asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEALKIND_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from DEALKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.DEAL_KIND = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STORECODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from STORECODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.STORE_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STORECODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from STORECODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STORE_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTKIND_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_KIND asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTKIND_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_KIND = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTTYPE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTTYPE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_TYPE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTTYPE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTTYPE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_TYPE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTCLASS_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTCLASS a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_CLASS asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTCLASS_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTCLASS a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_CLASS = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UnitCode_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from UnitCode a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.UNIT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UnitCode_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from UnitCode a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.UNIT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.CUST_CODE as 코드");
            sb.AppendLine("     , a.CUST_NAME as 거래처명 ");
            sb.AppendLine("     , a.REP_NAME as 대표자 ");
            sb.AppendLine("     , a.COMP_NUM as 사업자번호 ");
            sb.AppendLine("     , a.RES_NUM as 주민번호 ");
            sb.AppendLine("     , a.ZIP_CODE1 as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA1 as 주소지역명 ");
            sb.AppendLine("     , a.ZIP_ADDR1 as 주소상세 ");
            sb.AppendLine("     , a.TEL_NUM1 as 전화번호 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUSTOMER a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine("     , b.DEPT_CODE ");
            sb.AppendLine("     , d.CODE_DESC as 부서명 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = b.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.CUST_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_List_pop(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     a.MAN_CODE as 코드");
            sb.AppendLine("     , a.CODE_DESC as 사원명 ");
            sb.AppendLine("     , b.CODE_DESC as 부서명 ");
            sb.AppendLine("     , case when isnull(a.MAN_OUTCHK, '0') = '1' then '퇴사' else '' end as 퇴사구분 ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine("     left outer join DEPTCODE b on b.DEPT_CODE = a.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by isnull(a.MAN_OUTCHK, '0') asc, a.MAN_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.PRODUCT_CODE as 코드");
            sb.AppendLine("     , a.PRODUCT_NAME as 제품명 ");
            sb.AppendLine("     , a.PRODUCT_SPEC as 규격 ");
            sb.AppendLine("     , a.PRODUCT_NAME_SHORT as 약칭 ");
            sb.AppendLine("     , a.VALID_NUM as 유효기간 ");
            sb.AppendLine("     , isnull(a.PRODUCT_PRICE1, 0) as 표준원가 ");
            sb.AppendLine("     , isnull(a.PRODUCT_PRICE2, 0) as 기준약가 ");

            sb.AppendLine("     , isnull(a.SELLING_PRICE1, 0) as 도매단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE2, 0) as 약국단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE3, 0) as 의원단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE4, 0) as 병원단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE5, 0) as 기타단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE6, 0) as 표준단가 ");

            sb.AppendLine("     , a.HSP_CODE as 의료보험코드 ");
            sb.AppendLine("     , a.의약품표준코드 ");
            sb.AppendLine("     , a.의약품대표코드 ");
            sb.AppendLine("     , a.의약품품목코드 ");
            sb.AppendLine("     , a.의약품제품명 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.PRODUCT_CODE not in (select TOP " + skipSize.ToString() + " a.PRODUCT_CODE ");
            sb.AppendLine("                                 from PRODUCT a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.PRODUCT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_Detail_Cust(string sCode, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = @p_2 and b.제품코드 = a.PRODUCT_CODE ");
            sb.AppendLine(" where a.PRODUCT_CODE = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sCode);
            sCommand.Parameters.AddWithValue("@p_2", sCust);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_CHANGE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUST_CHANGE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.일련번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_CHANGE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUST_CHANGE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.일련번호 = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , case when isnull(max(a.STOCK_LAST1), '0') = '1' then 'Y' else '' end as STOCK_LAST1 ");
            sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail_결재조건(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" exec dbo.proc_영업소주문서결재조건2 @p_1, @p_2, '' ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DIS, 0) = 1 then 'V' else '' end as 할증체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DAN, 0) = 1 then 'V' else '' end as 단가체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_HWOI, 0) = 1 then 'V' else '' end as 회전일체크 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc, a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail_결재대상들(string sDay, string sCust)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" exec dbo.proc_영업소주문서결재조건2 @p_1, '', '" + sCust + "' ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DIS, 0) = 1 then 'V' else '' end as 할증체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DAN, 0) = 1 then 'V' else '' end as 단가체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_HWOI, 0) = 1 then 'V' else '' end as 회전일체크 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and isnull(a.STOCK_LAST1, '') <> '1'  "); //미결 건만
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "'  ");
            }
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc, a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STORE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , max(a.STOCK_AMOUNT) as STOCK_AMOUNT ");
            sb.AppendLine("     , max(a.STOCK_VAT) as STOCK_VAT ");
            //sb.AppendLine("     , case when isnull(max(a.STOCK_LAST1), '0') = '1' then 'Y' else '' end as STOCK_LAST1 ");
            //sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STORE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STORE_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STORE a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }




        public DataTable fn_PRODUCT_STOCK_List(string sDay1, string sDay2, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE >= @p_1 ");
            sb.AppendLine("     and a.STOCK_DATE <= @p_2 ");
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "' ");
            }
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay1);
            sCommand.Parameters.AddWithValue("@p_2", sDay2);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_거래처잔고_Summary(string sCust, string sDay)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select sum(z.전월잔고) as 현잔고 ");
            sb.AppendLine(" from ( ");

            sb.AppendLine(" select isnull(SUM(MAN_PREAMOUNT), 0) as 전월잔고 ");
            sb.AppendLine(" from CUST_YEARMMAMOUNT  ");
            sb.AppendLine(" where CUST_CODE = @p_1 ");
            sb.AppendLine("     and JAN_YEARMM = @pYM ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select isnull(SUM(STOCK_AMOUNT), 0) - isnull(SUM(STOCK_VAT), 0) as 판매액계 ");
            sb.AppendLine(" from PRODUCT_STOCK  ");
            sb.AppendLine(" where CUST_CODE1 = @p_1 ");
            sb.AppendLine("     and STOCK_DATE >= @p_from ");
            sb.AppendLine("     and STOCK_DATE <= @p_to ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select -1 * isnull(SUM(COLLECT_AMOUNT), 0) as 수금액계 ");
            sb.AppendLine(" from PRODUCT_COLLECT  ");
            sb.AppendLine(" where CUST_CODE1 = @p_1 ");
            sb.AppendLine("     and COLLECT_DATE >= @p_from ");
            sb.AppendLine("     and COLLECT_DATE <= @p_to ");

            sb.AppendLine(" ) z ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sCust);
            sCommand.Parameters.AddWithValue("@pYM", sDay.Substring(0, 7));
            sCommand.Parameters.AddWithValue("@p_from", sDay.Substring(0, 7) + "-01");
            sCommand.Parameters.AddWithValue("@p_to", sDay);
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_PRODUCT_STOCK_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_DEPT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.COLLECT_DATE ");
            sb.AppendLine("     , a.COLLECT_NUM ");
            sb.AppendLine("     , a.COLLECT_KIND ");
            sb.AppendLine("     , a.CUST_CODE1 ");
            sb.AppendLine("     , a.CUST_NAME1 ");
            sb.AppendLine("     , a.REP_NAME1 ");
            sb.AppendLine("     , a.COMP_NUM1 ");
            sb.AppendLine("     , a.MAN_CODE1 ");
            sb.AppendLine("     , a.MAN_NAME1 ");
            sb.AppendLine("     , a.COLLECT_AMOUNT ");
            sb.AppendLine("     , a.BILL_NUMBER ");
            sb.AppendLine("     , isnull(a.COLLECT_LAST, '0') as COLLECT_LAST ");
            sb.AppendLine("     , case when isnull(a.COLLECT_LAST, '0') = '1' then 'Y' else '' end as COLLECT_LAST2 ");
            sb.AppendLine("     , replace(a.TAX_DATE, '/', '-') as TAX_DATE ");
            sb.AppendLine("     , a.KIND_AB ");
            sb.AppendLine(" from PRODUCT_COLLECT_DEPT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.COLLECT_DATE asc, a.COLLECT_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_DEPT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_COLLECT_DEPT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.COLLECT_DATE = @p_1  ");
            sb.AppendLine("     and a.COLLECT_NUM = @p_2  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCT_COLLECT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.COLLECT_DATE asc, a.COLLECT_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_COLLECT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.COLLECT_DATE = @p_1  ");
            sb.AppendLine("     and a.COLLECT_NUM = @p_2  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_RETURN_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.반품일자 ");
            sb.AppendLine("     , a.반품번호 ");
            sb.AppendLine("     , max(a.구분) as 구분 ");
            sb.AppendLine("     , max(a.거래처코드) as 거래처코드 ");
            sb.AppendLine("     , max(a.거래처명) as 거래처명 ");
            sb.AppendLine("     , max(a.담당자코드) as 담당자코드 ");
            sb.AppendLine("     , max(a.담당자명) as 담당자명 ");
            sb.AppendLine("     , isnull(min(a.창고확인), '미확인') as 창고확인 ");
            sb.AppendLine("     , isnull(min(a.관리부확인), '미확인') as 관리부확인 ");
            sb.AppendLine("     , isnull(convert(nvarchar(10), max(a.주문일자), 120), '') as 주문일자 ");
            sb.AppendLine("     , isnull(max(a.주문번호), '') as 주문번호 ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.반품일자, a.반품번호 ");
            sb.AppendLine(" order by a.반품일자 asc, a.반품번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_RETURN_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , isnull(p.PRODUCT_NAME, '') as 제품명확인 ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.거래처코드 and b.제품코드 = a.제품코드 ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.거래처코드 ");
            sb.AppendLine("     left outer join PRODUCT p on p.PRODUCT_CODE = a.제품코드 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.반품일자 = @p_1  ");
            sb.AppendLine("     and a.반품번호 = @p_2  ");
            sb.AppendLine(" order by a.순서 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }
        public List<string> postNoAPI(string searchaddr)
        {

            List<string> APIlist = new List<string>();
            string regkey = "7016e1720a2b27ff11572826988060";
            string target = "postNew";
            string query = "http://biz.epost.go.kr/KpostPortal/openapi2?regkey=";
            string countPerPage = "20";

            query = query + regkey + "&target=" + target + "&query=" + searchaddr + "&countPerPage=" + countPerPage;
            WebClient client = new WebClient();
            client.Headers["accept-language"] = "utf-8";
            XmlTextReader reader = new XmlTextReader(client.OpenRead(query));
            //reader = new XmlTextReader("books.xml");
            while (reader.Read())
            {

                switch (reader.NodeType)
                {

                    case XmlNodeType.CDATA:
                        APIlist.Add(reader.Value);

                        break;

                }

            }
            return APIlist;
        }
        public DataTable fn_ZIPCODE_N15_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.우편번호 as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA as 검색주소 ");
            sb.AppendLine(" from ZIPCODE_N15 a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.SEQ not in (select TOP " + skipSize.ToString() + " a.SEQ ");
            sb.AppendLine("                                 from ZIPCODE_N15 a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.ZIP_AREA asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_N15_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from ZIPCODE_N15 a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_NEW_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.ZIP_CODE as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA as 검색주소 ");
            sb.AppendLine(" from ZIPCODE_NEW a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.ZIP_AREA not in (select TOP " + skipSize.ToString() + " a.ZIP_AREA ");
            sb.AppendLine("                                 from ZIPCODE_NEW a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.ZIP_AREA asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_NEW_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from ZIPCODE_NEW a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 단위명 ");
            sb.AppendLine("     , c.CODE_DESC as 제품구분명 ");
            sb.AppendLine("     , d.CODE_DESC as 제형구분명 ");
            sb.AppendLine("     , e.CODE_DESC as 관리구분명 ");
            sb.AppendLine("     , case when isnull(a.TAX_KIND, '0') = '1' then '해당' else '비해당' end as 특소세명 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine("     left outer join UNITCODE b on b.UNIT_CODE = a.UNIT_CODE ");
            sb.AppendLine("     left outer join PRODUCTKIND c on c.PRODUCT_KIND = a.PRODUCT_KIND ");
            sb.AppendLine("     left outer join PRODUCTTYPE d on d.PRODUCT_TYPE = a.PRODUCT_TYPE ");
            sb.AppendLine("     left outer join PRODUCTCLASS e on e.PRODUCT_CLASS = a.PRODUCT_CLASS ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from PRODUCT a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_DISCOUNT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE in (select distinct 거래처코드 from CUST_DISCOUNT) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_DISCOUNT_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , c.REP_NAME ");
            sb.AppendLine("     , c.COMP_NUM ");
            sb.AppendLine("     , c.MAN_CODE ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from CUST_DISCOUNT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.거래처코드 ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = c.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.거래처코드 = @p_1  ");
            sb.AppendLine(" order by a.거래처코드 asc, a.제품코드 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STOCK_GOAL_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , case when a.GOAL_CODE = '1' then '판매' ");
            sb.AppendLine("             when a.GOAL_CODE = '2' then '수금' ");
            sb.AppendLine("             else '현금' end as 구분명 ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from STOCK_GOAL a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.GOAL_YEAR asc, a.MAN_CODE asc, a.GOAL_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STOCK_GOAL_Detail(string sYYYY, string sGubun, string sMan)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from STOCK_GOAL a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.GOAL_YEAR = @p_1  ");
            sb.AppendLine("     and a.GOAL_CODE = @p_2  ");
            sb.AppendLine("     and a.MAN_CODE = @p_3  ");
            sb.AppendLine(" order by a.GOAL_YEAR asc, a.MAN_CODE asc, a.GOAL_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sYYYY);
            sCommand.Parameters.AddWithValue("@p_2", sGubun);
            sCommand.Parameters.AddWithValue("@p_3", sMan);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_Magam(string sDay1, string sDay2, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select a.CUST_CODE1, max(CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE >= @p_1  ");
            sb.AppendLine("     and a.STOCK_DATE <= @p_2  ");
            sb.AppendLine("     and a.퍼센트마감 = 'N' ");
            sb.AppendLine("     and isnull(a.할인율, 0) <> 0 ");
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "' ");
            }
            sb.AppendLine(" group by a.CUST_CODE1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay1);
            sCommand.Parameters.AddWithValue("@p_2", sDay2);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_List(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER_PRE a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine("     , b.DEPT_CODE ");
            sb.AppendLine("     , d.CODE_DESC as 부서명 ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = b.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.CUST_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_반품조회_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.반품일자 asc, a.반품번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_LoginUser(string userId, string userPw, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     u.UserID        ");
            //sb.AppendLine("     , u.UserPW      ");
            //sb.AppendLine("     , u.UserName    ");
            //sb.AppendLine("     , isnull(u.AuthLevel, 9) AuthLevel  ");
            //sb.AppendLine("     , u.EmailAddr   ");
            //sb.AppendLine("     , u.ActiveYN    ");
            //sb.AppendLine(" from tbUser u       ");
            //sb.AppendLine(" where u.UserID = @wuId      ");
            //sb.AppendLine("     and u.UserPW = @wuPw    ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@wuId", userId);
            sCommand.Parameters.AddWithValue("@wuPw", userPw);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_데이터베이스_List(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.*             ");
            //sb.AppendLine(" from T_데이터베이스 a ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.디비순번 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_데이터베이스_Detail(string p1, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.*             ");
            //sb.AppendLine(" from T_데이터베이스 a ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine("     and a.디비순번 = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", p1);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable root_업체정보_List(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as V사업자번호 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.상호명 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable root_업체정보_Detail(string p1, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , s.명칭 as 수량등록방식 ");
            //sb.AppendLine("     , db.디비주소 ");
            //sb.AppendLine("     , db.디비명 ");
            //sb.AppendLine("     , db.디비계정 ");
            //sb.AppendLine("     , db.디비암호 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //sb.AppendLine("      left outer join C_수량등록방식 s on s.코드 = a.수량등록방식코드 ");
            //sb.AppendLine("      left outer join T_데이터베이스 db on db.디비순번 = a.디비순번 ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine("     and a.사업자번호 = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", p1);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_업체정보_Detail(string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as 사업자번호2 ");
            ////sb.AppendLine("     , t.명칭 as 전화번호지역 ");
            ////sb.AppendLine("     , t2.명칭 as 담당자번호통신사 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //////sb.AppendLine("      left outer join C_전화지역 t on t.코드 = a.전화번호코드 ");
            //////sb.AppendLine("      left outer join C_폰통신사 t2 on t2.코드 = a.담당자번호코드 ");
            ////sb.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_업체자기정보_Check(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.사업자번호    ");
            //sb.AppendLine("     , a.상호명      ");
            //sb.AppendLine("     , a.대표자      ");
            //sb.AppendLine("     , a.업태        ");
            //sb.AppendLine("     , a.종목        ");
            //sb.AppendLine("     , a.계좌순번    ");
            //sb.AppendLine("     , a.사용여부    ");
            //sb.AppendLine(" from T_업체정보 a   ");
            ////sb.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.사업자번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable logoImage()
        {
            wnAdo wAdo = new wnAdo();

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     SAUP_LOGO ");
            sb.AppendLine(" from [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] A");
            sb.AppendLine("where SAUP_NO = '" + Common.p_saupNo + "' ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // *********************************************************

        public DataTable fn_Staff_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.STAFF_CD");
            sb.AppendLine(" ,A.STAFF_NM");
            sb.AppendLine(" ,A.JOIN_DATE");
            sb.AppendLine(" ,A.CALL_NUM");
            sb.AppendLine(" ,A.PHONE_NUM");
            sb.AppendLine(" ,A.DEPT_CD");
            sb.AppendLine(" ,A.DEPT_CD AS DEPT_NM");
            sb.AppendLine(" ,A.POS_CD");
            sb.AppendLine(" ,A.POS_CD AS POS_NM");
            sb.AppendLine(" ,A.STORAGE_CD");
            sb.AppendLine(" ,(SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" ,A.LOGIN_ID");
            sb.AppendLine(" ,A.PW");
            sb.AppendLine(" ,A.AUTH_SET");
            sb.AppendLine(" ,A.JOIN_DATE");
            sb.AppendLine(" ,A.COMMENT");
            sb.AppendLine(" from N_STAFF_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CAST(A.STAFF_CD as int) ");
            Debug.WriteLine("fn_Staff_List");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Mold_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("      A.MOLD_NO");
            sb.AppendLine("     ,A.MOLD_NM  ");
            sb.AppendLine("     ,A.WEIGHT  ");
            sb.AppendLine("     ,A.MOLD_GUBUN  ");
            sb.AppendLine("     ,A.STORAGE_CD ");
            sb.AppendLine("     ,B.STORAGE_NM ");
            sb.AppendLine("     ,A.INPUT_DATE ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("     ,isnull(C.INST_MOLD,0) as INST_MOLD_CNT ");
            sb.AppendLine(" from N_MOLD_CODE A ");
            sb.AppendLine(" inner join N_STORAGE_CODE B ");
            sb.AppendLine(" on A.STORAGE_CD = B.STORAGE_CD ");
            sb.AppendLine("   left outer join ( select  A.MOLD_CD, count(isnull(B.COMPLETE_YN,0)) as INST_MOLD from F_WORK_INST A left outer join F_WORK_FLOW B on A.LOT_NO = B.LOT_NO where NOT B.COMPLETE_YN = 'Y' or B.COMPLETE_YN is null group by A.MOLD_CD ) C ");
            sb.AppendLine(" on C.MOLD_CD = A.MOLD_NO ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.MOLD_NO");
            Debug.WriteLine("fn_Staff_List");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Mold_Use(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("      A.W_INST_DATE");
            sb.AppendLine("     ,A.INST_AMT  ");
            sb.AppendLine("     ,isnull(B.FLOW_DATE,'')as FLOW_DATE  ");
            sb.AppendLine("     ,A.ITEM_CD  ");
            sb.AppendLine("     ,C.ITEM_NM ");
            sb.AppendLine("     ,isnull(B.COMPLETE_YN,'N') as COMPLETE_YN ");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine(" left outer join F_WORK_FLOW B ");
            sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("   inner join N_ITEM_CODE C ");
            sb.AppendLine(" on C.ITEM_CD = A.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.W_INST_DATE DESC");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Dept_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select DEPT_CD,DEPT_NM,COMMENT");
            sb.AppendLine(" from N_DEPT_CODE ");
            sb.AppendLine(" order by DEPT_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Pos_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select POS_CD,POS_NM,COMMENT");
            sb.AppendLine(" from N_POS_CODE ");
            sb.AppendLine(" order by CAST(POS_CD as int)  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Stor_List()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select STORAGE_CD,STORAGE_NM,COMMENT");
            sb.AppendLine(" from N_STORAGE_CODE ");
            sb.AppendLine(" order by CAST(STORAGE_CD as int) ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Type_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TYPE_CD,TYPE_NM,POOR_TYPE_YN,COMMENT");
            sb.AppendLine(" from N_TYPE_CODE ");
            sb.AppendLine(" order by TYPE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Unit_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select UNIT_CD,UNIT_NM,COMMENT");
            sb.AppendLine(" from N_UNIT_CODE ");
            sb.AppendLine(" order by UNIT_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Line_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select LINE_CD,LINE_NM,COMMENT");
            sb.AppendLine(" from N_LINE_CODE ");
            sb.AppendLine(" order by LINE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select A.FLOW_CD");
            //sb.AppendLine(" , A.FLOW_NM");
            //sb.AppendLine(" , A.STORAGE_CD");
            //sb.AppendLine(" , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            //sb.AppendLine(" , FLOW_INSERT_YN ");
            //sb.AppendLine(" , ITEM_IDEN_YN ");
            //sb.AppendLine(" , FLOW_CHK_YN ");
            //sb.AppendLine(" , TEMP_TIME_YN ");
            //sb.AppendLine(" , MOLD_YN ");
            //sb.AppendLine(" , POOR_TYPE_CD ");
            //sb.AppendLine(" , (SELECT TYPE_NM FROM N_TYPE_CODE WHERE TYPE_CD = A.POOR_TYPE_CD) AS POOR_TYPE_NM ");
            //sb.AppendLine(" , STAFF_YN ");
            //sb.AppendLine(" , STAFF_CD ");
            //sb.AppendLine(" , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM ");
            //sb.AppendLine(" , A.COMMENT");
            //sb.AppendLine(" from N_FLOW_CODE A ");
            //sb.AppendLine(condition);
            //sb.AppendLine(" order by A.FLOW_CD ");

            sb.AppendLine("select a.*,case when a.ITEM_IDEN_YN ='Y' then '발행'else '미발행' end 식별표,B.STORAGE_NM,C.STAFF_NM,d.TYPE_NM from N_FLOW_CODE as a   ");
            sb.AppendLine("left join N_STORAGE_CODE As B on B.STORAGE_CD=a.STORAGE_CD ");
            sb.AppendLine("left join N_STAFF_CODE As C on C.STAFF_CD=a.STAFF_CD ");
            sb.AppendLine("left join N_TYPE_CODE As D on D.POOR_TYPE_YN=a.POOR_TYPE_CD ");
            sb.AppendLine(condition);

            Debug.WriteLine("공정다뿌려준다");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Poor_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.POOR_CD");
            sb.AppendLine(" , A.POOR_NM");
            sb.AppendLine(" , A.TYPE_CD");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM ");
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" from N_POOR_CODE A ");
            sb.AppendLine(" order by POOR_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_chk_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select CHK_CD,CHK_NM,CHK_ORD,COMMENT,B.S_CODE_NM from  N_CHK_CODE as A");
            sb.AppendLine(" inner join [SM_FACTORY_COM].[dbo].[T_S_CODE] as B on B.S_CODE= A.CHK_GUBUN and B.L_CODE='600'");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_query_Poor(string p_type_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.POOR_CD as 코드");
            sb.AppendLine(" , A.POOR_NM as 명칭");
            sb.AppendLine(" from N_POOR_CODE A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" and TYPE_CD = '" + p_type_cd + "' ");
            sb.AppendLine(" order by POOR_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_query_Type()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.TYPE_CD as 코드");
            sb.AppendLine(" , A.TYPE_NM as 명칭");
            sb.AppendLine(" from N_TYPE_CODE A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" and POOR_TYPE_YN = 'Y' ");
            sb.AppendLine(" order by TYPE_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_query_com_code(string l_code)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    select S_CODE as 코드 ");
            sb.AppendLine("        , S_CODE_NM as 명칭 ");
            sb.AppendLine("         from T_S_CODE ");
            sb.AppendLine("         where L_CODE = '" + l_code + "'");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_List(string condition, string gubun)
        {
            StringBuilder sb = new StringBuilder();
            if (gubun == "1")
            {
                sb.AppendLine("select distinct A.RAW_MAT_CD");
                sb.AppendLine(" , RAW_MAT_NM");
                sb.AppendLine(" , A.SPEC");
                sb.AppendLine(" , RAW_MAT_GUBUN");
                sb.AppendLine(" , (select S_CODE_NM ");
                sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
                //sb.AppendLine("     , case when RAW_MAT_GUBUN = '1' then '원자재' ");
                //sb.AppendLine("             when RAW_MAT_GUBUN = '2' then '부자재' ");
                //sb.AppendLine("             else '포장자재' end as RAW_MAT_GUBUN_NM ");
                sb.AppendLine(" , TYPE_CD ");
                sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
                sb.AppendLine(" , INPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
                sb.AppendLine(" , OUTPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
                sb.AppendLine(" , LINE_CD ");
                sb.AppendLine(" , CVR_RATIO ");
                sb.AppendLine(" , INPUT_PRICE ");
                sb.AppendLine(" , OUTPUT_PRICE ");
                sb.AppendLine(" , RAW_STORAGE ");
                sb.AppendLine(" , EX_STAN_QUALITY ");
                sb.AppendLine(" , USED_CD ");
                sb.AppendLine(" , A.CUST_CD ");
                sb.AppendLine(" , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM ");
                sb.AppendLine(" , BASIC_STOCK ");
                sb.AppendLine(" , CHECK_GUBUN ");
                sb.AppendLine(" , PART_NO ");
                sb.AppendLine(" , BAL_STOCK ");
                sb.AppendLine(" , A.COMMENT");
                sb.AppendLine(" , ST_STATUS_YN");
                sb.AppendLine(" , TAX_CD");
                sb.AppendLine(" from N_RAW_CODE A ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by RAW_MAT_CD ");
            }
            else if (gubun == "2")
            {
                sb.AppendLine("select A.RAW_MAT_CD");
                sb.AppendLine(" , A.RAW_MAT_NM");
                sb.AppendLine(" , A.SPEC");
                sb.AppendLine(" , A.RAW_MAT_GUBUN");
                sb.AppendLine(" , (select S_CODE_NM ");
                sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
                //sb.AppendLine("     , case when RAW_MAT_GUBUN = '1' then '원자재' ");
                //sb.AppendLine("             when RAW_MAT_GUBUN = '2' then '부자재' ");
                //sb.AppendLine("             else '포장자재' end as RAW_MAT_GUBUN_NM ");
                sb.AppendLine(" , A.TYPE_CD ");
                sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
                sb.AppendLine(" , A.INPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
                sb.AppendLine(" , A.OUTPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
                sb.AppendLine(" , A.LINE_CD ");
                sb.AppendLine(" , A.CVR_RATIO ");
                sb.AppendLine(" , A.INPUT_PRICE ");
                sb.AppendLine(" , A.OUTPUT_PRICE ");
                sb.AppendLine(" , A.RAW_STORAGE ");
                sb.AppendLine(" , A.EX_STAN_QUALITY ");
                sb.AppendLine(" , A.USED_CD ");
                sb.AppendLine(" , A.CUST_CD ");
                sb.AppendLine(" , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM ");
                sb.AppendLine(" , A.BASIC_STOCK ");
                sb.AppendLine(" , A.CHECK_GUBUN ");
                sb.AppendLine(" , A.PART_NO ");
                sb.AppendLine(" , A.BAL_STOCK ");
                sb.AppendLine(" , A.COMMENT");
                sb.AppendLine(" from N_RAW_CODE A ");
                sb.AppendLine(" left outer join N_RAW_CODE B ");
                sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by RAW_MAT_CD ");
            }
            else
            {

                sb.AppendLine("select A.RAW_MAT_CD");
                sb.AppendLine(" , RAW_MAT_NM");
                sb.AppendLine(" , SPEC");
                sb.AppendLine(" , RAW_MAT_GUBUN");
                sb.AppendLine(" , (select S_CODE_NM ");
                sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
                //sb.AppendLine("     , case when RAW_MAT_GUBUN = '1' then '원자재' ");
                //sb.AppendLine("             when RAW_MAT_GUBUN = '2' then '부자재' ");
                //sb.AppendLine("             else '포장자재' end as RAW_MAT_GUBUN_NM ");
                sb.AppendLine(" , TYPE_CD ");
                sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
                sb.AppendLine(" , INPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
                sb.AppendLine(" , OUTPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
                sb.AppendLine(" , LINE_CD ");
                sb.AppendLine(" , CVR_RATIO ");
                sb.AppendLine(" , INPUT_PRICE ");
                sb.AppendLine(" , OUTPUT_PRICE ");
                sb.AppendLine(" , RAW_STORAGE ");
                sb.AppendLine(" , EX_STAN_QUALITY ");
                sb.AppendLine(" , USED_CD ");
                sb.AppendLine(" , CUST_CD ");
                sb.AppendLine(" , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM ");
                sb.AppendLine(" , BASIC_STOCK ");
                sb.AppendLine(" , CHECK_GUBUN ");
                sb.AppendLine(" , PART_NO ");
                sb.AppendLine(" , BAL_STOCK ");
                sb.AppendLine(" , COMMENT");
                sb.AppendLine(" , ST_STATUS_YN");
                sb.AppendLine(" , '' as INPUT_DATE");
                sb.AppendLine(" , '' as INPUT_CD");
                sb.AppendLine(" , '' as SEQ");
                sb.AppendLine(" from N_RAW_CODE A ");
                sb.AppendLine(condition);

                sb.AppendLine("union all");

                sb.AppendLine("select A.RAW_MAT_CD");
                sb.AppendLine(" , RAW_MAT_NM");
                sb.AppendLine(" , isnull(C.COMMENT, '') as SPEC");
                sb.AppendLine(" , RAW_MAT_GUBUN");
                sb.AppendLine(" , (select S_CODE_NM ");
                sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
                sb.AppendLine(" , TYPE_CD ");
                sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
                sb.AppendLine(" , INPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
                sb.AppendLine(" , OUTPUT_UNIT ");
                sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
                sb.AppendLine(" , LINE_CD ");
                sb.AppendLine(" , CVR_RATIO ");
                sb.AppendLine(" , INPUT_PRICE ");
                sb.AppendLine(" , OUTPUT_PRICE ");
                sb.AppendLine(" , RAW_STORAGE ");
                sb.AppendLine(" , EX_STAN_QUALITY ");
                sb.AppendLine(" , USED_CD ");
                sb.AppendLine(" , C.CUST_CD ");
                sb.AppendLine(" , C.CUST_CD AS CUST_NM ");
                sb.AppendLine(" , BASIC_STOCK ");
                sb.AppendLine(" , CHECK_GUBUN ");
                sb.AppendLine(" , PART_NO ");
                sb.AppendLine(" , BAL_STOCK ");
                sb.AppendLine(" , A.COMMENT");
                sb.AppendLine(" , C.INPUT_DATE ");
                sb.AppendLine(" , C.INPUT_CD ");
                sb.AppendLine(" , C.SEQ ");
                sb.AppendLine("   from (select B.RAW_MAT_CD, B.INPUT_DATE, B.INPUT_CD, B.SEQ, A.CUST_CD, B.COMMENT  from F_RAW_INPUT A inner join F_RAW_DETAIL B on A.INPUT_DATE = B.INPUT_DATE and A.INPUT_CD = B.INPUT_CD) C ");
                sb.AppendLine("   inner join N_RAW_CODE A");
                sb.AppendLine("  on A.RAW_MAT_CD = C.RAW_MAT_CD ");
                sb.AppendLine(condition);
                sb.AppendLine("   and C.CUST_CD = 'dregs' ");

                sb.AppendLine(" order by CUST_CD ");
            }
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Raw_Name_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select RAW_MAT_CD");
            sb.AppendLine(" , RAW_MAT_NM");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" order by RAW_MAT_NM ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Raw_Meat_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine(" , B.SEQ");
            sb.AppendLine(" , A.RAW_MAT_NM");
            sb.AppendLine(" , B.RAW_MAT_CD");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , A.TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" , A.INPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine(" , A.OUTPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            sb.AppendLine(" , A.CHECK_GUBUN   ");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" left outer join N_RAW_MEAT_SOURCE B");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by B.SEQ ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Raw_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine(" , A.RAW_MAT_NM");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , A.USED_CD ");
            sb.AppendLine(" , A.CUST_CD ");
            sb.AppendLine(" , A.BASIC_STOCK ");
            sb.AppendLine(" , A.PART_NO ");
            sb.AppendLine(" , B.CONTROL_NO "); //시험기준 외관
            sb.AppendLine(" , B.RAW_MAT_CD AS RAW_MAT_CHK");
            sb.AppendLine("  ,case when isnull(B.RAW_MAT_CD,'N')<>'N' then 'Y' else 'N' end RAW_MAT_YN"); //원자재수입검사 기준 있는지 체크 (RAW_MAT_CD가 NULL체크로 구별)
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" left outer join N_RAW_CHK B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" where 1=1  and A.CHECK_GUBUN='1'");

            sb.AppendLine(condition);
            sb.AppendLine(" order by RAW_MAT_CD ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Half_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.ITEM_CD ");
            sb.AppendLine(" , A.ITEM_NM ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '400' and S_CODE = A.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.UNIT_CD");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS INPUT_UNIT_NM ");
            sb.AppendLine(" ,A.TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" ,A.LINE_CD ");
            sb.AppendLine(" , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine(" ,A.UNIT_CD ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine(" ,A.STOCK_LOC ");
            sb.AppendLine(" ,A.PROP_STOCK ");
            sb.AppendLine(" ,A.BAL_STOCK ");
            sb.AppendLine(" ,A.BASIC_STOCK ");
            sb.AppendLine(" ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine(" ,OUTPUT_PRICE ");
            sb.AppendLine(" ,A.CHARGE_AMT ");
            sb.AppendLine(" ,A.PACK_AMT ");
            sb.AppendLine(" ,A.USED_CD ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(" where A.ITEM_GUBUN = '2' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Cust_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.CUST_CD");
            sb.AppendLine("     ,CUST_GUBUN ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '200' and S_CODE = A.CUST_GUBUN) AS CUST_GUBUN_NM ");
            sb.AppendLine("     ,CUST_NM ");
            sb.AppendLine("     ,OWNER ");
            sb.AppendLine("     ,SAUP_NO ");
            sb.AppendLine("     ,UPTAE ");
            sb.AppendLine("     ,JONGMOK ");
            sb.AppendLine("     ,DEAL_TYPE ");
            sb.AppendLine("     ,POST_NO ");
            sb.AppendLine("     ,ADDR ");
            sb.AppendLine("     ,CUST_MANAGER ");
            sb.AppendLine("     ,CUST_EMAIL ");
            sb.AppendLine("     ,CUST_COMP_PHONE ");
            sb.AppendLine("     ,CUST_PHONE ");
            sb.AppendLine("     ,CUST_FAX ");
            sb.AppendLine("     ,CUST_OPEN ");
            sb.AppendLine("     ,A.STAFF_CD ");
            sb.AppendLine("     ,TAX_CD ");
            // 2020-05-21 이재원 TAX_NM과 BALANCE 추가
            sb.AppendLine("     ,BALANCE ");
            sb.AppendLine("     ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '910' AND S_CODE = A.TAX_CD) AS TAX_NM  ");
            sb.AppendLine(" , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '500' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine(" from N_CUST_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.CUST_CD ");

            Debug.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Cust_Name_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CUST_CD");
            sb.AppendLine("     ,CUST_NM ");
            sb.AppendLine(" from N_CUST_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CUST_NM ");

            Debug.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CHK_CD");
            sb.AppendLine("     ,CHK_GUBUN ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '600' and S_CODE = A.CHK_GUBUN) AS CHK_GUBUN_NM ");
            sb.AppendLine("     ,CHK_ORD ");
            sb.AppendLine("     ,CHK_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from N_CHK_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CHK_GUBUN,CHK_ORD ");
            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_ItemLst()
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,A.ITEM_GUBUN ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(" order by ITEM_NM");

            Debug.WriteLine("팝업 킨다 ");
            Debug.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Item_List(string condition)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,A.ITEM_GUBUN ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,B.CUST_NM ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,OUTPUT_PRICE ");
            sb.AppendLine("     ,CHARGE_AMT ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,A.USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,BOX_BAR_CD ");
            sb.AppendLine("     ,BOX_AMT ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            sb.AppendLine("     ,MOLD_CD ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine("left outer join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,ITEM_CD");

            Debug.WriteLine("팝업 킨다 ");
            Debug.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Item_List(string condition, string cust_cd)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,A.ITEM_GUBUN ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,B.CUST_NM ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,ISNULL(case when '" + cust_cd + "' = '' ");
            sb.AppendLine("      then (select max(UNIT_PRICE) from N_PRICE_INFO where PROD_CD = ITEM_CD)");
            sb.AppendLine("      else (select UNIT_PRICE from N_PRICE_INFO where  CUST_CD =  '" + cust_cd + "' and PROD_CD = ITEM_CD)");
            sb.AppendLine("      end ,0) AS OUTPUT_PRICE");
            sb.AppendLine("     ,CHARGE_AMT ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,A.USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,BOX_BAR_CD ");
            sb.AppendLine("     ,BOX_AMT ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            sb.AppendLine("     ,MOLD_CD ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine("left outer join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,ITEM_CD");

            Debug.WriteLine("팝업 킨다 ");
            Debug.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Item_List2(string condition)
        {
            StringBuilder sb = new StringBuilder();






            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,A.ITEM_GUBUN ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,B.CUST_NM ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,OUTPUT_PRICE ");
            sb.AppendLine("     ,CHARGE_AMT ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,A.USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,BOX_BAR_CD ");
            sb.AppendLine("     ,BOX_AMT ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            sb.AppendLine("     ,MOLD_CD ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine("inner join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,ITEM_CD");

            Debug.WriteLine("팝업 킨다 ");
            Debug.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        //공정검사 항목 리스트 

        public DataTable fn_Flow_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,C.ITEM_NM ");
            sb.AppendLine("     ,B.SEQ ");
            sb.AppendLine("     ,A.FLOW_CD ");
            sb.AppendLine("     ,D.FLOW_NM ");
            sb.AppendLine("     ,C.SPEC ");
            sb.AppendLine("     ,C.ITEM_GUBUN ");
            sb.AppendLine("     ,A.MEASURE_CNT ");
            sb.AppendLine("     ,A.EVA_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = C.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" from N_FLOW_CHK A ");
            sb.AppendLine(" inner join N_ITEM_FLOW B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("     and A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine(" inner join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" inner join N_FLOW_CODE D ");
            sb.AppendLine(" on A.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD,B.SEQ");
            Debug.WriteLine("공정검사 항목 리스트");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_rC_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD, D.SPEC, D.RAW_MAT_NM from N_RAW_CHK A INNER JOIN N_RAW_CODE D ON A.RAW_MAT_CD = D.RAW_MAT_CD ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_rChk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select			A.RAW_MAT_CD,			B.CHK_CD,			C.CHK_NM, ");
            sb.AppendLine("C.CHK_ORD,			C.CHK_GUBUN			,C.COMMENT	 ");
            sb.AppendLine(",D.SPEC, D.RAW_MAT_NM , A.CONTROL_NO , B.CHK_STAN_VALUE	 ");
            sb.AppendLine("from N_RAW_CHK A ");
            sb.AppendLine("INNER JOIN N_RAW_CHK_STAN B ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("LEFT OUTER JOIN N_CHK_CODE C ON B.CHK_CD = C.CHK_CD     ");
            sb.AppendLine("INNER JOIN N_RAW_CODE D ON A.RAW_MAT_CD = D.RAW_MAT_CD     ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품 검사기준 상세 가져오기 
        public DataTable fn_Item_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,C.ITEM_NM ");
            sb.AppendLine("     ,C.SPEC ");
            sb.AppendLine("     ,C.ITEM_GUBUN ");
            sb.AppendLine("     ,A.MEASURE_CNT ");
            sb.AppendLine("     ,A.EVA_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = C.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" from N_ITEM_CHK A ");
            sb.AppendLine(" inner join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD");

            Debug.WriteLine("제품 검사기준 상세 가져오기 ");

            Debug.WriteLine(sb.ToString());
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Flow_Chk_Detail_List(string condition, int gbn)
        {
            StringBuilder sb = new StringBuilder();

            if (gbn == 1) //공정검사 대기 혹은 공정검사기준 목록 가져올 때 
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.FLOW_CD ");
                sb.AppendLine("     ,A.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,B.CHK_NM ");
                sb.AppendLine("     ,A.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = A.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,A.CHK_LOC ");
                sb.AppendLine("     ,A.RULE_SIZE ");
                sb.AppendLine("     ,A.RULE_LIMIT ");
                sb.AppendLine("     ,A.MEASURE_APP ");
                sb.AppendLine("     ,A.CHK_METHOD ");
                sb.AppendLine("     ,A.LOWER_SIZE ");
                sb.AppendLine("     ,A.UPPER_SIZE ");
                sb.AppendLine("     ,A.LOWER_SELF ");
                sb.AppendLine("     ,A.UPPER_SELF ");
                sb.AppendLine("         ,B.COMMENT ");
                sb.AppendLine(" from N_FLOW_CHK_STAN A  ");
                sb.AppendLine(" inner join N_CHK_CODE B ");
                sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
                sb.AppendLine("     and B.CHK_GUBUN = '1' ");
                sb.AppendLine(" inner join N_ITEM_CODE C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" inner join N_FLOW_CODE D ");
                sb.AppendLine(" on A.FLOW_CD = D.FLOW_CD ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
                Debug.WriteLine("//공정검사 대기 혹은 공정검사기준 목록 가져올 때 ");
            }
            else
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.FLOW_CD ");
                sb.AppendLine("     ,B.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,D.CHK_NM ");
                sb.AppendLine("     ,C.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = C.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,C.CHK_LOC ");
                sb.AppendLine("     ,C.RULE_SIZE ");
                sb.AppendLine("     ,C.RULE_LIMIT ");
                sb.AppendLine("     ,C.MEASURE_APP ");
                sb.AppendLine("     ,C.CHK_METHOD ");
                sb.AppendLine("     ,C.LOWER_SIZE ");
                sb.AppendLine("     ,C.UPPER_SIZE ");
                sb.AppendLine("     ,C.LOWER_SELF ");
                sb.AppendLine("     ,C.UPPER_SELF ");
                sb.AppendLine("     ,B.GRADE ");
                sb.AppendLine("         ,B.COMMENT ");
                sb.AppendLine(" from F_FLOW_CHK A  ");
                sb.AppendLine(" inner join F_FLOW_CHK_RST B ");
                sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
                sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
                sb.AppendLine("     and A.F_STEP = B.F_STEP ");
                sb.AppendLine(" inner join N_FLOW_CHK_STAN C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" and A.FLOW_CD = C.FLOW_CD ");
                sb.AppendLine(" and B.CHK_CD = C.CHK_CD ");
                sb.AppendLine(" inner join N_CHK_CODE D ");
                sb.AppendLine(" on B.CHK_CD = D.CHK_CD ");
                sb.AppendLine("     and D.CHK_GUBUN = '1' ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Chk_Detail_List(string condition, int gbn)
        {
            StringBuilder sb = new StringBuilder();

            if (gbn == 1) //공정검사 대기 혹은 공정검사기준 목록 가져올 때 
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,B.CHK_NM ");
                sb.AppendLine("     ,A.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = A.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,A.CHK_LOC ");
                sb.AppendLine("     ,A.RULE_SIZE ");
                sb.AppendLine("     ,A.RULE_LIMIT ");
                sb.AppendLine("     ,A.MEASURE_APP ");
                sb.AppendLine("     ,A.CHK_INTERVAL ");
                sb.AppendLine("     ,A.LOWER_SIZE ");
                sb.AppendLine("     ,A.UPPER_SIZE ");
                sb.AppendLine("     ,A.LOWER_SELF ");
                sb.AppendLine("     ,A.UPPER_SELF ");
                sb.AppendLine(" from N_ITEM_CHK_STAN A  ");
                sb.AppendLine(" inner join N_CHK_CODE B ");
                sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
                sb.AppendLine("     and B.CHK_GUBUN = '2' ");
                sb.AppendLine(" inner join N_ITEM_CODE C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }
            else
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,B.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,D.CHK_NM ");
                sb.AppendLine("     ,C.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = C.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,C.CHK_LOC ");
                sb.AppendLine("     ,C.RULE_SIZE ");
                sb.AppendLine("     ,C.RULE_LIMIT ");
                sb.AppendLine("     ,C.MEASURE_APP ");
                sb.AppendLine("     ,C.CHK_INTERVAL ");
                sb.AppendLine("     ,C.LOWER_SIZE ");
                sb.AppendLine("     ,C.UPPER_SIZE ");
                sb.AppendLine("     ,C.LOWER_SELF ");
                sb.AppendLine("     ,C.UPPER_SELF ");
                sb.AppendLine("     ,B.GRADE ");
                sb.AppendLine(" from F_ITEM_CHK A  ");
                sb.AppendLine(" inner join F_ITEM_CHK_RST B ");
                sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
                sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
                sb.AppendLine("     and A.F_STEP = B.F_STEP ");
                sb.AppendLine(" inner join N_ITEM_CHK_STAN C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" and B.CHK_CD = C.CHK_CD ");
                sb.AppendLine(" inner join N_CHK_CODE D ");
                sb.AppendLine(" on B.CHK_CD = D.CHK_CD ");
                sb.AppendLine("     and D.CHK_GUBUN = '2' ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Chk_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" order by B.CHK_ORD");
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine("     ,A.CHK_CD ");
            sb.AppendLine("     ,B.CHK_ORD ");
            sb.AppendLine("     ,B.CHK_NM ");
            sb.AppendLine("     ,A.CHK_STAN_VALUE ");
            sb.AppendLine(" from N_RAW_CHK_STAN A  ");
            sb.AppendLine(" inner join N_CHK_CODE B ");
            sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
            sb.AppendLine("     and B.CHK_GUBUN = '3' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by B.CHK_ORD");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Chk_Exam_Value(string condition) //공정검사 성적서 
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.CHK_VALUE");
            sb.AppendLine(" from F_FLOW_CHK_DETAIL A  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Chk_Exam_Value(string condition) //제품검사 성적서 
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.CHK_VALUE");
            sb.AppendLine(" from F_ITEM_CHK_DETAIL A  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Item_Comp_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD");
            sb.AppendLine("     ,B.RAW_MAT_NM");
            sb.AppendLine("     ,B.SPEC");
            sb.AppendLine("     ,B.INPUT_UNIT ");
            sb.AppendLine("     ,B.OUTPUT_UNIT ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM ");
            sb.AppendLine("     ,A.TOTAL_AMT ");
            sb.AppendLine("     ,B.CVR_RATIO ");
            sb.AppendLine(" from N_ITEM_COMP A ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD ,A.SEQ");
            Debug.WriteLine("fn_Item_Comp_List");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.FLOW_CD");
            sb.AppendLine("     ,B.FLOW_INSERT_YN");
            sb.AppendLine("     ,A.ITEM_IDEN_YN");
            sb.AppendLine("      ,B.FLOW_CHK_YN");
            sb.AppendLine("      ,A.FLOW_SEQ");
            sb.AppendLine("     ,A.COMMENT");
            sb.AppendLine("     ,B.FLOW_NM");
            sb.AppendLine("     ,case when A.ITEM_IDEN_YN ='Y' then '발행'else '미발행' end 식별표");
            sb.AppendLine("     ,C.TYPE_CD");
            sb.AppendLine("     ,A.COMMENT AS FLOW_COMMENT ");
            sb.AppendLine(" from N_ITEM_FLOW A ");
            sb.AppendLine(" LEFT OUTER JOIN N_FLOW_CODE B ");
            sb.AppendLine(" ON A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine(" LEFT OUTER JOIN N_TYPE_CODE C  ");
            sb.AppendLine(" ON B.POOR_TYPE_CD = C.TYPE_CD ");


            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD,A.SEQ ");
            Debug.WriteLine("fn_Item_Flow_List");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Half_List(string condition, double total_amt)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.HALF_ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM AS HALF_ITEM_NM");
            sb.AppendLine("     ,B.UNIT_CD  ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD) AS UNIT_NM   ");
            sb.AppendLine("     ,A.TOTAL_AMT as HALF_AMT ");
            sb.AppendLine("     ," + total_amt + " * A.TOTAL_AMT as TOTAL_AMT ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,B.OUTPUT_PRICE AS PRICE ");
            sb.AppendLine(" from N_ITEM_COMP_HALF A  ");
            sb.AppendLine(" INNER JOIN N_ITEM_CODE B  ");
            sb.AppendLine(" ON A.HALF_ITEM_CD = B.ITEM_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Fac_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select FAC_CD");
            sb.AppendLine("     ,FAC_NM ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,MODEL_NM ");
            sb.AppendLine("     ,MANU_COMPANY ");
            sb.AppendLine("     ,ACQ_DATE ");
            sb.AppendLine("     ,ACQ_PRICE ");
            sb.AppendLine("     ,A.DEPT_CD ");
            sb.AppendLine("     ,(SELECT DEPT_CD FROM N_DEPT_CODE WHERE DEPT_CD = A.DEPT_CD) AS DEPT_NM ");
            sb.AppendLine("     ,USED ");
            sb.AppendLine("     ,PRO_CAPA ");
            sb.AppendLine("     ,POWER_NUMBER ");
            sb.AppendLine("     ,MAINTEN_CLASS ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from N_FAC_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by FAC_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        // 생산계획 등록 조회

        public DataTable fn_Plan_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.PLAN_DATE");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.PLAN_NUM ");
            sb.AppendLine("     ,ISNULL(B.ITEM_CD,0) AS ITEM_CNT ");
            sb.AppendLine("     , a.CUST_CD  ");
            sb.AppendLine("      ,it.ITEM_NM   ");
            sb.AppendLine("        ,CASE WHEN ITEM_CNT>1 THEN it.ITEM_NM+' 외' +convert(nvarchar,ITEM_CNT-1) ELSE it.ITEM_NM END ITEM_CNT2     ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,DELIVER_REQ_DATE ");
            sb.AppendLine("       ,CASE WHEN ORDER_YN='Y' THEN '산출' ELSE '미산출' END ORDER_YN    ");
            sb.AppendLine("     ,a.COMMENT ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine("  SELECT PLAN_DATE,PLAN_CD,COUNT(ITEM_CD) AS ITEM_cnt ,max(ITEM_CD) as ITEM_CD FROM F_PLAN_DETAIL  ");
            sb.AppendLine(" WHERE F_LEVEL = 1 ");
            sb.AppendLine(" GROUP BY PLAN_DATE,PLAN_CD) B ");
            sb.AppendLine("  ON A.PLAN_DATE = B.PLAN_DATE  ");
            sb.AppendLine(" AND A.PLAN_CD = B.PLAN_CD   ");
            sb.AppendLine("   left outer join N_ITEM_CODE  as it on it.ITEM_CD=B.ITEM_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("  order by A.PLAN_DATE desc, A.PLAN_CD desc ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_수주_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.PLAN_DATE,A.PLAN_CD,A.PLAN_NUM,A.CUST_CD,B.CUST_NM,A.DELIVER_REQ_DATE,A.COMMENT,C.STAFF_NM,case when isnull(D.ORD_DATE,'x')<>'x' then '등록' else '미등록' end 등록 ");
            sb.AppendLine("    from F_PLAN as A ");
            sb.AppendLine("     inner join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD ");
            sb.AppendLine("     inner join N_STAFF_CODE as C on C.STAFF_CD=A.STAFF_CD");
            sb.AppendLine("       left join S_주문등록_H as D on D.PLAN_DATE=A.PLAN_DATE and D.PLAN_CD=A.PLAN_CD");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_주문항목_List(string condition)
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(",A.ORD_NUM  ");
            sb.AppendLine(" ,A.ORD_SEQ ");
            sb.AppendLine("  ,A.ITEM_CD");
            sb.AppendLine(" ,B.ITEM_NM ");
            sb.AppendLine(" ,B.SPEC ");
            sb.AppendLine(" ,A.ORD_QTY ");
            sb.AppendLine("  ,A.ORD_PRICE");
            sb.AppendLine("  ,A.ORD_AMT");
            sb.AppendLine("  ,C.UNIT_CD");
            sb.AppendLine("   ,C.UNIT_NM");
            sb.AppendLine("  ,A.LAST_DATE");
            sb.AppendLine(" ,A.SALE_GB ");
            sb.AppendLine(" ,A.COMMENT ");
            sb.AppendLine("  ,Z.RECIPIENT_SIGN ");
            sb.AppendLine("  from S_주문등록_D AS A ");
            sb.AppendLine("  left join N_ITEM_CODE as B on B.ITEM_CD=A.ITEM_CD ");
            sb.AppendLine("  left join N_UNIT_CODE as C on C.UNIT_CD=B.UNIT_CD ");
            sb.AppendLine("    left join S_배송등록_H AS Z on Z.ORD_DATE=A.ORD_DATE and Z.ORD_NUM=A.ORD_NUM ");
            sb.AppendLine(condition);





            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_배송항목_List(string condition)
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(",A.ORD_NUM  ");
            sb.AppendLine(" ,A.ORD_SEQ ");
            sb.AppendLine("  ,A.ITEM_CD");
            sb.AppendLine(" ,B.ITEM_NM ");
            sb.AppendLine(" ,B.SPEC ");
            sb.AppendLine(" ,A.ORD_QTY ");
            //  sb.AppendLine(" ,A.DELIVERY_QTY ");
            sb.AppendLine("  ,A.ORD_PRICE");
            sb.AppendLine("  ,A.ORD_AMT");
            sb.AppendLine("  ,C.UNIT_CD");
            sb.AppendLine("   ,C.UNIT_NM");
            sb.AppendLine("  ,A.LAST_DATE");
            sb.AppendLine(" ,A.SALE_GB ");
            sb.AppendLine(" ,A.COMMENT ");
            sb.AppendLine("  from S_주문등록_D AS A ");
            sb.AppendLine("  left join N_ITEM_CODE as B on B.ITEM_CD=A.ITEM_CD ");
            sb.AppendLine("  left join N_UNIT_CODE as C on C.UNIT_CD=B.UNIT_CD ");
            sb.AppendLine(condition);





            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        // 발주서 등록 조회

        public DataTable fn_Order_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,(substring(A.ORDER_DATE,0,5)+'-'+isnull(A.ORDER_NUM,'0') )as ORDER_NUM ");

            sb.AppendLine("     ,A.ORDER_DATE+' #'+convert(nvarchar,a.ORDER_CD) as 일자 ");
            sb.AppendLine("     ,ISNULL(B.RAW_MAT_CNT,0) AS RAW_MAT_CNT ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("       ,Z.CUST_NM ");
            sb.AppendLine("       ,Z.CUST_PHONE ");
            sb.AppendLine("       ,Z.CUST_EMAIL ");
            sb.AppendLine("     ,A.INPUT_REQ_DATE ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.STAFF_CD ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_NM = '" + Common.p_strUserName + "') as STAFF_NM ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("       ,B.RAW_MAT");
            sb.AppendLine("           ,case when RAW_MAT_CNT-1=0 then  C.RAW_MAT_NM else C.RAW_MAT_NM  +'외'+ convert(nvarchar,RAW_MAT_CNT-1) end 원자재명");
            sb.AppendLine(" from F_ORDER A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT ORDER_DATE,ORDER_CD,COUNT(RAW_MAT_CD) AS RAW_MAT_CNT ,max(RAW_MAT_CD) as RAW_MAT FROM F_ORDER_DETAIL ");
            sb.AppendLine(" GROUP BY ORDER_DATE,ORDER_CD) B ");
            sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
            sb.AppendLine(" AND A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine("  left outer join N_CUST_CODE as Z on Z.CUST_CD=A.CUST_CD ");
            sb.AppendLine(" left join N_RAW_CODE as C on C.RAW_MAT_CD=B.RAW_MAT ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ORDER_DATE desc, A.ORDER_CD desc ");
            Debug.WriteLine("발주서 오더 리슽");
            Debug.WriteLine(sb.ToString());
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Order_List_forPrint(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.INPUT_REQ_DATE AS ORDER_CD ");
            sb.AppendLine("     ,(substring(A.ORDER_DATE,0,5)+'-'+isnull(A.ORDER_NUM,'0') )as ORDER_NUM ");

            sb.AppendLine("     ,A.ORDER_DATE+' #'+convert(nvarchar,a.ORDER_CD) as 일자 ");
            sb.AppendLine("     ,ISNULL(B.RAW_MAT_CNT,0) AS RAW_MAT_CNT ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("       ,Z.CUST_NM ");
            sb.AppendLine("       ,Z.CUST_PHONE ");
            sb.AppendLine("       ,Z.CUST_EMAIL ");
            sb.AppendLine("     ,A.INPUT_REQ_DATE ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.STAFF_CD ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_NM = '" + Common.p_strUserName + "') as STAFF_NM ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("       ,B.RAW_MAT");
            sb.AppendLine("           ,case when RAW_MAT_CNT-1=0 then  C.RAW_MAT_NM else C.RAW_MAT_NM  +'외'+ convert(nvarchar,RAW_MAT_CNT-1) end 원자재명");
            sb.AppendLine(" from F_ORDER A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT ORDER_DATE,ORDER_CD,COUNT(RAW_MAT_CD) AS RAW_MAT_CNT ,max(RAW_MAT_CD) as RAW_MAT FROM F_ORDER_DETAIL ");
            sb.AppendLine(" GROUP BY ORDER_DATE,ORDER_CD) B ");
            sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
            sb.AppendLine(" AND A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine("  left outer join N_CUST_CODE as Z on Z.CUST_CD=A.CUST_CD ");
            sb.AppendLine(" left join N_RAW_CODE as C on C.RAW_MAT_CD=B.RAW_MAT ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ORDER_DATE desc, A.ORDER_CD desc ");
            Debug.WriteLine("발주서 오더 리슽");
            Debug.WriteLine(sb.ToString());
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        // 원자재 입고 등록 조회

        public DataTable fn_Rm_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,ISNULL(B.RAW_MAT_CNT,0) AS RAW_MAT_CNT ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '2' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM ");
            sb.AppendLine("     ,A.COMMENT ");
            //2020-05-22 이재원 부가세구분과 지급 관련 컬럼 추가
            sb.AppendLine("     ,D.VAT_CD ");
            sb.AppendLine("     ,C.GIVE_GUBUN ");
            sb.AppendLine("     ,C.GIVE_MONEY ");
            sb.AppendLine("     ,C.DC_MONEY ");
            sb.AppendLine("     ,C.TOTAL_MONEY ");
            sb.AppendLine(" from F_RAW_INPUT A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT INPUT_DATE,INPUT_CD,COUNT(RAW_MAT_CD) AS RAW_MAT_CNT FROM F_RAW_DETAIL ");
            sb.AppendLine(" GROUP BY INPUT_DATE,INPUT_CD) B ");
            sb.AppendLine(" ON A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine(" LEFT OUTER JOIN F_GIVE C ");
            sb.AppendLine(" ON A.INPUT_DATE = C.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = C.INPUT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_BUY D ");
            sb.AppendLine(" ON A.INPUT_DATE = D.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = D.INPUT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc ");
            Debug.WriteLine("원자재 인풋 리슽");
            Debug.WriteLine(sb.ToString());
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }


        public DataTable fn_item_inst_raw_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" SELECT U.RAW_MAT_CD");
            sb.AppendLine(" , K.RAW_MAT_NM ");
            sb.AppendLine(" , K.SPEC ");
            sb.AppendLine(" , U.TOTAL_AMT AS TOTAL_AMT  ");
            sb.AppendLine(" , ISNULL(K.BAL_STOCK,0) AS BAL_STOCK ");
            sb.AppendLine(" , isnull(((U.TOTAL_AMT / K.CVR_RATIO)-K.BAL_STOCK),0) as RS_AMT  ");
            sb.AppendLine(" , K.INPUT_PRICE  ");
            sb.AppendLine(" , isnull(((U.TOTAL_AMT / K.CVR_RATIO)-K.BAL_STOCK) * K.INPUT_PRICE,0) AS TOTAL_MONEY    ");
            sb.AppendLine(" , K.OUTPUT_PRICE   ");
            sb.AppendLine(" , K.INPUT_UNIT  ");
            sb.AppendLine(" , UNI.UNIT_NM as 입고단위   ");
            sb.AppendLine(" , UNO.UNIT_NM as 사용단위  ");
            sb.AppendLine(" , K.CUST_CD   ");
            sb.AppendLine(" ,P.CUST_NM  ");
            sb.AppendLine(" ,P.CUST_GUBUN   ");
            sb.AppendLine(" ,DENSE_RANK() OVER(ORDER BY K.CUST_CD) AS CUST_NUM   ");
            sb.AppendLine(" , (select S_CODE_NM   ");
            sb.AppendLine("  from [SM_FACTORY_COM].[dbo].[T_S_CODE]   ");
            sb.AppendLine(" where L_CODE = '200' and S_CODE = P.CUST_GUBUN) AS CUST_GUBUN_NM   ");
            sb.AppendLine(" , Q.INPUT_DATE  ");
            sb.AppendLine(" , Q.INPUT_CD  ");
            sb.AppendLine(" , Q.INPUT_SEQ  ");
            sb.AppendLine(" FROM (  ");
            sb.AppendLine("  select RAW_MAT_CD, TOTAL_AMT , LOT_NO  ");
            sb.AppendLine(" from (  ");
            sb.AppendLine("   select  ");
            sb.AppendLine("     C.RAW_MAT_CD ");
            sb.AppendLine("   , ISNULL(C.TOTAL_AMT*B.TOTAL_AMT,0) AS TOTAL_AMT  ");
            sb.AppendLine("   , A.LOT_NO   ");
            sb.AppendLine("  from F_WORK_INST A   ");
            sb.AppendLine("   left outer join F_WORK_INST_DETAIL B");
            sb.AppendLine("   on A.W_INST_DATE = B.W_INST_DATE  ");
            sb.AppendLine("      and A.W_INST_CD = B.W_INST_CD  ");
            sb.AppendLine(" left outer join N_ITEM_COMP C  ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD  ");
            sb.AppendLine("   and B.RAW_MAT_CD = C.RAW_MAT_CD");
            sb.AppendLine(" inner join N_RAW_CODE D  ");
            sb.AppendLine("  on C.RAW_MAT_CD = D.RAW_MAT_CD  ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("      ) Z");
            sb.AppendLine("       ) U  ");
            sb.AppendLine("    left outer join N_RAW_CODE K ");
            sb.AppendLine("    on U.RAW_MAT_CD = K.RAW_MAT_CD ");
            sb.AppendLine("   left outer join N_UNIT_CODE UNI  ");
            sb.AppendLine("   on UNI.UNIT_CD = K.INPUT_UNIT  ");
            sb.AppendLine("    left outer join N_UNIT_CODE UNO ");
            sb.AppendLine("    on UNO.UNIT_CD = K.OUTPUT_UNIT ");
            sb.AppendLine("  left outer join N_CUST_CODE P  ");
            sb.AppendLine("   on K.CUST_CD = P.CUST_CD  ");
            sb.AppendLine("  left outer join  F_RAW_OUTPUT  Q  ");
            sb.AppendLine("  on Q.LOT_NO = U.LOT_NO  ");
            sb.AppendLine("  and Q.RAW_MAT_CD = U.RAW_MAT_CD  ");
            sb.AppendLine("  order by K.CUST_CD,U.RAW_MAT_CD  ");

            Debug.WriteLine(sb.ToString());
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }




        public DataTable fn_Plan_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,A.WORK_YN ");
            sb.AppendLine("     ,B.ITEM_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.F_LEVEL ");
            sb.AppendLine("     , A.TOP_ITEM_CD ");
            sb.AppendLine("     , (select ITEM_NM from N_ITEM_CODE where ITEM_CD = A.TOP_ITEM_CD) AS TOP_ITEM_NM");
            sb.AppendLine("     , A.P_ITEM_CD ");
            sb.AppendLine("     , (select ITEM_NM from N_ITEM_CODE where ITEM_CD = A.P_ITEM_CD) AS P_ITEM_NM ");
            sb.AppendLine("     , A.DEFAULT_AMT ");
            sb.AppendLine(" from F_PLAN_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.PLAN_DATE,A.PLAN_CD,A.F_LEVEL,A.SEQ ");

            Debug.WriteLine("플랜 디테일 리슽");
            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Soyo_Result_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("   ");
               
            sb.AppendLine("       SELECT U.RAW_MAT_CD                       ");
            sb.AppendLine("       , K.RAW_MAT_NM                            ");
            sb.AppendLine("       , K.SPEC                                  ");
            sb.AppendLine("       , U.TOTAL_AMT AS TOTAL_AMT                ");
            sb.AppendLine("       , ISNULL(K.BAL_STOCK,0) AS BAL_STOCK      ");
            sb.AppendLine("     , isnull(((U.TOTAL_AMT * K.CVR_RATIO)),0)-(ISNULL(K.BAL_STOCK,0)+isnull(O.NOT_INPUT_ORDER_AMT,0))  as RS_AMT     ");
            sb.AppendLine("       , K.INPUT_PRICE                                                                        ");            
            sb.AppendLine("      , isnull(((U.TOTAL_AMT / K.CVR_RATIO)-K.BAL_STOCK) * K.INPUT_PRICE,0) AS TOTAL_MONEY     ");           
            sb.AppendLine("       , K.OUTPUT_PRICE                                                            ");                       
            sb.AppendLine("       , K.INPUT_UNIT                                                              ");                       
            sb.AppendLine("       , K.OUTPUT_UNIT                                                             ");                       
            sb.AppendLine("       , UNI.UNIT_NM as 입고단위                                                   ");                       
            sb.AppendLine("       , UNO.UNIT_NM as 사용단위                                                   ");                       
            sb.AppendLine("       , K.CUST_CD                                                                 ");                       
            sb.AppendLine("       ,P.CUST_NM                                                                  ");                       
            sb.AppendLine("       ,P.CUST_GUBUN                                                               ");                       
            sb.AppendLine("       ,K.CVR_RATIO                                                                ");
            sb.AppendLine("       ,DENSE_RANK() OVER(ORDER BY K.CUST_CD) AS CUST_NUM                          ");                       
            sb.AppendLine("       , (select S_CODE_NM                                                         ");                       
            sb.AppendLine("           from [SM_FACTORY_COM].[dbo].[T_S_CODE]                                  ");                       
            sb.AppendLine("           where L_CODE = '200' and S_CODE = P.CUST_GUBUN) AS CUST_GUBUN_NM        ");                       
            sb.AppendLine("       , (ISNULL(K.BAL_STOCK,0)+isnull(O.NOT_INPUT_ORDER_AMT,0)) as REAL_AMT       ");                       
            sb.AppendLine("       FROM                                                                        ");                       
            sb.AppendLine("       (                                                                           ");                       
            sb.AppendLine("           select RAW_MAT_CD, SUM(TOTAL_AMT)  AS TOTAL_AMT                         ");                       
            sb.AppendLine("           from (                                                                  ");                       
            sb.AppendLine("           select A.PLAN_DATE                                                      ");                       
            sb.AppendLine("                   , A.PLAN_CD                                                     ");                       
            sb.AppendLine("                   , B.SEQ                                                         ");                       
            sb.AppendLine("                   , B.ITEM_CD                                                     ");                       
            sb.AppendLine("                   , C.RAW_MAT_CD                                                  ");                       
            sb.AppendLine("                   , ISNULL(C.TOTAL_AMT*(B.TOTAL_AMT-ISNULL(W.INST_AMT,0)),0) AS TOTAL_AMT    ");                                   
            sb.AppendLine("           from F_PLAN A                                                              ");                    
            sb.AppendLine("           left outer join F_PLAN_DETAIL B                                            ");                    
            sb.AppendLine("           on A.PLAN_DATE = B.PLAN_DATE                                               ");                    
            sb.AppendLine("               and A.PLAN_CD = B.PLAN_CD                                              ");                    
            sb.AppendLine("           left outer join F_PLAN_GROUP F                                             ");
            sb.AppendLine("           on F.PLAN_DATE = B.PLAN_DATE                                               ");
            sb.AppendLine("           and F.PLAN_CD = B.PLAN_CD                                                  ");
            sb.AppendLine("           and F.ITEM_CD = B.ITEM_CD                                                  ");
            sb.AppendLine("           left outer join (SELECT PLAN_NUM, PLAN_ITEM, ISNULL(SUM(INST_AMT),0) AS INST_AMT FROM F_WORK_INST A    ");
            sb.AppendLine("  		WHERE RAW_OUT_YN = 'Y'                                                  ");
            sb.AppendLine("  		group by PLAN_NUM, PLAN_ITEM                                            ");
            sb.AppendLine("  	 )W                                                                         ");
            sb.AppendLine("  			on W.PLAN_NUM = A.PLAN_NUM                                          ");
            sb.AppendLine("  			and W.PLAN_ITEM = B.ITEM_CD                                         ");                    
            sb.AppendLine("           left outer join N_ITEM_COMP C                                         ");                         
            sb.AppendLine("           on B.ITEM_CD = C.ITEM_CD                                              ");                         
            sb.AppendLine("           inner join N_RAW_CODE D                                               ");                         
            sb.AppendLine("           on C.RAW_MAT_CD = D.RAW_MAT_CD                                        ");                         
            sb.AppendLine(condition);
            sb.AppendLine("           ) Z                                                                   ");                         
            sb.AppendLine("           group by RAW_MAT_CD                                                   ");                         
            sb.AppendLine("       ) U                                                                       ");                         
            sb.AppendLine("   left outer join N_RAW_CODE K                                                  ");                         
            sb.AppendLine("   on U.RAW_MAT_CD = K.RAW_MAT_CD                                                ");                         
            sb.AppendLine("   left outer join N_UNIT_CODE UNI                                               ");                         
            sb.AppendLine("   on UNI.UNIT_CD = K.INPUT_UNIT                                                 ");                         
            sb.AppendLine("   left outer join N_UNIT_CODE UNO                                               ");                         
            sb.AppendLine("   on UNO.UNIT_CD = K.OUTPUT_UNIT                                                ");                         
            sb.AppendLine("   left outer join N_CUST_CODE P                                                 ");                         
            sb.AppendLine("   on K.CUST_CD = P.CUST_CD                                                      ");                         
            sb.AppendLine("                                                                                 ");                         
            sb.AppendLine("   left outer join (SELECT                                                       ");                         
            sb.AppendLine("   		ISNULL(SUM(A.TOTAL_AMT),0) - ISNULL(SUM(B.TEMP_AMT),0) AS NOT_INPUT_ORDER_AMT       ");            
            sb.AppendLine("   		,A.RAW_MAT_CD                                                           ");                        
            sb.AppendLine("   		 FROM F_ORDER_DETAIL A                                                 ");                         
            sb.AppendLine("   		 left outer join (SELECT                                                ");                        
            sb.AppendLine("   		    SUM(ISNULL(TEMP_AMT,0)) AS TEMP_AMT, ORDER_DATE, ORDER_CD, ORDER_SEQ      ");
            sb.AppendLine("   		    FROM F_RAW_DETAIL                           ");
            sb.AppendLine("   		    group by ORDER_DATE,ORDER_CD,ORDER_SEQ) B   ");
            sb.AppendLine("   		 on A.ORDER_DATE = B.ORDER_DATE                 ");
            sb.AppendLine("   		 and A.ORDER_CD = B.ORDER_CD                    ");
            sb.AppendLine("   		 and A.SEQ = B.ORDER_SEQ                        ");
            sb.AppendLine("   		 group by RAW_MAT_CD                            ");
            sb.AppendLine("   		 ) O                                            ");
            sb.AppendLine("   	 on O.RAW_MAT_CD = U.RAW_MAT_CD                     ");
            sb.AppendLine("                                                         ");
            sb.AppendLine("                                                         ");
            sb.AppendLine("   order by K.CUST_CD,U.RAW_MAT_CD                       ");                                                


            Debug.WriteLine("리스트");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Order_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,O.INPUT_REQ_DATE ");
            sb.AppendLine("     ,(SELECT CUST_NM FROM N_CUST_CODE WHERE O.CUST_CD = CUST_CD) AS CUST_NM ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("     ,(SELECT SAUP_LOGO FROM SM_FACTORY_COM.dbo.T_SAUP_CODE WHERE SAUP_NO = '6968700592') AS SIGN ");
            sb.AppendLine(" from F_ORDER_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_ORDER O ");
            sb.AppendLine(" on O.ORDER_DATE = A.ORDER_DATE ");
            sb.AppendLine(" and O.ORDER_CD = A.ORDER_CD ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL C ");
            sb.AppendLine(" ON C.ORDER_DATE = A.ORDER_DATE ");
            sb.AppendLine(" and C.ORDER_CD = A.ORDER_CD ");
            sb.AppendLine(" and C.ORDER_SEQ = A.SEQ ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by O.INPUT_REQ_DATE desc , O.ORDER_DATE desc, A.SEQ  ");

            Debug.WriteLine("오더 디테일 리슽");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Input_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , A.COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            //2020-05-08 <이재원 추가> (원자재 입고 페이지에서 input_detail 메소드 동작시 창고코드와 재고위치코드 불러오도록
            sb.AppendLine("     , A.STORAGE_CD ");
            sb.AppendLine("     , A.LOC_CD ");
            sb.AppendLine("     , A.LOC_NM ");
            //</이재원 추가>

            //2020-05-22 이재원 TAX_CD 불러옴
            sb.AppendLine("     , F.TAX_CD ");


            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");
            sb.AppendLine(" and A.SEQ = C.SEQ");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");
            //수정 끝 

            sb.AppendLine(" LEFT OUTER JOIN F_BUY_DETAIL F ");
            sb.AppendLine(" ON A.INPUT_DATE = F.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = F.INPUT_CD ");
            sb.AppendLine(" AND A.SEQ = F.INPUT_SEQ ");

            sb.AppendLine(condition);

            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc, A.SEQ ");


            Debug.WriteLine("인풋 디테일 리슽");
            Debug.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //원자재 수입검사 리스트 

        public DataTable fn_Input_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,C.CUST_NM    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     ,A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = A.CHECK_YN)  AS CHECK_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            //sb.AppendLine("     , A.RAW_HST_CD ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , F.CHK_DATE ");
            sb.AppendLine("     , F.PASS_YN ");
            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            sb.AppendLine(" from F_RAW_INPUT Z ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on Z.INPUT_DATE = A.INPUT_DATE");
            sb.AppendLine("     and Z.INPUT_CD = A.INPUT_CD");
            sb.AppendLine(" inner join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("     and B.CHECK_GUBUN = '1' ");
            sb.AppendLine(" inner join N_CUST_CODE C ");
            sb.AppendLine(" on Z.CUST_CD = C.CUST_CD ");
            sb.AppendLine("     and C.CUST_GUBUN = '2' ");
            sb.AppendLine(" left outer join F_RAW_CHK F ");
            sb.AppendLine(" on Z.INPUT_DATE = F.INPUT_DATE");
            sb.AppendLine("     and Z.INPUT_CD = F.INPUT_CD");
            sb.AppendLine("     and A.SEQ = F.SEQ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by Z.INPUT_DATE desc,Z.INPUT_CD desc,A.SEQ ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //원자재 수입검사 리스트 

        public DataTable fn_Input_Chk_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.CONTROL_NO ");
            sb.AppendLine("     ,A.PART_NO ");
            sb.AppendLine("     ,A.CHK_TOTAL_AMT ");
            sb.AppendLine("     ,A.PASS_AMT ");
            sb.AppendLine("     ,A.PRI_NON_PASS_AMT ");
            sb.AppendLine("     ,A.UPD_COM_AMT ");
            sb.AppendLine("     ,A.FINAL_NON_PASS_AMT ");
            sb.AppendLine("     ,A.FINAL_PASS_AMT ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("from F_RAW_CHK A ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Input_Chk_Poor_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.POOR_SEQ ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.POOR_NM ");
            sb.AppendLine("     ,A.PRI_NON_PASS_AMT ");
            sb.AppendLine("     ,A.UPD_DETAIL ");
            sb.AppendLine("     ,A.UPD_PASS_AMT ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("from F_RAW_CHK_POOR A ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);

        }
        //원자재 원장 리스트 

        public DataTable fn_Input_Rm_Ledger_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select A.INPUT_DATE");
            //sb.AppendLine("     ,A.INPUT_CD ");
            //sb.AppendLine("     ,A.SEQ ");
            //sb.AppendLine("     ,Z.CUST_CD ");
            //sb.AppendLine("     ,C.CUST_NM ");
            //sb.AppendLine("     ,A.RAW_MAT_CD ");
            //sb.AppendLine("     ,B.RAW_MAT_NM  ");
            //sb.AppendLine("     ,B.SPEC    ");
            //sb.AppendLine("     ,A.HEAT_NO ");
            //sb.AppendLine("     ,A.HEAT_TIME ");
            //sb.AppendLine("     ,A.ORDER_DATE ");
            //sb.AppendLine("     ,A.ORDER_CD ");
            //sb.AppendLine("     ,A.ORDER_SEQ ");
            //sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            //sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            //sb.AppendLine("     ,A.UNIT_CD ");
            //sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            //sb.AppendLine("     , A.TOTAL_AMT ");
            //sb.AppendLine("     , A.PRICE ");
            //sb.AppendLine("     , A.TOTAL_MONEY ");

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no,  A.INPUT_DATE AS 입고일자 ");
            sb.AppendLine("     ,A.INPUT_CD AS 입고번호 ");
            sb.AppendLine("     ,A.SEQ AS 입고순번 ");
            sb.AppendLine("     ,Z.CUST_CD AS 거래처코드 ");
            sb.AppendLine("     ,C.CUST_NM AS 거래처명 ");
            sb.AppendLine("     ,A.RAW_MAT_CD AS 원자재코드 ");
            sb.AppendLine("     ,B.RAW_MAT_NM AS 원자재명   ");
            sb.AppendLine("     ,B.SPEC AS  규격    ");
            sb.AppendLine("     ,A.HEAT_NO AS HEATNO ");
            sb.AppendLine("     ,A.HEAT_TIME AS HEATTIME ");
            sb.AppendLine("     ,A.ORDER_DATE AS 주문일자 ");
            sb.AppendLine("     ,A.ORDER_CD AS 주문번호 ");
            sb.AppendLine("     ,A.ORDER_SEQ AS 주문순번 ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN AS 구분코드 ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS 구분명 ");
            sb.AppendLine("     ,A.UNIT_CD AS 단위코드 ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS 단위명");
            sb.AppendLine("     , ISNULL(A.TEMP_AMT,0) AS 가입고수량 ");
            sb.AppendLine("     , ISNULL(A.TOTAL_AMT,0) AS 수량 ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS 단가 ");
            sb.AppendLine("     , ISNULL(A.TOTAL_MONEY,0) AS 금액 ");
            sb.AppendLine(" from F_RAW_INPUT Z  ");
            sb.AppendLine(" left outer join F_RAW_DETAIL A  ");
            sb.AppendLine(" on Z.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("     and Z.INPUT_CD = A.INPUT_CD   ");

            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE C");
            sb.AppendLine(" on Z.CUST_CD = C.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by a.INPUT_DATE DESC,a.INPUT_CD");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_work_List(string condition)
        //작업일보관리
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.F_SUB_DATE,convert(nvarchar,A.F_STEP)+'단계 '+w.FLOW_NM as F_STEP,A.LOT_NO,A.ITEM_CD,c.SPEC,c.ITEM_NM,c.LINE_CD,isnull(z.LINE_NM,'X') as LINE_NM,A.CUST_CD,d.CUST_NM,A.F_SUB_AMT,(A.F_SUB_AMT - A.LOSS - A.POOR_AMT) AS COMPLETE_AMT ");
            sb.AppendLine("	,isnull('0',x.inst_AMT)as INST_AMT,isnull(0,x.INST_AMT-(A.F_SUB_AMT - A.LOSS - A.POOR_AMT)) as 남은것");

            sb.AppendLine("from F_WORK_FLOW_DETAIL A");
            sb.AppendLine("inner join F_WORK_FLOW B on B.LOT_NO=A.LOT_NO");
            sb.AppendLine("inner join N_ITEM_CODE c on c.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("inner join N_CUST_CODE D on D.CUST_CD=A.CUST_CD");
            sb.AppendLine("LEFT OUTER JOIN N_FLOW_CODE w ON A.FLOW_CD = w.FLOW_CD  ");
            sb.AppendLine("LEFT OUTER join N_LINE_CODE z on z.LINE_CD=c.LINE_CD ");
            sb.AppendLine(" left outer join f_work_inst x on x.lot_no=a.LOT_NO");

            sb.AppendLine(condition);
            //sb.AppendLine("and w.FLOW_CD='0005' ");

            //sb.AppendLine("SELECT A.LOT_NO, ");
            //sb.AppendLine("A.W_INST_DATE, ");
            //sb.AppendLine("(SELECT ITEM_NM FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD) AS ITEM_NM ,  ");
            //sb.AppendLine("A.SPEC ,  ");
            //sb.AppendLine("(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM,  ");
            //sb.AppendLine("A.INST_AMT, ");
            //sb.AppendLine("A.RAW_OUT_YN,  ");
            //sb.AppendLine("B.F_STEP,  ");
            //sb.AppendLine("A.COMPLETE_YN ");
            //sb.AppendLine("FROM F_WORK_INST A ");
            //sb.AppendLine("LEFT OUTER JOIN F_WORK_FLOW_DETAIL B ");
            //sb.AppendLine("ON A.LOT_NO = B.LOT_NO ");
            //sb.AppendLine(condition);
            //sb.AppendLine(" order by A.LOT_NO ");
            Debug.WriteLine("작업일보관리");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Input_Order_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,B.SEQ ");
            sb.AppendLine("     ,A.INPUT_REQ_DATE ");
            sb.AppendLine("     ,A.COMPLETE_YN  ");
            sb.AppendLine("     ,B.RAW_MAT_CD    ");
            sb.AppendLine("     ,D.RAW_MAT_NM ");
            sb.AppendLine("     ,D.SPEC ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,D.RAW_MAT_GUBUN ");
            sb.AppendLine("     ,X.CUST_CD ");
            sb.AppendLine("     ,X.CUST_NM ");
            sb.AppendLine("          ,D.CHECK_GUBUN ");
            sb.AppendLine("           ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '601' and S_CODE = D.CHECK_GUBUN) AS 검사여부 ");

            //sb.AppendLine("     ,FLOOR(ISNULL(TOTAL_AMT,0)) AS ORDER_AMT  ");
            //sb.AppendLine("     ,FLOOR(B.PRICE) AS PRICE  ");
            //sb.AppendLine("     ,FLOOR(B.TOTAL_MONEY) TOTAL_MONEY  ");
            sb.AppendLine("     ,ISNULL(TOTAL_AMT,0) AS ORDER_AMT  ");
            sb.AppendLine("     ,ISNULL(B.PRICE,0) AS PRICE   ");
            sb.AppendLine("     ,B.TOTAL_MONEY ");
            sb.AppendLine("     ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = D.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     , C.INPUT_AMT ");
            sb.AppendLine("     , C.NO_INPUT_AMT");
            sb.AppendLine("     , D.RAW_STORAGE");
            // 이재원 과세구분과 부가세 구분 추가
            sb.AppendLine("     , D.TAX_CD AS TAX_CD ");
            sb.AppendLine("     , X.TAX_CD AS VAT_CD ");
            sb.AppendLine(" FROM F_ORDER A ");
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE X ON A.CUST_CD = X.CUST_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B ");
            sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
            sb.AppendLine(" AND A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine(" LEFT OUTER JOIN(	 ");
            sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
            sb.AppendLine("                           ,AA.ORDER_CD       ");
            sb.AppendLine("                           ,AA.SEQ ");
            sb.AppendLine("                           ,ISNULL(SUM(BB.TEMP_AMT),0) AS INPUT_AMT ");
            sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TEMP_AMT),0) AS NO_INPUT_AMT ");
            sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
            sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
            sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
            sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
            sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
            sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
            sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
            sb.AppendLine(" AND A.ORDER_CD = C.ORDER_CD ");
            sb.AppendLine(" AND B.SEQ = C.SEQ  ");

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE D	 ");
            sb.AppendLine(" ON B.RAW_MAT_CD = D.RAW_MAT_CD  ");

            sb.AppendLine("  LEFT JOIN N_PRICE_INFO E	 ");
            sb.AppendLine("  ON E.PROD_CD = B.RAW_MAT_CD  ");
            sb.AppendLine("  AND E.CUST_CD = A.CUST_CD  ");
            //  sb.AppendLine("WHERE NO_INPUT_AMT > 0 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by X.CUST_CD,A.ORDER_DATE desc, A.ORDER_CD desc, B.SEQ desc ");

            Debug.WriteLine("미입고발주서");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Raw_Stock_List(string srch_date, string condition)
        {
            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select A.RAW_MAT_CD ");
            //sb.AppendLine("      , A.RAW_MAT_NM ");
            //sb.AppendLine("      , A.SPEC ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS INPUT_AMT ");
            //sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS OUTPUT_AMT ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS STOCK_AMT ");
            //sb.AppendLine("      , A.BAL_STOCK ");

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no, A.RAW_MAT_CD AS 원자재코드 ");
            sb.AppendLine("      , A.RAW_MAT_NM AS 원자재명 ");
            sb.AppendLine("      , A.SPEC AS  규격 ");
            sb.AppendLine("      , A.CUST_CD ");
            sb.AppendLine("       , D.CUST_NM ");
            //2020-05-19 이재원 원장2를 위해 RAW_MAT_GUBUN, CHECK_GUBUN 열 추가
            sb.AppendLine("       , A.RAW_MAT_GUBUN ");
            sb.AppendLine("       , A.CHECK_GUBUN ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS 입고량 ");
            sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS 출고량 ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS 재고량 ");
            sb.AppendLine("      , ISNULL(A.BAL_STOCK,0) AS BAL_STOCK ");
            sb.AppendLine("      , ISNULL(A.BASIC_STOCK,0) AS BASIC_STOCK ");

            sb.AppendLine("from N_RAW_CODE A ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select RAW_MAT_CD");
            sb.AppendLine("                      , SUM(ISNULL(TOTAL_AMT,0)) as INPUT_AMT ");
            sb.AppendLine("                 from F_RAW_DETAIL ");
            sb.AppendLine("                 where INPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by RAW_MAT_CD) B ");
            sb.AppendLine("ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select RAW_MAT_CD");
            sb.AppendLine("                      , SUM(ISNULL(TOTAL_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine("                 from F_RAW_OUTPUT ");
            sb.AppendLine("                 where OUTPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by RAW_MAT_CD) C ");
            sb.AppendLine("ON A.RAW_MAT_CD = C.RAW_MAT_CD  ");
            sb.AppendLine("left join N_CUST_CODE as D on D.CUST_CD=A.CUST_CD ");
            sb.AppendLine(condition);
            Debug.WriteLine("fn_Raw_Stock_List");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Want_Stock(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.RAW_MAT_CD ");
            sb.AppendLine("      ,A.RAW_MAT_NM ");
            sb.AppendLine("      ,A.SPEC ");
            sb.AppendLine("      ,A.RAW_MAT_GUBUN ");
            sb.AppendLine("      , (select S_CODE_NM  ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE]   ");
            sb.AppendLine("         where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM    ");
            sb.AppendLine("      , A.TYPE_CD  ");
            sb.AppendLine("      , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM    ");
            sb.AppendLine("      , A.INPUT_UNIT    ");
            sb.AppendLine("      , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM    ");
            sb.AppendLine("      , A.OUTPUT_UNIT  ");
            sb.AppendLine("      , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM    ");
            sb.AppendLine("      , A.CUST_CD  ");
            sb.AppendLine("      , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM   ");
            sb.AppendLine("      , A.BASIC_STOCK  ");
            sb.AppendLine("      , A.CHECK_GUBUN   ");
            sb.AppendLine("      , A.BAL_STOCK   ");
            sb.AppendLine("      , (ISNULL(A.BAL_STOCK,0) - ISNULL(B.INST_RAW_AMT,0)) as REAL_AMT    ");

            sb.AppendLine("from N_RAW_CODE A ");
            sb.AppendLine("left outer join ( ");
            sb.AppendLine("     select ZZ.RAW_MAT_CD,SUM(TOTAL_AMT)AS INST_RAW_AMT");
            sb.AppendLine("     from F_WORK_INST KK  ");
            sb.AppendLine("     inner join F_WORK_INST_DETAIL ZZ  ");
            sb.AppendLine("     on KK.W_INST_DATE = ZZ.W_INST_DATE  ");
            sb.AppendLine("     and KK.W_INST_CD = ZZ.W_INST_CD   ");
            sb.AppendLine("     where COMPLETE_YN = 'N'   ");
            sb.AppendLine("     group by ZZ.RAW_MAT_CD   ");
            sb.AppendLine("    )B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("WHERE 1=1 ");
            sb.AppendLine(condition);
            Debug.WriteLine("fn_Raw_Want_Stock");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_St_Detail_List(string srch_date, string raw_mat_cd)
        {
            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select  ");
            //sb.AppendLine("      A.INPUT_DATE ");
            //sb.AppendLine("      , A.INPUT_CD ");
            //sb.AppendLine("      , Z.SEQ ");
            //sb.AppendLine("      , Z.RAW_MAT_CD ");
            //sb.AppendLine("      , SUM(ISNULL(Z.TOTAL_AMT,0)) as INPUT_AMT ");
            //sb.AppendLine("      , SUM(ISNULL(K.TOTAL_AMT,0)) as OUTPUT_AMT ");
            //sb.AppendLine("      , SUM(ISNULL(Z.TOTAL_AMT,0)) - SUM(ISNULL(K.TOTAL_AMT,0)) as STOCK_AMT ");
            //sb.AppendLine("      from F_RAW_INPUT A ");
            //sb.AppendLine("left outer join F_RAW_DETAIL Z  ");
            //sb.AppendLine("on A.INPUT_DATE = Z.INPUT_DATE");
            //sb.AppendLine("    and A.INPUT_CD = Z.INPUT_CD");
            //sb.AppendLine("left outer join (  ");
            //sb.AppendLine("                 select INPUT_DATE,INPUT_CD,INPUT_SEQ,SUM(TOTAL_AMT)AS TOTAL_AMT from F_RAW_OUTPUT   ");
            //sb.AppendLine("                 where 1=1   ");
            //sb.AppendLine("                     and RAW_MAT_CD = '" + raw_mat_cd + "'   ");
            //sb.AppendLine("                     and INPUT_DATE <= '" + srch_date + "'   ");
            //sb.AppendLine("                 group by INPUT_DATE,INPUT_CD,INPUT_SEQ   ");
            //sb.AppendLine("                )K ");

            //sb.AppendLine("on A.INPUT_DATE = K.INPUT_DATE");
            //sb.AppendLine("    and A.INPUT_CD = K.INPUT_CD");
            //sb.AppendLine("    and Z.SEQ = K.INPUT_SEQ");
            //sb.AppendLine("where 1=1  ");
            //sb.AppendLine("     and Z.RAW_MAT_CD = '" + raw_mat_cd + "' ");
            //sb.AppendLine("     and A.INPUT_DATE <= '" + srch_date + "' ");
            //sb.AppendLine("group by A.INPUT_DATE,A.INPUT_CD,Z.SEQ,Z.RAW_MAT_CD ");
            //sb.AppendLine("order by A.INPUT_DATE,A.INPUT_CD,Z.SEQ ");

            // 2020-05-08 이재원 수정 STORAGE 추가하면서 쿼리 문제가 생긴것으로 보임 문제 수정하고  LOC_NM 같이 출력하도록 변경 

            sb.AppendLine("     select   ISNULL(A.INPUT_DATE,OUTPUT_DATE) as INPUT_DATE");
            sb.AppendLine("        , isnull(convert(nvarchar,A.INPUT_CD),'미입고') as INPUT_CD");
            sb.AppendLine("         , isnull(convert(nvarchar,Z.SEQ),'미입고') as SEQ ");
            sb.AppendLine("     , isnull(Z.RAW_MAT_CD,k.RAW_MAT_CD) as RAW_MAT_CD ");
            sb.AppendLine("       , SUM(ISNULL(Z.TOTAL_AMT,0)) as INPUT_AMT  ");
            sb.AppendLine("        , SUM(ISNULL(K.TOTAL_AMT,0)) as OUTPUT_AMT  ");
            sb.AppendLine("      , SUM(ISNULL(Z.TOTAL_AMT,0)) - SUM(ISNULL(K.TOTAL_AMT,0)) as STOCK_AMT ");
            sb.AppendLine("      , ISNULL(Z.STORAGE_CD,'') AS STORAGE_CD ");
            sb.AppendLine("      , ISNULL((SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = Z.STORAGE_CD),'') AS STORAGE_NM ");
            sb.AppendLine("      , ISNULL(Z.LOC_CD,'') AS LOC_CD ");
            sb.AppendLine("      , ISNULL(Z.LOC_NM,'') AS LOC_NM ");
            sb.AppendLine("      , (SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM");

            sb.AppendLine("      from F_RAW_INPUT A ");
            sb.AppendLine("left outer join F_RAW_DETAIL Z   ");
            sb.AppendLine("on A.INPUT_DATE = Z.INPUT_DATE");
            sb.AppendLine("    and A.INPUT_CD = Z.INPUT_CD");
            sb.AppendLine("left outer join N_STORAGE_CODE RS   ");
            sb.AppendLine("on RS.STORAGE_CD = Z.STORAGE_CD");
            sb.AppendLine("full outer join (  ");
            sb.AppendLine("                    select MAX(OUTPUT_DATE) as OUTPUT_DATE ,INPUT_DATE,INPUT_CD,INPUT_SEQ,SUM(TOTAL_AMT)AS TOTAL_AMT,RAW_MAT_CD from F_RAW_OUTPUT       ");
            sb.AppendLine("                 where 1=1   ");
            sb.AppendLine("                     and RAW_MAT_CD = '" + raw_mat_cd + "'   ");
            //sb.AppendLine("                     and INPUT_DATE <= '" + srch_date + "'   ");
            sb.AppendLine("                 group by INPUT_DATE,INPUT_CD,INPUT_SEQ  , RAW_MAT_CD ");
            sb.AppendLine("                )K ");

            sb.AppendLine("on A.INPUT_DATE = K.INPUT_DATE");
            sb.AppendLine("     and A.INPUT_CD = K.INPUT_CD");
            sb.AppendLine("    and Z.SEQ = K.INPUT_SEQ");
            sb.AppendLine("where 1=1  ");
            sb.AppendLine("    and isnull(Z.RAW_MAT_CD,k.RAW_MAT_CD) = '" + raw_mat_cd + "' ");
           // sb.AppendLine(" and ISNULL(A.INPUT_DATE,OUTPUT_DATE)  <=  '" + srch_date + "' ");
            sb.AppendLine("  group by ISNULL(A.INPUT_DATE,OUTPUT_DATE)  ,A.INPUT_CD,Z.SEQ,isnull(Z.RAW_MAT_CD,k.RAW_MAT_CD) , Z.STORAGE_CD, Z.LOC_CD, Z.LOC_NM ,A.CUST_CD ");
            sb.AppendLine("union all");
            sb.AppendLine("select   ISNULL(A.INPUT_DATE,OUTPUT_DATE) as INPUT_DATE");
            sb.AppendLine("   , '합계'");
            sb.AppendLine("   , '합계'");
            sb.AppendLine("   , '합계'");
            sb.AppendLine("  , SUM(ISNULL(Z.TOTAL_AMT,0)) as INPUT_AMT");
            sb.AppendLine("     , SUM(ISNULL(K.TOTAL_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine(" , SUM(ISNULL(Z.TOTAL_AMT,0)) - SUM(ISNULL(K.TOTAL_AMT,0)) as STOCK_AMT ");
            sb.AppendLine("   , '' AS STORAGE_CD ");
            sb.AppendLine("   , '' AS STORAGE_NM ");
            sb.AppendLine("   , '' AS LOC_CD ");
            sb.AppendLine("   , '' AS LOC_NM");
            sb.AppendLine("   , '' AS CUST_NM ");
            sb.AppendLine("from F_RAW_INPUT A ");
            sb.AppendLine("left outer join F_RAW_DETAIL Z  ");
            sb.AppendLine("on A.INPUT_DATE = Z.INPUT_DATE");
            sb.AppendLine("    and A.INPUT_CD = Z.INPUT_CD");
            sb.AppendLine("full outer join (  ");
            sb.AppendLine("                   select MAX(OUTPUT_DATE) as OUTPUT_DATE ,INPUT_DATE,INPUT_CD,INPUT_SEQ,SUM(TOTAL_AMT)AS TOTAL_AMT,RAW_MAT_CD from F_RAW_OUTPUT     ");
            sb.AppendLine("                 where 1=1   ");
            sb.AppendLine("                     and RAW_MAT_CD = '" + raw_mat_cd + "'   ");
           // sb.AppendLine("                     and INPUT_DATE <= '" + srch_date + "'   ");
            sb.AppendLine("                 group by INPUT_DATE,INPUT_CD,INPUT_SEQ  , RAW_MAT_CD ");
            sb.AppendLine("                )K ");
            sb.AppendLine("on A.INPUT_DATE = K.INPUT_DATE");
            sb.AppendLine("    and A.INPUT_CD = K.INPUT_CD");
            sb.AppendLine("    and Z.SEQ = K.INPUT_SEQ");
            sb.AppendLine("where 1=1  ");
            sb.AppendLine("    and isnull(Z.RAW_MAT_CD,k.RAW_MAT_CD) = '" + raw_mat_cd + "' ");
          //  sb.AppendLine("   and ISNULL(A.INPUT_DATE,OUTPUT_DATE)  <=  '" + srch_date + "' ");
            sb.AppendLine("  group by ISNULL(A.INPUT_DATE,OUTPUT_DATE)  ");
            sb.AppendLine("order by ISNULL(A.INPUT_DATE,OUTPUT_DATE) ,isnull(convert(nvarchar,A.INPUT_CD),'미입고') ");


            Debug.WriteLine("선택한 원자재 디테일내역");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        //솔빈수정 inner join 추가 
        public DataTable fn_Work_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM ");
            sb.AppendLine("     ,B.ITEM_GUBUN ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,A.INST_AMT");
            sb.AppendLine("     ,A.CHARGE_AMT ");
            sb.AppendLine("     ,A.PACK_AMT ");
            sb.AppendLine("     ,A.PLAN_NUM");
            sb.AppendLine("     ,A.PLAN_ITEM");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,A.INST_NOTICE ");
            //  sb.AppendLine("     ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD) AS CUST_NM ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("    ,isnull('0',B.BAL_STOCK) as  BAL_STOCK");
            sb.AppendLine("        ,D.CUST_NM ");
            sb.AppendLine("        ,A.DELIVERY_DATE ");
            sb.AppendLine("        ,C.COMPLETE_YN  as COMPLETE ");
            sb.AppendLine("     ,CASE WHEN ISNULL(C.COMPLETE_YN,'N')='Y' THEN '완료' ELSE ( CASE WHEN ISNULL(C.COMPLETE_YN,'N')='S' THEN '진행중' ELSE '미완료' END ) END COMPLETE_YN   ");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_WORK_FLOW C ");
            sb.AppendLine(" ON A.LOT_NO = C.LOT_NO ");
            sb.AppendLine(" left join N_CUST_CODE as D on D.CUST_CD=A.CUST_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.W_INST_DATE desc, A.W_INST_CD desc ");

            Debug.WriteLine("작업지시서등록 fn_Work_List");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable returnNewLot(string work_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select @NEWLOT = ISNULL(MAX(W_INST_CD),0)+1 FROM F_WORK_INST  ");
            sb.AppendLine("  where W_INST_DATE = '" + work_date + "'");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     ,A.INST_AMT");
            sb.AppendLine("     ,A.WORKER_CD");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.WORKER_CD) as WORKER_NM ");
            sb.AppendLine("     ,A.COMPLETE_YN");
            sb.AppendLine("     ,A.LINE_CD");
            sb.AppendLine("     ,(select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) as LINE_NM  ");
            sb.AppendLine("     ,A.DELIVERY_DATE");
            sb.AppendLine("     ,A.PLAN_NUM");
            sb.AppendLine("     ,A.PLAN_ITEM");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,A.INST_NOTICE ");
            sb.AppendLine("     ,B.CHARGE_AMT ");
            sb.AppendLine("     ,B.PACK_AMT ");
            sb.AppendLine("     ,A.RAW_OUT_YN ");
            sb.AppendLine("     ,A.POOR_WORK_YN ");
            sb.AppendLine("     ,C.COMPLETE_YN AS FLOW_YN ");
            sb.AppendLine("     ,(SELECT DELIVER_REQ_DATE FROM F_PLAN F WHERE A.PLAN_NUM = F.PLAN_NUM) AS REQ_DATE ");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_WORK_FLOW C");
            sb.AppendLine(" on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.W_INST_DATE desc, A.W_INST_CD desc ");


            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Plan_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.PLAN_NUM ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,B.ITEM_CD ");
            sb.AppendLine("     ,C.ITEM_NM  ");
            sb.AppendLine("     ,C.ITEM_GUBUN  ");
            sb.AppendLine("     ,C.SPEC    ");
            sb.AppendLine("     ,C.CHARGE_AMT    ");
            sb.AppendLine("     ,C.PACK_AMT    ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , B.TOTAL_AMT ");
            sb.AppendLine("     , B.TOTAL_AMT - ISNULL(INST_AMT,0) AS RES_QUAN_AMT ");
            sb.AppendLine("     , A.DELIVER_REQ_DATE ");
            sb.AppendLine("     , C.MOLD_CD ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" left outer join F_PLAN_GROUP B ");
            sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE C ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");

            sb.AppendLine(" left outer join (   ");
            sb.AppendLine("                     select Z.PLAN_NUM ");
            sb.AppendLine("                     ,Z.ITEM_CD ");
            sb.AppendLine("                     ,SUM(ISNULL(Z.INST_AMT,0))AS INST_AMT ");
            sb.AppendLine("                     from F_WORK_INST Z ");
            sb.AppendLine("                     where PLAN_NUM != '' ");
            sb.AppendLine("                     group by PLAN_NUM,ITEM_CD) D ");
            sb.AppendLine(" on A.PLAN_NUM = D.PLAN_NUM ");
            sb.AppendLine(" and B.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.PLAN_DATE desc,A.PLAN_CD desc,B.ITEM_CD ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서에서 제품선택 및 생산계획 클릭 시 나타나는 원자재 
        public DataTable fn_Work_Rm_Default_List(double inst_amt, string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,C.RAW_MAT_CD ");
            sb.AppendLine("     ,C.RAW_MAT_NM ");
            sb.AppendLine("     ,C.SPEC  ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,D.CUST_NM ");
            sb.AppendLine("     ,C.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,C.OUTPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,ISNULL(B.TOTAL_AMT,0) AS SOYO_AMT ");
            sb.AppendLine("     ,ISNULL(" + inst_amt + "*B.TOTAL_AMT,0) AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,ISNULL(C.BAL_STOCK,0) AS BAL_STOCK  ");
            sb.AppendLine("     ,ISNULL(C.CVR_RATIO,0) AS CVR_RATIO  ");
            sb.AppendLine("     ,Z.S_CODE_NM  "); //원자재 부자재 명 
            sb.AppendLine("     ,Z.S_CODE "); //원자재, 부자재  코드 
            sb.AppendLine(" FROM N_ITEM_CODE A ");
            sb.AppendLine(" inner join N_ITEM_COMP B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" left outer join N_RAW_CODE C   ");
            sb.AppendLine(" on B.RAW_MAT_CD = C.RAW_MAT_CD	 ");
            sb.AppendLine(" left outer join N_CUST_CODE D	 ");
            sb.AppendLine(" on C.CUST_CD = D.CUST_CD	 ");
            sb.AppendLine("inner join T_S_CODE AS Z on c.RAW_MAT_GUBUN=z.S_CODE and z.L_CODE='300' 	 ");  //300번 :원자재 부자재 구분 

            sb.AppendLine(condition);

            sb.AppendLine(" order by S_CODE	 ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서에서 제품선택 및 생산계획 클릭 시 나타나는 반제품
        public DataTable fn_Work_Half_Default_List(double inst_amt, string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,B.HALF_ITEM_CD  ");
            sb.AppendLine("     ,C.ITEM_NM AS HALF_ITEM_NM  ");
            sb.AppendLine("     ,C.SPEC  ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,D.CUST_NM ");
            sb.AppendLine("     ,C.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM    ");
            sb.AppendLine("     ,B.TOTAL_AMT AS SOYO_AMT ");
            sb.AppendLine("     ," + inst_amt + "*B.TOTAL_AMT AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,C.BAL_STOCK  ");
            sb.AppendLine(" FROM N_ITEM_CODE A ");
            sb.AppendLine(" left outer join N_ITEM_COMP_HALF B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" inner join N_ITEM_CODE C   ");
            sb.AppendLine(" on B.HALF_ITEM_CD = C.ITEM_CD	 ");
            sb.AppendLine(" left outer join N_CUST_CODE D	 ");
            sb.AppendLine(" on C.CUST_CD = D.CUST_CD	 ");
            sb.AppendLine(condition);

            Debug.WriteLine("   //작업지시서에서 제품선택 및 생산계획 클릭 시 나타나는 반제품");

            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Pln_Rm_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select B.ITEM_CD");
            sb.AppendLine("     ,C.RAW_MAT_CD ");
            sb.AppendLine("     ,D.RAW_MAT_NM ");
            sb.AppendLine("     ,D.SPEC ");
            sb.AppendLine("     ,D.CUST_CD  ");
            sb.AppendLine("     ,E.CUST_NM   ");
            sb.AppendLine("     ,D.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = D.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,D.OUTPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = D.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,C.TOTAL_AMT AS SOYO_AMT ");
            sb.AppendLine("     ,B.TOTAL_AMT * C.TOTAL_AMT AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,D.BAL_STOCK ");
            sb.AppendLine("     ,D.CVR_RATIO ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" inner join F_PLAN_DETAIL B");
            sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD   ");
            sb.AppendLine(" left outer join N_ITEM_COMP C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" inner join N_RAW_CODE D   ");
            sb.AppendLine(" on C.RAW_MAT_CD = D.RAW_MAT_CD 	 ");
            sb.AppendLine(" left join N_CUST_CODE E	 ");
            sb.AppendLine(" on D.CUST_CD = E.CUST_CD	 ");
            sb.AppendLine(condition);



            Debug.WriteLine("    //fn_Work_Pln_Rm_Detail_List");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서 원자재 산출
        public DataTable fn_Work_Rm_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.RAW_MAT_CD  ");
            sb.AppendLine("     ,B.RAW_MAT_NM   ");
            sb.AppendLine("     ,B.SPEC   ");
            sb.AppendLine("     ,B.CUST_CD ");
            sb.AppendLine("     ,C.CUST_NM ");
            sb.AppendLine("     ,B.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,A.SOYO_AMT  ");
            sb.AppendLine("     ,A.TOTAL_AMT as TOTAL_SOYO_AMT");
            sb.AppendLine("     ,ISNULL(B.BAL_STOCK,0) AS BAL_STOCK  ");
            sb.AppendLine("     ,B.CVR_RATIO  ");
            sb.AppendLine("     ,F.LOT_NO  ");
            sb.AppendLine(" from F_WORK_INST_DETAIL A ");
            sb.AppendLine(" left outer join N_RAW_CODE B");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on B.CUST_CD = C.CUST_CD	 ");
            sb.AppendLine(" inner join F_WORK_INST F ");
            sb.AppendLine(" on A.W_INST_DATE = F.W_INST_DATE ");
            sb.AppendLine("     and A.W_INST_CD = F.W_INST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");
            Debug.WriteLine("    //작업지시서 원자재 산출");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_work_raw_output_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select C.OUTPUT_DATE");
            sb.AppendLine("     , C.OUTPUT_CD ");
            sb.AppendLine("     , C.SEQ ");
            sb.AppendLine("     , C.TOTAL_AMT as OUTPUT_AMT ");
            sb.AppendLine("     , B.INPUT_DATE  ");
            sb.AppendLine("     , B.INPUT_CD   ");
            sb.AppendLine("     , B.SEQ   ");
            sb.AppendLine("     , B.TOTAL_AMT as INPUT_AMT ");
            sb.AppendLine("     , '' AS RAW_INPUT_NUM ");
            sb.AppendLine("     , B.ORDER_DATE ");
            sb.AppendLine("     , B.RAW_MAT_CD ");
            sb.AppendLine("     , E.RAW_MAT_NM ");
            sb.AppendLine(" from F_RAW_INPUT A ");
            sb.AppendLine(" inner join F_RAW_DETAIL B");
            sb.AppendLine("on A.INPUT_DATE = B.INPUT_DATE");
            sb.AppendLine(" and A.input_CD = B.INPUT_CD  ");
            sb.AppendLine(" inner join F_RAW_OUTPUT C	 ");
            sb.AppendLine("on C.INPUT_DATE = B.INPUT_DATE");
            sb.AppendLine(" and C.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine(" and C.INPUT_SEQ = B.SEQ");
            sb.AppendLine(" RIGHT OUTER JOIN (select INPUT_DATE, INPUT_CD, RAW_MAT_CD  from F_RAW_OUTPUT");
            sb.AppendLine(" where LOT_NO  = '" + condition + "') D");
            sb.AppendLine(" on A.INPUT_DATE = D.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = D.INPUT_CD");
            sb.AppendLine("and B.RAW_MAT_CD = D.RAW_MAT_CD");
            sb.AppendLine("inner join N_RAW_CODE E");
            sb.AppendLine("on B.RAW_MAT_CD = E.RAW_MAT_CD");

            Debug.WriteLine("    //작업지시서 원자재 산출");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        //작업지시서 반제품 산출
        public DataTable fn_Work_Half_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.HALF_ITEM_CD  ");
            sb.AppendLine("     ,B.ITEM_NM   ");
            sb.AppendLine("     ,B.SPEC   ");
            sb.AppendLine("     ,B.CUST_CD ");
            sb.AppendLine("     ,C.CUST_NM ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) as UNIT_NM   ");
            sb.AppendLine("     ,A.SOYO_AMT  ");
            sb.AppendLine("     ,A.TOTAL_AMT as TOTAL_SOYO_AMT");
            sb.AppendLine("     ,ISNULL(B.BAL_STOCK,0) AS BAL_STOCK   ");
            sb.AppendLine(" from F_WORK_INST_HALF_DETAIL A  ");
            sb.AppendLine(" left outer join N_ITEM_CODE B");
            sb.AppendLine(" on A.HALF_ITEM_CD = B.ITEM_CD");
            sb.AppendLine("     and B.ITEM_GUBUN = '2'");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on B.CUST_CD = C.CUST_CD	 ");
            sb.AppendLine(condition);


            Debug.WriteLine("    //작업지시서 반제품 산출");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_Cnt(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt");
            sb.AppendLine("from F_WORK_FLOW ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            Debug.WriteLine("fn_Work_Flow_Cnt");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시 LOT_NO 여부 체크
        public DataTable fn_Work_Inst_Cnt(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt");
            sb.AppendLine("from F_WORK_INST ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,A.FLOW_DATE ");
            sb.AppendLine("        ,B.W_INST_DATE ");
            sb.AppendLine("        ,B.W_INST_CD ");
            sb.AppendLine("        ,B.ITEM_CD ");
            sb.AppendLine("        ,C.ITEM_NM ");
            sb.AppendLine("        ,C.SPEC ");
            sb.AppendLine("        ,C.CHARGE_AMT ");
            sb.AppendLine("        ,B.INST_AMT ");
            sb.AppendLine("        ,C.PACK_AMT ");
            sb.AppendLine("        ,A.COMPLETE_YN ");
            sb.AppendLine("        ,B.RAW_OUT_YN ");
            sb.AppendLine("        ,B.POOR_WORK_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_INST B ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE C ");
            sb.AppendLine("on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_By_process_ssum(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("         ,A.SEQ ");
            sb.AppendLine("        ,A.F_STEP");
            sb.AppendLine("        ,FL.FLOW_NM ");
            sb.AppendLine("        ,sum(A.F_SUB_AMT)as F_SUB_AMT");
            sb.AppendLine("        ,F_SUB_DATE,sum(A.POOR_AMT) as poor_amt ");
            sb.AppendLine("        ,max(IT.ITEM_NM) as ITEM_NM");
            sb.AppendLine("        ,sum(LOSS) as loss ");
            sb.AppendLine("        ,max(CS.CUST_NM) as CUST_NM");

            sb.AppendLine("from F_WORK_FLOW_DETAIL as A");
            sb.AppendLine("inner join N_FLOW_CODE as FL on FL.FLOW_CD=A.FLOW_CD ");
            sb.AppendLine("inner join N_ITEM_CODE as IT on IT.ITEM_CD=A.ITEM_CD ");
            sb.AppendLine("inner join N_CUST_CODE as CS on CS.CUST_CD=A.CUST_CD ");
            sb.AppendLine("group by A.LOT_NO,SEQ,A.F_STEP,FL.FLOW_NM,F_SUB_DATE ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by F_STEP");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_Detail(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,A.LOT_SUB ");
            sb.AppendLine("        ,A.F_STEP ");
            sb.AppendLine("        ,A.FLOW_CD ");
            sb.AppendLine("        ,A.SEQ ");
            sb.AppendLine("        ,A.F_SUB_DATE ");
            sb.AppendLine("        ,A.LOSS ");
            sb.AppendLine("        ,A.F_SUB_AMT ");
            sb.AppendLine("        ,A.POOR_CD ");
            sb.AppendLine("        ,A.POOR_AMT ");
            sb.AppendLine("        ,A.COMPLETE_YN ");
            sb.AppendLine("        ,A.CHECK_YN ");
            sb.AppendLine("        ,A.INPUT_YN ");
            sb.AppendLine("         ,A.INPUT_AMT");
            sb.AppendLine("         ,C.FLOW_CHK_YN");
            sb.AppendLine("        ,C.FLOW_NM ");
            sb.AppendLine("         ,E.INST_AMT ");
            sb.AppendLine("           ,E.INST_AMT-A.INPUT_AMT as 미투입량 ");
            sb.AppendLine("from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine("left outer join N_POOR_CODE B ");
            sb.AppendLine("on A.POOR_CD = B.POOR_CD ");
            sb.AppendLine("left outer join N_FLOW_CODE C ");
            sb.AppendLine("on A.FLOW_CD = C.FLOW_CD ");
            sb.AppendLine("inner join F_WORK_INST as E ");
            sb.AppendLine("on E.LOT_NO=A.LOT_NO  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO,A.LOT_SUB,A.SEQ,A.F_STEP ");
            Debug.WriteLine("fn_Work_Flow_Detail");
            Debug.WriteLine("");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_out_item(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("       A.OUTPUT_DATE");
            sb.AppendLine("       , B.LOT_NO");
            sb.AppendLine("       , B.ITEM_CD ");
            sb.AppendLine("       , D.ITEM_NM ");
            sb.AppendLine("       , B.OUTPUT_AMT ");
            sb.AppendLine("       , A.CUST_CD ");
            sb.AppendLine("       , C.CUST_NM ");
            sb.AppendLine("from F_ITEM_OUT A ");
            sb.AppendLine("inner join F_ITEM_OUT_DETAIL B ");
            sb.AppendLine("on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine("and A.OUTPUT_CD = B.OUTPUT_CD ");
            sb.AppendLine("inner join N_CUST_CODE C ");
            sb.AppendLine("on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine("inner join N_ITEM_CODE D ");
            sb.AppendLine("on B.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            Debug.WriteLine("fn_Work_Flow_Detail");
            Debug.WriteLine("");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_seq(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine(" isnull(max (seq),0)  as Maxseq ");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL as a ");
            sb.AppendLine("where 1=1  ");
            sb.AppendLine(condition);


            Debug.WriteLine("fn_Work_Flow_Detail");
            Debug.WriteLine("");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품입고식별표 리스트 
        public DataTable fn_Item_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,B.LOT_SUB ");
            sb.AppendLine("        ,A.LOT_NO + RIGHT('00'+ convert(varchar, B.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("        ,B.F_SUB_DATE AS PACK_DATE ");
            sb.AppendLine("        ,A.ITEM_CD ");
            sb.AppendLine("        ,C.ITEM_NM");
            sb.AppendLine("        ,C.SPEC ");
            sb.AppendLine("        ,C.UNIT_CD ");
            sb.AppendLine("        ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) AS UNIT_NM ");
            // sb.AppendLine("        ,B.F_SUB_AMT  ");
            sb.AppendLine("         ,B.F_SUB_AMT ");  // 
            sb.AppendLine("        ,J.CUST_NM ");
            sb.AppendLine("        ,j.cust_CD ");
            //2019-11-04 이재원 : 제품입고 확정페이지를 위한 가격 출력 쿼리 생성
            sb.AppendLine("        ,(SELECT INPUT_PRICE from N_ITEM_CODE where Z.ITEM_CD = ITEM_CD) AS INPUT_PRICE");
            //2019-11-04 이재원 : 제품입고 확정 페이지를 위한 입고 여부를 확인하는 쿼리 생성
            sb.AppendLine("        ,Z.COMPLETE_YN");
            sb.AppendLine("        ,case  when K.PLAN_NUM <>''  then K.PLAN_NUM else '미수주'  end PLAN_NUM");
            sb.AppendLine("        ,(SELECT LINK_CD from N_ITEM_CODE where Z.ITEM_CD = ITEM_CD) AS LINK_CD");

            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("inner join N_ITEM_CODE C  "); //유정훈 수정
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD   ");
            sb.AppendLine("left outer join N_ITEM_FLOW D   ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD   ");
            sb.AppendLine("AND A.ITEM_CD = D.ITEM_CD   ");
            sb.AppendLine("left outer join F_WORK_INST AS K on A.LOT_NO = K.LOT_NO ");
            sb.AppendLine("left outer join N_CUST_CODE AS J on K.CUST_CD = J.CUST_CD AND J.CUST_GUBUN = '1' "); //유정훈 수정
            sb.AppendLine("inner  join F_ITEM_INPUT Z    ");
            sb.AppendLine("on A.LOT_NO = Z.LOT_NO   ");
            sb.AppendLine("  and B.SEQ = Z.SEQ  ");
            sb.AppendLine(" and B.F_STEP = Z.F_STEP  ");

            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by B.F_SUB_DATE desc, PLAN_NUM,B.LOT_SUB");
            Debug.WriteLine("제품입고식별표 리스트 ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Item_Input_List2(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select A.INPUT_DATE ");
            sb.AppendLine("       ,A.INPUT_CD ");
            sb.AppendLine("       ,A.ITEM_CD ");
            sb.AppendLine("       ,ISNULL(A.INPUT_AMT,0) AS INPUT_AMT ");
            sb.AppendLine("       ,ISNULL(A.CURR_AMT,0) AS CURR_AMT  ");
            sb.AppendLine("       ,A.LOT_NO ");
            sb.AppendLine("       ,A.LOT_SUB ");
            sb.AppendLine("       ,A.FLOW_CD ");
            sb.AppendLine("       ,A.COMPLETE_YN ");
            sb.AppendLine(" from F_ITEM_INPUT A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_자재선입선출_List(string condition)
        {
            StringBuilder sb = new StringBuilder();


            //=================== 자재선입선출 작업지시현황 ======================

            sb.AppendLine("select A.OUTPUT_DATE ");
            sb.AppendLine("     ,A.OUTPUT_CD ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.RAW_MAT_CD");
            sb.AppendLine("     ,ISNULL(A.TOTAL_AMT,0) AS OUT_AMT");
            sb.AppendLine("     ,A.INPUT_DATE ");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.INPUT_SEQ ");
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호 ");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.INPUT_SEQ), 0)), 2) AS 순번 ");
            sb.AppendLine("    , B.UNIT_CD ");
            sb.AppendLine("     , Z.UNIT_NM ");
            sb.AppendLine(" , convert (int,isnull(0,B.TOTAL_MONEY)) as TOTAL_MONEY ");
            sb.AppendLine("     , convert (int,isnull(0,B.PRICE)) as PRICE");
            sb.AppendLine("      , convert (int,isnull(0,B.TOTAL_AMT)) as TOTAL_AMT ");
            sb.AppendLine("        , B.ORDER_DATE");
            sb.AppendLine("        , B.ORDER_CD");
            sb.AppendLine("         , B.ORDER_SEQ");

            sb.AppendLine(" from  F_RAW_OUTPUT A ");

            sb.AppendLine(" left join F_RAW_DETAIL as B on B.INPUT_DATE=A.INPUT_DATE and B.INPUT_CD=A.INPUT_CD and B.SEQ=A.INPUT_SEQ  ");
            sb.AppendLine(" left join N_UNIT_CODE as Z on Z.UNIT_CD=B.UNIT_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        //공정별 재공 현황
        public DataTable fn_Item_Flow_Con_List()  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,B.W_INST_DATE ");
            sb.AppendLine("         ,STUFF(( ");
            sb.AppendLine("             select ',' + FLOW_NM+' '+ CONVERT(nvarchar(20),FLOOR(SUM(F_SUB_AMT))) +' '    ");
            sb.AppendLine("             from F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("             left outer join N_FLOW_CODE B  ");
            sb.AppendLine("             on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("             where A.LOT_NO = A.LOT_NO  ");
            sb.AppendLine("             group by A.LOT_NO,A.F_STEP,B.FLOW_CD,B.FLOW_NM  ");
            sb.AppendLine("             FOR XML PATH('')),1,1,'')as LOT_TOT_FLOW_NM  ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_INST B ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE C ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("order by A.ITEM_CD,A.LOT_NO ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정별 재공 현황
        public DataTable fn_Item_Flow_Con_Dt_List(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.F_SUB_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_NO + RIGHT('00'+ convert(varchar, A.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,B.FLOW_NM ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,A.LOSS ");
            sb.AppendLine("         ,A.POOR_AMT ");
            sb.AppendLine("         ,DATEDIFF(DD,F_SUB_DATE,GETDATE()) as OVER_DATE ");
            sb.AppendLine("         ,A.COMMENT ");
            sb.AppendLine("from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine("left outer join N_FLOW_CODE B");
            sb.AppendLine("on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("where A.LOT_NO = '" + txt_lot_no + " '");
            sb.AppendLine("order by A.LOT_NO,A.F_STEP,A.LOT_SUB ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정별 기간 현황
        public DataTable fn_Flow_Product_List(string sba, string condition, string condition2)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.F_SUB_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_NO + RIGHT('00'+ convert(varchar, A.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,B.FLOW_NM ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,A.LOSS ");
            sb.AppendLine("         ,A.POOR_AMT ");
            sb.AppendLine("         ,DATEDIFF(DD,F_SUB_DATE,GETDATE()) as OVER_DATE ");
            sb.AppendLine("         ,C.INPUT_DATE ");
            sb.AppendLine("         ,A.COMMENT ");
            sb.AppendLine("         ,D.ITEM_NM ");
            sb.AppendLine("         ,F.POOR_NM");
            sb.AppendLine("         ,A.POOR_CD");
            sb.AppendLine("from  F_WORK_FLOW K ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("on K.LOT_NO = A.LOT_NO ");
            sb.AppendLine("left outer join N_FLOW_CODE B");
            sb.AppendLine("on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("left outer join F_ITEM_INPUT C");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE D  ");
            sb.AppendLine("ON K.ITEM_CD = D.ITEM_CD ");

            sb.AppendLine("LEFT OUTER JOIN N_UNIT_CODE E   ");
            sb.AppendLine("ON B.POOR_TYPE_CD = E.UNIT_CD ");
            sb.AppendLine("left outer join N_POOR_CODE F    ");
            sb.AppendLine("on A.POOR_CD = F.POOR_CD ");

            sb.AppendLine("where 1=1");
            sb.AppendLine(sba);
            sb.AppendLine(condition);
            sb.AppendLine(condition2);
            sb.AppendLine(" and A.POOR_AMT > 0 ");
            sb.AppendLine("order by A.F_SUB_DATE ");
            //sb.AppendLine("order by A.LOT_NO,A.F_STEP,A.LOT_SUB ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Product_List(string condition)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.F_SUB_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_NO + RIGHT('00'+ convert(varchar, A.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,B.FLOW_NM ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,A.LOSS ");
            sb.AppendLine("         ,A.POOR_AMT ");
            sb.AppendLine("         ,DATEDIFF(DD,F_SUB_DATE,GETDATE()) as OVER_DATE ");
            sb.AppendLine("         ,C.INPUT_DATE ");
            sb.AppendLine("         ,A.COMMENT ");
            sb.AppendLine("         ,D.ITEM_NM ");
            sb.AppendLine("from  F_WORK_FLOW K ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("on K.LOT_NO = A.LOT_NO ");
            sb.AppendLine("left outer join N_FLOW_CODE B");
            sb.AppendLine("on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("left outer join F_ITEM_INPUT C");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE D  ");
            sb.AppendLine("ON K.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine("where 1=1");
            sb.AppendLine(condition);
            //sb.AppendLine("and A.FLOW_CD='0005' ");
            sb.AppendLine("order by A.F_SUB_DATE, A.LOT_NO,A.F_STEP,A.LOT_SUB ");
            Debug.WriteLine("생산현황");
            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서 원자재 출고 여부
        public DataTable fn_Work_Raw_Out_Yn(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         RAW_OUT_YN ");
            sb.AppendLine("from F_WORK_INST  ");
            sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품 출고에서 제품재고 검색 

        //public DataTable fn_Item_In_Stock_List(string condition)
        //{
        //    StringBuilder sb = new StringBuilder();
        //    sb.AppendLine("select A.LOT_NO,");
        //    sb.AppendLine("       A.LOT_SUB, ");
        //    sb.AppendLine("       A.INPUT_DATE, ");
        //    sb.AppendLine("       A.INPUT_CD, ");
        //    sb.AppendLine("       A.ITEM_CD, ");
        //    sb.AppendLine("       C.ITEM_NM,  ");
        //    sb.AppendLine("       C.SPEC,  ");
        //    sb.AppendLine("       ISNULL(C.OUTPUT_PRICE,0) AS OUTPUT_PRICE,  ");
        //    sb.AppendLine("       C.UNIT_CD,  ");
        //    sb.AppendLine("       (select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM,  ");
        //    sb.AppendLine("       A.INPUT_AMT,    ");
        //    sb.AppendLine("       ISNULL(B.OUTPUT_AMT,0) AS OUTPUT_AMT, ");
        //    sb.AppendLine("       A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) AS STOCK_AMT, ");
        //    sb.AppendLine("       D.CUST_CD, ");
        //    sb.AppendLine("       E.CUST_NM ");
        //    sb.AppendLine("from F_ITEM_INPUT A ");
        //    sb.AppendLine("left outer join (   ");
        //    sb.AppendLine("                 select BB.LOT_NO,BB.LOT_SUB,ISNULL(SUM(OUTPUT_AMT),0) AS OUTPUT_AMT ");
        //    sb.AppendLine("                 from F_ITEM_OUT AA  ");
        //    sb.AppendLine("                 inner join F_ITEM_OUT_DETAIL BB ");
        //    sb.AppendLine("                 on AA.OUTPUT_DATE = BB.OUTPUT_DATE ");
        //    sb.AppendLine("                     and AA.OUTPUT_CD = BB.OUTPUT_CD ");
        //    //sb.AppendLine("                     where AA.CUST_CD = '" + cust_cd + "' ");
        //    sb.AppendLine("                    group by LOT_NO,LOT_SUB) B ");
        //    sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
        //    sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
        //    sb.AppendLine(" left outer join N_ITEM_CODE C ");
        //    sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD");
        //    sb.AppendLine(" left outer join F_WORK_INST D ");
        //    sb.AppendLine(" on A.LOT_NO = D.LOT_NO ");
        //    sb.AppendLine(" left outer join N_CUST_CODE E ");
        //    sb.AppendLine(" on D.CUST_CD = E.CUST_CD ");
        //    sb.AppendLine(" where 1=1 ");
        //    sb.AppendLine(condition);
        //    sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");
        //    //sb.AppendLine(" where D.CUST_CD = '" + cust_cd + "' ");
        //    //sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");

        //    //sb.AppendLine(condition);
        //    sb.AppendLine(" order by A.INPUT_DATE ");
        //    // sb.AppendLine(" order by A.LOT_NO,A.LOT_SUB ");


        //    SqlCommand sCommand = new SqlCommand(sb.ToString());
        //    if (sCommand.CommandText.Equals(null))
        //    {
        //        wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
        //        return null;
        //    }
        //    return wAdo.SqlCommandSelect(sCommand);
        //}


        public DataTable fn_Item_In_Stock_List(string condition)
        {
            //20200219 제품출고등록 쿼리 변경
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,");
            sb.AppendLine("       A.LOT_SUB, ");
            sb.AppendLine("       A.INPUT_DATE, ");
            sb.AppendLine("       A.INPUT_CD, ");
            sb.AppendLine("       A.ITEM_CD, ");
            //이재원 과세구분 추가 + LINK_CD추가
            sb.AppendLine("       (SELECT VAT_CD FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS TAX_CD , ");
            sb.AppendLine("       ISNULL(E.TAX_CD,0) AS VAT_CD , ");
            sb.AppendLine("       (SELECT LINK_CD FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS LINK_CD , ");
            //
            sb.AppendLine("       C.ITEM_NM,  ");
            sb.AppendLine("       C.SPEC,  ");
            sb.AppendLine("       ISNULL(C.OUTPUT_PRICE,0) AS OUTPUT_PRICE,  ");
            sb.AppendLine("       C.UNIT_CD,  ");
            sb.AppendLine("       (select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM,  ");
            sb.AppendLine("       A.INPUT_AMT,    ");
            sb.AppendLine("       ISNULL(B.OUTPUT_AMT,0) AS OUTPUT_AMT, ");
            sb.AppendLine("       A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) AS STOCK_AMT, ");
            sb.AppendLine("       case when E.CUST_NM is null then '' else D.CUST_CD end as CUST_CD, ");
            sb.AppendLine("        isnull(a.seq,1) as INPUT_SEQ, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       case  when G.PLAN_NUM <>''  then G.PLAN_NUM else '미수주' end PLAN_NUM ");
            sb.AppendLine("from F_ITEM_INPUT A ");
            sb.AppendLine("              left outer join (    ");
            sb.AppendLine("                   select BB.INPUT_DATE,BB.INPUT_CD,ISNULL(SUM(OUTPUT_AMT),0) AS OUTPUT_AMT  ");
            sb.AppendLine("                   from F_ITEM_OUT AA   ");
            sb.AppendLine("                   inner join F_ITEM_OUT_DETAIL BB  ");
            sb.AppendLine("                   on AA.OUTPUT_DATE = BB.OUTPUT_DATE  ");
            sb.AppendLine("                       and AA.OUTPUT_CD = BB.OUTPUT_CD  ");
            sb.AppendLine("                      group by INPUT_DATE,INPUT_CD) B  ");
            sb.AppendLine("   on A.INPUT_DATE = B.INPUT_DATE  ");
            sb.AppendLine("   and A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine(" left outer join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine(" left outer join F_WORK_INST D ");
            sb.AppendLine(" on A.LOT_NO = D.LOT_NO ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on D.CUST_CD = E.CUST_CD ");
            sb.AppendLine("  left outer join F_WORK_INST as G ");
            sb.AppendLine("  on G.LOT_NO = A.LOT_NO  ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            //sb.AppendLine(" and D.COMPLETE_YN = 'Y' ");
            // sb.AppendLine(" and A.COMPLETE_YN = 'Y' ");
            sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");
            sb.AppendLine("     and E.CUST_NM is not null ");
            sb.AppendLine(" order by A.INPUT_DATE ");

            //sb.AppendLine("select A.LOT_NO,");
            //sb.AppendLine("       A.LOT_SUB, ");
            //sb.AppendLine("       A.INPUT_DATE, ");
            //sb.AppendLine("       A.INPUT_CD, ");
            //sb.AppendLine("       A.ITEM_CD, ");
            ////이재원 과세구분 추가 + LINK_CD추가
            //sb.AppendLine("       (SELECT VAT_CD FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS TAX_CD , ");
            //sb.AppendLine("       (SELECT LINK_CD FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS LINK_CD , ");
            ////
            //sb.AppendLine("       C.ITEM_NM,  ");
            //sb.AppendLine("       C.SPEC,  ");
            //sb.AppendLine("       ISNULL(C.OUTPUT_PRICE,0) AS OUTPUT_PRICE,  ");
            //sb.AppendLine("       C.UNIT_CD,  ");
            //sb.AppendLine("       (select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM,  ");
            //sb.AppendLine("       A.INPUT_AMT,    ");
            //sb.AppendLine("       ISNULL(B.OUTPUT_AMT,0) AS OUTPUT_AMT, ");
            //sb.AppendLine("       A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) AS STOCK_AMT, ");
            //sb.AppendLine("       D.CUST_CD, ");
            //sb.AppendLine("       E.CUST_NM ");
            //sb.AppendLine("from F_ITEM_INPUT A ");
            //sb.AppendLine("left outer join (   ");
            //sb.AppendLine("                 select BB.LOT_NO,BB.LOT_SUB,ISNULL(SUM(OUTPUT_AMT),0) AS OUTPUT_AMT ");
            //sb.AppendLine("                 from F_ITEM_OUT AA  ");
            //sb.AppendLine("                 inner join F_ITEM_OUT_DETAIL BB ");
            //sb.AppendLine("                 on AA.OUTPUT_DATE = BB.OUTPUT_DATE ");
            //sb.AppendLine("                     and AA.OUTPUT_CD = BB.OUTPUT_CD ");
            ////sb.AppendLine("                     where AA.CUST_CD = '" + cust_cd + "' ");
            //sb.AppendLine("                    group by LOT_NO,LOT_SUB) B ");
            //sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
            //sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
            //sb.AppendLine(" left outer join N_ITEM_CODE C ");
            //sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD");
            //sb.AppendLine(" left outer join F_WORK_INST D ");
            //sb.AppendLine(" on A.LOT_NO = D.LOT_NO ");
            //sb.AppendLine(" left outer join N_CUST_CODE E ");
            //sb.AppendLine(" on D.CUST_CD = E.CUST_CD ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine(condition);
            //sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");

            //if (Common.sp_pack_gubun.Equals("1")) // 장터지기 연동 업체의 경우 제품입고 확정이 수행된 이후의 제품만 노출되도록 
            //{
            //    sb.AppendLine("   and A.COMPLETE_YN = 'Y' ");
            //}

            //sb.AppendLine(" where D.CUST_CD = '" + cust_cd + "' ");
            //sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");

            //sb.AppendLine(condition);
            //sb.AppendLine(" order by A.INPUT_DATE ");
            // sb.AppendLine(" order by A.LOT_NO,A.LOT_SUB ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품 출고 조회

        public DataTable fn_Item_Output_List(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       C.CUST_NM, ");
            sb.AppendLine("       A.STORAGE_CD, ");
            sb.AppendLine("       D.STORAGE_NM, ");
            sb.AppendLine("       B.ITEM_CNT, ");
            sb.AppendLine("       A.SELF_YN ");
            sb.AppendLine(" from F_ITEM_OUT A ");
            sb.AppendLine(" inner join(  ");
            sb.AppendLine("                 select OUTPUT_DATE,OUTPUT_CD,COUNT(*) AS ITEM_CNT ");
            sb.AppendLine("                 from F_ITEM_OUT_DETAIL A ");
            // 2019-09-06 유정훈 추가 
            sb.AppendLine("                 left outer join N_ITEM_CODE B ");
            sb.AppendLine("                 on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("                 left outer join N_CUST_CODE C ");
            sb.AppendLine("                 on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine("                     and C.CUST_GUBUN = '1' ");
            // 2019-09-06 유정훈 끝 
            sb.AppendLine(condition);
            sb.AppendLine(condition2);
            sb.AppendLine("                 group by OUTPUT_DATE,OUTPUT_CD)B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine(" left outer join N_STORAGE_CODE D ");
            sb.AppendLine(" on A.STORAGE_CD = D.STORAGE_CD ");

            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE desc, A.OUTPUT_CD desc ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Item_Output_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       B.SEQ, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       B.LOT_NO, ");
            sb.AppendLine("       B.LOT_SUB, ");
            sb.AppendLine("       B.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM, ");
            sb.AppendLine("       C.SPEC, ");
            sb.AppendLine("       B.UNIT_CD, ");
            sb.AppendLine("       D.UNIT_NM, ");
            sb.AppendLine("       B.OUTPUT_AMT, ");
            sb.AppendLine("       B.PRICE, ");
            sb.AppendLine("       B.TOTAL_MONEY, ");
            sb.AppendLine("       B.INPUT_DATE,");
            sb.AppendLine("       B.INPUT_CD, ");
            //이재원 현재고도 같이 불러오도록 수정
            sb.AppendLine("       (SELECT H.INPUT_AMT - I.OUTPUT_AMT AS CURR_AMT FROM F_ITEM_INPUT H ");
            sb.AppendLine("       left outer join (SELECT SUM(OUTPUT_AMT) AS OUTPUT_AMT, INPUT_DATE, INPUT_CD FROM F_ITEM_OUT_DETAIL ");
            sb.AppendLine("       group by INPUT_DATE,INPUT_CD) I ");
            sb.AppendLine("       on H.INPUT_DATE = I.INPUT_DATE ");
            sb.AppendLine("       and H.INPUT_CD = I.INPUT_CD ");
            sb.AppendLine("       WHERE H.INPUT_DATE = B.INPUT_DATE and H.INPUT_CD = B.INPUT_CD) AS CURR_AMT,  ");
            //이재원 VAT 불러오도록 수정
            sb.AppendLine("       ISNULL(H.TAX_CD, 0) AS TAX_CD, ");
            //
            sb.AppendLine("       B.CUST_CD AS CUST_CD2,");
            sb.AppendLine("       F.OUT_INST_YN, ");
            sb.AppendLine("       (select CUST_NM from N_CUST_CODE where CUST_CD = B.CUST_CD) AS CUST_NM2, ");
            sb.AppendLine("       B.J_INPUT_DATE, ");
            sb.AppendLine("       B.J_INPUT_CD, ");
            sb.AppendLine("       B.J_INPUT_SEQ, ");
            sb.AppendLine("         case  when G.PLAN_NUM <>''  then G.PLAN_NUM else '미수주'  end PLAN_NUM ");
            sb.AppendLine(" from F_ITEM_OUT A");
            sb.AppendLine(" left outer join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join F_SALES_DETAIL H  ");
            sb.AppendLine(" on H.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and H.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" and H.OUTPUT_SEQ = B.SEQ   ");
            sb.AppendLine(" left outer join N_ITEM_CODE C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE D ");
            sb.AppendLine(" on B.UNIT_CD = D.UNIT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on A.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" left outer join F_ITEM_OUT_INST F ");
            sb.AppendLine(" on B.OUTPUT_DATE = F.OUTPUT_DATE ");
            sb.AppendLine("     and B.OUTPUT_CD = F.OUTPUT_CD ");
            sb.AppendLine("     and B.SEQ = F.SEQ");
            sb.AppendLine("     left join F_WORK_INST as G ");
            sb.AppendLine("        on G.LOT_NO= B.LOT_NO ");




            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_CD");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Item_Output_Detail_ledger(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       B.SEQ, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       B.LOT_NO, ");
            sb.AppendLine("       B.LOT_SUB, ");
            sb.AppendLine("       B.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM, ");
            sb.AppendLine("       C.SPEC, ");
            sb.AppendLine("       B.UNIT_CD, ");
            sb.AppendLine("       D.UNIT_NM, ");
            sb.AppendLine("       B.OUTPUT_AMT, ");
            sb.AppendLine("       B.PRICE, ");
            sb.AppendLine("       B.TOTAL_MONEY, ");
            sb.AppendLine("       B.INPUT_DATE,");
            sb.AppendLine("       B.INPUT_CD, ");
            //이재원 VAT 불러오도록 수정
            sb.AppendLine("       ISNULL(B.TAX_CD, 0) AS TAX_CD, ");
            //
            sb.AppendLine("       B.CUST_CD AS CUST_CD2,");
            sb.AppendLine("       F.OUT_INST_YN, ");
            sb.AppendLine("       (select CUST_NM from N_CUST_CODE where CUST_CD = B.CUST_CD) AS CUST_NM2, ");
            sb.AppendLine("       B.J_INPUT_DATE, ");
            sb.AppendLine("       B.J_INPUT_CD, ");
            sb.AppendLine("       B.J_INPUT_SEQ, ");
            sb.AppendLine("         case  when G.PLAN_NUM <>''  then G.PLAN_NUM else '없음'  end PLAN_NUM ");
            sb.AppendLine(" into #출고원장");
            sb.AppendLine(" from F_ITEM_OUT A");
            sb.AppendLine(" inner join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_ITEM_CODE C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE D ");
            sb.AppendLine(" on B.UNIT_CD = D.UNIT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on A.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" left outer join F_ITEM_OUT_INST F ");
            sb.AppendLine(" on B.OUTPUT_DATE = F.OUTPUT_DATE ");
            sb.AppendLine("     and B.OUTPUT_CD = F.OUTPUT_CD ");
            sb.AppendLine("     and B.SEQ = F.SEQ");
            sb.AppendLine("     left join F_WORK_INST as G ");
            sb.AppendLine("        on G.LOT_NO= B.LOT_NO ");
            sb.AppendLine(condition);
            sb.AppendLine("    select * from #출고원장 ");
            sb.AppendLine("       union all ");
            sb.AppendLine("        select '9999-99-99',99,'','','','','',item_cd,max(item_nm) as item_nm ,MAX(spec),'','',SUM(output_amt) as output_amt,SUM(price) as price,SUM(total_money) as total_money,'','','','','','','','','','합계' from #출고원장  ");
            sb.AppendLine("      group by ITEM_CD  ");
            sb.AppendLine(" order by ITEM_CD,output_date");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Item_Output_Detail_List(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       B.SEQ, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       B.LOT_NO, ");
            sb.AppendLine("       B.LOT_SUB, ");
            sb.AppendLine("       B.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM, ");
            sb.AppendLine("       C.SPEC, ");
            sb.AppendLine("       B.UNIT_CD, ");
            sb.AppendLine("       D.UNIT_NM, ");
            sb.AppendLine("       B.OUTPUT_AMT, ");
            sb.AppendLine("       B.PRICE, ");
            sb.AppendLine("       B.TOTAL_MONEY, ");
            sb.AppendLine("       B.INPUT_DATE,");
            sb.AppendLine("       B.INPUT_CD, ");
            sb.AppendLine("       B.CUST_CD AS CUST_CD2,");
            sb.AppendLine("       F.OUT_INST_YN, ");
            sb.AppendLine("       (select CUST_NM from N_CUST_CODE where CUST_CD = B.CUST_CD) AS CUST_NM2 ");
            sb.AppendLine(" from F_ITEM_OUT A");
            sb.AppendLine(" inner join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_ITEM_CODE C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE D ");
            sb.AppendLine(" on B.UNIT_CD = D.UNIT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on A.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" left outer join F_ITEM_OUT_INST F ");
            sb.AppendLine(" on B.OUTPUT_DATE = F.OUTPUT_DATE ");
            sb.AppendLine("     and B.OUTPUT_CD = F.OUTPUT_CD ");
            sb.AppendLine("     and B.SEQ = F.SEQ");

            sb.AppendLine(condition);
            sb.AppendLine(condition2);
            sb.AppendLine(" order by A.OUTPUT_DATE, A.OUTPUT_CD, B.SEQ");
            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //제품재고현황 
        public DataTable fn_Item_Stock_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("     select A.ITEM_CD, A.ITEM_NM, A.SPEC,      ");
            sb.AppendLine("     isnull(A.BASIC_STOCK,0) as BASIC_STOCK,       ");
            sb.AppendLine("     isnull(A.BAL_STOCK,0) as BAL_STOCK,     ");
            sb.AppendLine("     isnull(A.PROP_STOCK,0) as PROP_STOCK,     ");
            sb.AppendLine("     ISNULL(SUM(C.POOR_AMT),0) AS POOR_AMT,     ");
            sb.AppendLine("      (SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = A.UNIT_CD) AS UNIT_NM,     ");
            sb.AppendLine("      A.ITEM_GUBUN     ");
            sb.AppendLine("     from N_ITEM_CODE A     ");
            sb.AppendLine("     left outer join F_WORK_FLOW B ON A.ITEM_CD = B.ITEM_CD     ");
            sb.AppendLine("     left outer join F_WORK_FLOW_DETAIL C ON B.LOT_NO = C.LOT_NO     ");
            sb.AppendLine("      WHERE 1=1   ");
            sb.AppendLine(condition);
            sb.AppendLine("     group by A.ITEM_CD ,A.ITEM_NM, A.SPEC, BASIC_STOCK,  BAL_STOCK, PROP_STOCK ,UNIT_CD,ITEM_GUBUN ");
            sb.AppendLine("     order by A.ITEM_CD     ");


            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품재고 상세현황
        public DataTable fn_Item_Detail_Stock_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            // 2020-05-20 상세 재고현황 제품입고는 INPUT_DATE 와 INPUT_CD가 주키인데 join 조건을 LOT와 LOT_SUB와ㅣ 연결해놔서 1대N관계가 되는 오류발생 조건을 수정함 

            sb.AppendLine("     ");
            sb.AppendLine("  select A.INPUT_DATE, A.LOT_NO, ISNULL(A.INPUT_AMT,0) AS 입고량, ISNULL(B.OUTPUT_AMT,0) AS 출고량,  ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0) AS 재고량,ISNULL(POOR_AMT,0) as POOR_AMT   ");
            sb.AppendLine("  from F_ITEM_INPUT A   ");
            sb.AppendLine("  left outer join F_ITEM_OUT_DETAIL B   ");
            sb.AppendLine("  on A.INPUT_DATE = B.INPUT_DATE  ");
            sb.AppendLine("  and A.INPUT_CD = B.INPUT_CD   ");
            sb.AppendLine("          left outer join(  ");
            sb.AppendLine("     select LOT_NO,SEQ,SUM(A.POOR_AMT) as POOR_AMT  from F_WORK_FLOW_DETAIL as A   ");
            sb.AppendLine("    group by LOT_NO,SEQ ) as C on c.LOT_NO=A.LOT_NO and C.SEQ=A.SEQ ");
            sb.AppendLine("  where A.ITEM_CD = '" + condition + "'  ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select A.INPUT_DATE,'합계', sum(ISNULL(A.INPUT_AMT,0)) AS 입고량, sum(ISNULL(B.OUTPUT_AMT,0)) AS 출고량, sum( ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0)) AS 재고량   ,sum(ISNULL(POOR_AMT,0))   as POOR_AMT  ");
            sb.AppendLine("  from F_ITEM_INPUT A   ");
            sb.AppendLine("  left outer join F_ITEM_OUT_DETAIL B   ");
            sb.AppendLine("  on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine("      and A.INPUT_CD = B.INPUT_CD   ");
            sb.AppendLine("          left outer join(  ");
            sb.AppendLine("     select LOT_NO,SEQ,SUM(A.POOR_AMT) as POOR_AMT  from F_WORK_FLOW_DETAIL as A   ");
            sb.AppendLine("    group by LOT_NO,SEQ ) as C on c.LOT_NO=A.LOT_NO and C.SEQ=A.SEQ ");
            sb.AppendLine("  where A.ITEM_CD = '" + condition + "'  ");
            sb.AppendLine("  group by A.INPUT_DATE  ");
            sb.AppendLine("  order by A.INPUT_DATE ,A.LOT_NO ");



            //sb.AppendLine("select A.INPUT_DATE, A.LOT_NO, ISNULL(A.INPUT_AMT,0) AS 입고량, ISNULL(B.OUTPUT_AMT,0) AS 출고량,  ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0) AS 재고량,ISNULL(POOR_AMT,0) as POOR_AMT  ");
            //sb.AppendLine("from F_ITEM_INPUT A  ");
            //sb.AppendLine("left outer join F_ITEM_OUT_DETAIL B  ");
            //sb.AppendLine("on A.LOT_NO = B.LOT_NO and A.SEQ=B.SEQ");
            //sb.AppendLine("and A.LOT_SUB = B.LOT_SUB  ");
            //sb.AppendLine("        left outer join( ");
            //sb.AppendLine("   select LOT_NO,SEQ,SUM(A.POOR_AMT) as POOR_AMT  from F_WORK_FLOW_DETAIL as A  ");

            //sb.AppendLine("  group by LOT_NO,SEQ ) as C on c.LOT_NO=A.LOT_NO and C.SEQ=A.SEQ");

            //sb.AppendLine("where A.ITEM_CD = '" + condition + "' ");

            ///////////////////
            //sb.AppendLine("union all ");

            //sb.AppendLine("select A.INPUT_DATE,'합계', sum(ISNULL(A.INPUT_AMT,0)) AS 입고량, sum(ISNULL(B.OUTPUT_AMT,0)) AS 출고량, sum( ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0)) AS 재고량   ,sum(ISNULL(POOR_AMT,0))   as POOR_AMT ");
            //sb.AppendLine("from F_ITEM_INPUT A  ");
            //sb.AppendLine("left outer join F_ITEM_OUT_DETAIL B  ");
            //sb.AppendLine("on A.LOT_NO = B.LOT_NO  and A.SEQ=B.SEQ ");
            //sb.AppendLine("    and A.LOT_SUB = B.LOT_SUB  ");

            //sb.AppendLine("        left outer join( ");
            //sb.AppendLine("   select LOT_NO,SEQ,SUM(A.POOR_AMT) as POOR_AMT  from F_WORK_FLOW_DETAIL as A  ");
            //sb.AppendLine("  group by LOT_NO,SEQ ) as C on c.LOT_NO=A.LOT_NO and C.SEQ=A.SEQ");

            //sb.AppendLine("where A.ITEM_CD = '" + condition + "' ");
            //sb.AppendLine("group by A.INPUT_DATE ");

            //sb.AppendLine("order by A.INPUT_DATE ,A.LOT_NO");



            Debug.WriteLine("제품 재고 상세현황");

            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //거래처별제품재고현황 
        public DataTable fn_Cust_Stock_List(string condition)
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT C.CUST_NM,  ");
            sb.AppendLine("SUM(ISNULL(A.INPUT_AMT,0)) AS 입고량, SUM(ISNULL(B.OUTPUT_AMT,0)) AS 출고량,  SUM(ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0)) AS 재고량  ");
            sb.AppendLine("from F_ITEM_INPUT A  ");
            sb.AppendLine("left outer join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO and A.LOT_SUB = B.LOT_SUB    ");
            sb.AppendLine("right JOIN N_CUST_CODE C ON B.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("GROUP BY CUST_NM  ");
            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //거래처별제품재고 상세현황
        public DataTable fn_Cust_Detail_Stock_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE, A.LOT_NO, D.ITEM_CD,ISNULL(A.INPUT_AMT,0) AS 입고량,  ");
            sb.AppendLine("ISNULL(B.OUTPUT_AMT,0) AS 출고량,  ISNULL(A.INPUT_AMT,0)- ISNULL(B.OUTPUT_AMT,0) AS 재고량  ");
            sb.AppendLine(" ,C.CUST_NM,D.ITEM_NM,D.SPEC  ");
            sb.AppendLine("from F_ITEM_INPUT A  ");
            sb.AppendLine("left outer join F_ITEM_OUT_DETAIL B    ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO and A.LOT_SUB = B.LOT_SUB   ");
            sb.AppendLine("INNER JOIN N_CUST_CODE C ON B.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("INNER JOIN N_ITEM_CODE D ON A.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("WHERE C.CUST_NM = '" + condition + "' ");
            sb.AppendLine("order by A.LOT_NO");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //원자재 출고 현황
        public DataTable fn_Raw_Output_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no, A.OUTPUT_DATE AS 출고일자,");
            sb.AppendLine("       A.RAW_MAT_CD AS 원자재코드, ");
            sb.AppendLine("       A.LOT_NO AS 제조번호, ");
            sb.AppendLine("       B.RAW_MAT_NM AS 원자재명, ");
            sb.AppendLine("       B.SPEC AS 규격, ");
            sb.AppendLine("       ISNULL(A.TOTAL_AMT,0) AS 투입량, ");
            sb.AppendLine("       D.ITEM_NM AS 제품명,  ");
            sb.AppendLine("       D.SPEC AS 제품규격,  ");
            sb.AppendLine("        case  when c.PLAN_NUM <>''  then c.PLAN_NUM else '미수주'  end PLAN_NUM");

            sb.AppendLine(" from F_RAW_OUTPUT A");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD  ");
            sb.AppendLine("  left join F_WORK_INST as C on A.LOT_NO=C.LOT_NO  ");
            sb.AppendLine("  inner join N_ITEM_CODE as D on C.ITEM_CD=D.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE DESC ,a.RAW_MAT_CD ");
            Debug.WriteLine("원자재 출고 현황");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        // LOT추적조회 
        public DataTable fn_Lot_Item_Srch_List(string txt_lot_bar)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.ITEM_CD ");
            sb.AppendLine("         ,A.FLOW_DATE ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,D.ITEM_NM ");
            sb.AppendLine("         ,D.SPEC ");
            sb.AppendLine("         ,A.COMPLETE_YN ");
            sb.AppendLine("         ,C.W_INST_DATE ");
            sb.AppendLine("         ,C.W_INST_CD ");
            sb.AppendLine("         ,C.INST_AMT ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join ( ");
            sb.AppendLine("    select LOT_NO  ");
            sb.AppendLine("    from F_WORK_FLOW_DETAIL  ");
            sb.AppendLine("    where LOT_NO + RIGHT('00'+ convert(varchar, LOT_SUB), 3) like '" + txt_lot_bar + "%'    ");
            sb.AppendLine("    group by LOT_NO  ");
            sb.AppendLine("    )B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join F_WORK_INST C ");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE D ");
            sb.AppendLine("on A.ITEM_CD = D.ITEM_CD ");
            Debug.WriteLine("라트 추적조회 ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //LOT 추적조회 상세 
        public DataTable fn_Lot_Detail(string txt_lot_bar)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          C.F_SUB_DATE ");
            sb.AppendLine("         ,D.RAW_MAT_CD ");
            sb.AppendLine("         ,D.RAW_MAT_NM ");
            sb.AppendLine("         ,D.SPEC ");
            sb.AppendLine("         ,B.TOTAL_AMT ");
            sb.AppendLine("         ,A.W_INST_DATE ");
            sb.AppendLine("         ,A.W_INST_CD ");
            sb.AppendLine("         ,C.FLOW_CD ");
            sb.AppendLine("         ,E.FLOW_NM ");
            sb.AppendLine("         ,C.F_SUB_AMT ");
            sb.AppendLine("         ,C.LOSS ");
            sb.AppendLine("         ,C.POOR_AMT ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,A.CUST_CD AS SALES_CUST_CD ");
            sb.AppendLine("         ,A.INST_AMT");
            sb.AppendLine("         ,(select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN = '1') AS SALES_CUST_NM ");
            sb.AppendLine("         ,C.F_STEP ");
            sb.AppendLine("         ,C.F_SUB_AMT ");
            sb.AppendLine("         ,F.OUTPUT_DATE ");
            sb.AppendLine("         ,G.INPUT_DATE ");
            sb.AppendLine("         ,G.CUST_CD AS PUR_CUST_CD ");
            sb.AppendLine("         ,G.INPUT_DATE ");
            sb.AppendLine("         ,X.ITEM_NM ");
            sb.AppendLine("         ,(select CUST_NM from N_CUST_CODE where CUST_CD = G.CUST_CD and CUST_GUBUN = '2') AS PUR_CUST_NM");
            sb.AppendLine("from F_WORK_INST A ");
            sb.AppendLine("inner join F_WORK_INST_DETAIL B");
            sb.AppendLine("on A.W_INST_DATE = B.W_INST_DATE ");
            sb.AppendLine("     and A.W_INST_CD = B.W_INST_CD ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL C");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO");
            sb.AppendLine("inner join N_RAW_CODE D ");
            sb.AppendLine("on B.RAW_MAT_CD = D.RAW_MAT_CD ");
            sb.AppendLine("left outer join N_FLOW_CODE E ");
            sb.AppendLine("on C.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine("left outer join F_RAW_OUTPUT F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.RAW_MAT_CD = F.RAW_MAT_CD ");
            sb.AppendLine("left outer join F_RAW_INPUT G ");
            sb.AppendLine("on F.INPUT_DATE = G.INPUT_DATE ");
            sb.AppendLine("     and F.INPUT_CD = G.INPUT_CD ");
            sb.AppendLine("left outer join F_RAW_DETAIL H ");
            sb.AppendLine("on F.INPUT_DATE = H.INPUT_DATE ");
            sb.AppendLine("     and F.INPUT_CD = H.INPUT_CD ");
            sb.AppendLine("     and F.INPUT_SEQ = H.SEQ ");
            sb.AppendLine("left outer join N_ITEM_CODE X ON A.ITEM_CD = X.ITEM_CD ");
            sb.AppendLine(" where A.LOT_NO = '" + txt_lot_bar + "' ");
            sb.AppendLine("    ORDER BY E.FLOW_CD,B.RAW_MAT_CD  ");
            Debug.WriteLine("라트추적조회 상세 !~");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable Lot_List(
           string dtp_start_date,
           string dtp_end_date,
           string txt_item_nm

           )  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("SELECT C.ITEM_CD,C.ITEM_NM,C.SPEC,A.F_SUB_DATE,A.LOT_NO ");
            //sb.AppendLine(",SUM(A.F_SUB_AMT) AS '생산량' ");
            //sb.AppendLine(",SUM(A.LOSS) AS LOSS  ");
            //sb.AppendLine(",SUM(A.POOR_AMT) AS '불량'  ");
            //sb.AppendLine("FROM F_WORK_FLOW_DETAIL A  ");
            //sb.AppendLine("INNER JOIN F_WORK_FLOW B ON A.LOT_NO = B.LOT_NO  ");
            //sb.AppendLine("INNER JOIN N_ITEM_CODE C ON B.ITEM_CD = C.ITEM_CD  ");
            //sb.AppendLine("WHERE A.F_SUB_DATE > '" + dtp_start_date + "' AND A.F_SUB_DATE < '" + dtp_end_date + "'  ");

            //sb.AppendLine("GROUP BY A.LOT_NO, A.F_SUB_DATE,C.ITEM_CD, C.ITEM_NM,C.SPEC    ");
            //sb.AppendLine("ORDER BY F_SUB_DATE  ");

            //sb.AppendLine("  SELECT '' AS no, A.ITEM_CD,  MAX(C.ITEM_NM) AS ITEM_NM, MAX(C.SPEC) AS SPEC ");
            //sb.AppendLine("  	, SUM(E.F_SUB_AMT) AS F_SUB_AMT, SUM(E.POOR_AMT) AS POOR_AMT, SUM(E.LOSS) AS LOSS  ");
            //sb.AppendLine("  FROM F_WORK_INST A   ");
            //sb.AppendLine("  LEFT OUTER JOIN N_ITEM_CODE C ON A.ITEM_CD = C.ITEM_CD     ");
            //sb.AppendLine("  INNER JOIN  (   ");
            //sb.AppendLine("  			SELECT D.LOT_NO, SUM(C.F_SUB_AMT) AS F_SUB_AMT, SUM(C.POOR_AMT) AS POOR_AMT, SUM(C.LOSS) AS LOSS     ");
            //sb.AppendLine("  			  FROM F_WORK_FLOW D   ");
            //sb.AppendLine("  				LEFT OUTER JOIN F_WORK_FLOW_DETAIL C ON D.LOT_NO = C.LOT_NO   ");
            //sb.AppendLine("  			GROUP BY D.LOT_NO)    E ON A.LOT_NO = E.LOT_NO ");
            //sb.AppendLine("   WHERE 1=1  ");
            //sb.AppendLine("     AND A.COMPLETE_YN = 'Y'   ");
            //sb.AppendLine("     AND C.ITEM_NM LIKE '%" + sItem + "%' ");

            //sb.AppendLine("     AND A.W_INST_DATE BETWEEN @p_from AND @p_to ");
            //sb.AppendLine("  GROUP BY A.ITEM_CD ");
            //sb.AppendLine("  ORDER BY A.ITEM_CD ASC ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 요청현황  
        public DataTable fn_Flow_Chk_Req_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,B.F_SUB_DATE ");
            sb.AppendLine("         ,B.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,B.F_STEP ");
            sb.AppendLine("         ,B.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            sb.AppendLine("         ,f.MAP ");
            sb.AppendLine("         ,isnull(f.MAP_SIZE,0) as MAP_SIZE ");
            sb.AppendLine("         ,F.EXTERIOR ");            //sb.AppendLine("         ,E.MEASURE_CNT ");
            //sb.AppendLine("         ,E.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.CHECK_YN)  AS CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         , case when isnull(F.PASS_YN,'N') ='Y' then '합격' else '불합격' end PASS_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_FLOW_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" and B.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine("left outer join F_FLOW_CHK F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.LOT_SUB = F.LOT_SUB ");
            sb.AppendLine(" and B.F_STEP = F.F_STEP ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO desc,B.LOT_SUB ");
            Debug.WriteLine("공정검사 요청현황 ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        // 제품검사 요청현황 쿼리가 같음
        public DataTable fn_Item_Chk_Req_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,B.F_SUB_DATE ");
            sb.AppendLine("         ,B.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,B.F_STEP ");
            sb.AppendLine("         ,B.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            //sb.AppendLine("         ,E.MEASURE_CNT ");
            //sb.AppendLine("         ,E.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.ITEM_CHECK_YN)  AS ITEM_CHECK_NM "); //평가구분 코드 620
            // sb.AppendLine("         ,Case when A.PASS_YN ='Y' then '합격' else '불합격' end PASS_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_ITEM_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine("left outer join F_ITEM_CHK F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.LOT_SUB = F.LOT_SUB ");
            sb.AppendLine(" and B.F_STEP = F.F_STEP ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO desc,B.LOT_SUB ");
            Debug.WriteLine("제품검사");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 현황이 요청이 아닌 미완료 혹은 완료일 경우
        public DataTable fn_Flow_Chk_Main_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          A.F_CHK_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");

            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            sb.AppendLine("         ,A.MEASURE_CNT ");
            //sb.AppendLine("         ,A.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.CHECK_YN)  AS CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,A.MAP ");
            sb.AppendLine("         ,A.MAP_SIZE ");
            sb.AppendLine("         ,Case when A.PASS_YN ='Y' then '합격' else '불합격' end PASS_YN ");
            sb.AppendLine("         ,A.EXTERIOR");
            sb.AppendLine("from F_FLOW_CHK A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine(" and A.LOT_SUB = B.LOT_SUB");
            sb.AppendLine(" and A.F_STEP = B.F_STEP");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on A.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_FLOW_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" and B.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            Debug.WriteLine("공정검사 현황이 요청이 아닌 미완료 혹은 완료일 경우");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품 현황이 요청이 아닌 미완료 혹은 완료일 경우
        public DataTable fn_Item_Chk_Main_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          A.F_CHK_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            sb.AppendLine("         ,A.MEASURE_CNT ");
            //sb.AppendLine("         ,A.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.ITEM_CHECK_YN)  AS ITEM_CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,A.MAP ");
            sb.AppendLine("         ,A.MAP_SIZE ");
            sb.AppendLine("         ,A.PASS_YN ");
            sb.AppendLine("from F_ITEM_CHK A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine(" and A.LOT_SUB = B.LOT_SUB");
            sb.AppendLine(" and A.F_STEP = B.F_STEP");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D  ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD");
            sb.AppendLine("left outer join N_ITEM_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 시작 전 공정검사 기준등록 확인했는지 체크 
        public DataTable fn_Flow_Chk_Cnt(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt ");
            sb.AppendLine("from N_FLOW_CHK  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품검사 Count
        public DataTable fn_Item_Chk_Cnt(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt ");
            sb.AppendLine("from N_ITEM_CHK  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정이동표 제품 SUB_NO의 현재 공정진행 데이터 추출
        public DataTable fn_wf_LotNo_Sub_Status(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,A.LOT_SUB,ISNULL(A.F_STEP,0)AS F_STEP,A.FLOW_CD,C.FLOW_NM,A.F_SUB_AMT,A.F_SUB_DATE");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine(" inner join ( ");
            sb.AppendLine("             select LOT_NO,LOT_SUB,MAX(F_STEP)AS F_STEP ");
            sb.AppendLine("             from F_WORK_FLOW_DETAIL ");
            sb.AppendLine("             group by LOT_NO,LOT_SUB ");
            sb.AppendLine("             )B ");
            sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
            sb.AppendLine("     and A.F_STEP=  B.F_STEP ");
            sb.AppendLine(" left outer join N_FLOW_CODE C  ");
            sb.AppendLine(" on A.FLOW_CD = C.FLOW_CD  ");

            //sb.AppendLine("     and C.POOR_TYPE_YN = 'Y' ");
            sb.AppendLine("where 1=1");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.LOT_NO,A.LOT_SUB");
            Debug.WriteLine("공정이동표 제품 SUB_NO의 현재 공정진행 데이터 추출 /fn_wf_LotNo_Sub_Status ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        //공정이동표 제품 SUB_NO의 현재 공정진행 데이터 추출


        //작업지시 진행 될 또는 진행된 제품 찾기 
        public DataTable fn_wf_item_srch(string lot_no)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD,B.ITEM_NM,B.SPEC");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine("inner join N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");

            //sb.AppendLine("     and C.POOR_TYPE_YN = 'Y' ");
            sb.AppendLine("where 1=1");
            sb.AppendLine("     and A.LOT_NO = '" + lot_no + "' ");
            sb.AppendLine(" order by A.LOT_NO ");
            Debug.WriteLine("작업지시 진행 될 또는 진행된 제품 찾기 //fn_wf_item_srch ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Step_Curr(string lot_no, string lot_sub)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,C.LOT_SUB,B.FLOW_SEQ,C.F_STEP ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join ( ");
            sb.AppendLine("     select ITEM_CD,MAX(SEQ)AS FLOW_SEQ  ");
            sb.AppendLine("     from N_ITEM_FLOW ");
            sb.AppendLine("     group by ITEM_CD)B ");
            sb.AppendLine("on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("inner join ( ");
            sb.AppendLine("     select LOT_NO,LOT_SUB,MAX(F_STEP) AS F_STEP ");
            sb.AppendLine("     from F_WORK_FLOW_DETAIL ");
            sb.AppendLine("     group by LOT_NO,LOT_SUB)C ");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("and C.LOT_SUB = '" + lot_sub + "' ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine("and C.LOT_NO = '" + lot_no + "' ");
            Debug.WriteLine("fn_Flow_Step_Curr");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //수입검사기준 등록과 결과값 뿌려주기
        public DataTable fn_Raw_Chk_Rst_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine("       ,A.CHK_CD ");
            sb.AppendLine("       ,A.CHK_STAN_VALUE ");
            sb.AppendLine("       ,B.RAW_MAT_CD AS RAW_MAT_CD_RST ");
            sb.AppendLine("       ,B.CHK_CD AS CHK_CD_RST");
            sb.AppendLine("       ,B.CHK_VALUE  ");
            sb.AppendLine("       ,C.CHK_NM  ");
            sb.AppendLine("       ,C.CHK_ORD  ");

            sb.AppendLine(" from N_RAW_CHK_STAN A");
            sb.AppendLine(" left outer join F_RAW_CHK_RST B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD   ");
            sb.AppendLine("     and A.CHK_CD = B.CHK_CD   ");
            sb.AppendLine(" left outer join N_CHK_CODE C ");
            sb.AppendLine(" on A.CHK_CD = C.CHK_CD   ");
            sb.AppendLine("     and C.CHK_GUBUN = '3'   ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.RAW_MAT_CD,C.CHK_ORD  ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //생산 해서 완제품 리스트 
        public DataTable fn_생산모니터링(string condition)
        {
            StringBuilder sb = new StringBuilder();
            //이재원 수정 0622
            sb.AppendLine("  select A.INPUT_DATE ");
            sb.AppendLine("  ,A.INPUT_CD   ");
            sb.AppendLine("  ,B.ITEM_NM    ");
            sb.AppendLine("  ,B.SPEC       ");
            sb.AppendLine("  ,A.LOT_NO     ");
            sb.AppendLine("  ,A.ITEM_CD    ");
            sb.AppendLine("  ,A.LOT_SUB    ");
            sb.AppendLine("  ,A.SEQ        ");
            sb.AppendLine("  ,A.CURR_AMT   ");
            sb.AppendLine("  ,A.INPUT_AMT  ");
            sb.AppendLine("  ,C.CUST_CD    ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE C.CUST_CD = CUST_CD) AS CUST_NM ");
            sb.AppendLine("  ,D.STAFF_NM as WORKER_NM     ");
            sb.AppendLine("  ,C.INSTAFF AS WORKER         ");
            sb.AppendLine("   from F_ITEM_INPUT AS A      ");
            sb.AppendLine("  inner join N_ITEM_CODE AS B  on B.ITEM_CD=A.ITEM_CD ");
            sb.AppendLine("  left outer join F_WORK_FLOW_DETAIL C ");
            sb.AppendLine("  on C.LOT_NO = A.LOT_NO       ");
            sb.AppendLine("  and C.LOT_SUB = A.LOT_SUB    ");
            sb.AppendLine("  and C.F_STEP = A.F_STEP      ");
            sb.AppendLine("  and C.FLOW_CD = A.FLOW_CD    ");
            sb.AppendLine("  left join N_STAFF_CODE as D on D.STAFF_CD=C.INSTAFF ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("  order by A.INTIME DESC ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        #region insert

        public int insertStaff(
             string txt_user_cd
            , string txt_user_nm
            , string dept_cd
            , string pos_cd
            , string stor_cd
            , string join_date
            , string txt_phone
            , string txt_login
            , string txt_pw
            , string join_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();



                sb.AppendLine(" select ");
                sb.AppendLine("(select COUNT(*) from N_STAFF_CODE where STAFF_CD = '" + txt_user_cd + "' ) as cnt ");
                sb.AppendLine(",(select COUNT(*) from N_STAFF_CODE where LOGIN_ID = '" + txt_login + "') as id ");
                //sb.AppendLine(",(select COUNT(*) from N_STAFF_CODE where PW = 1) as pw ");
                sb.AppendLine("from N_STAFF_CODE  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }

                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                if (!dt.Rows[0]["id"].ToString().Equals("0"))
                {
                    return 4;
                }
                //if (!dt.Rows[0]["pw"].ToString().Equals("0"))
                //{
                //    return 5;
                //}

                sb = new StringBuilder();
                sb.AppendLine("insert into N_STAFF_CODE(");
                sb.AppendLine("     STAFF_CD ");
                sb.AppendLine("     ,STAFF_NM ");
                sb.AppendLine("     ,JOIN_DATE ");
                sb.AppendLine("     ,PHONE_NUM ");
                sb.AppendLine("     ,DEPT_CD ");
                sb.AppendLine("     ,POS_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,LOGIN_ID ");
                sb.AppendLine("     ,PW ");
                sb.AppendLine("     ,JOIN_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @STAFF_CD ");
                sb.AppendLine(" ,@STAFF_NM ");
                sb.AppendLine(" ,@JOIN_DATE ");
                sb.AppendLine(" ,@PHONE_NUM ");
                sb.AppendLine(" ,@DEPT_CD ");
                sb.AppendLine(" ,@POS_CD ");
                sb.AppendLine(" ,@STORAGE_CD ");
                sb.AppendLine(" ,@LOGIN_ID ");
                sb.AppendLine(" ,@PW ");//HASHBYTES('SHA2_512' , '123456')
                sb.AppendLine(" ,@JOIN_CD ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");


                sb.AppendLine(" delete N_AUTH_SUB where STAFF_CD='" + txt_user_cd + "' ");
                sb.AppendLine(" insert into N_AUTH_SUB (TopID,SubID,STAFF_CD,AUTH_YN,INSTAFF,INTIME,rgstr_yn,del_yn) ");
                sb.AppendLine(" select TopID,SubID,'" + txt_user_cd + "','N','" + Common.p_strStaffNo + "',convert(varchar, getdate(), 120),'N','N' from T_SubMenu ");


                sb.AppendLine(" delete N_AUTH_TOP where STAFF_CD='" + txt_user_cd + "' ");
                sb.AppendLine(" insert into N_AUTH_TOP (TopID,STAFF_CD,AUTH_YN,INSTAFF,INTIME) ");
                sb.AppendLine(" select TopID,'" + txt_user_cd + "','N','" + Common.p_strStaffNo + "',convert(varchar, getdate(), 120)    from T_TopMenu ");


                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);
                sCommand.Parameters.AddWithValue("@STAFF_NM", txt_user_nm);
                sCommand.Parameters.AddWithValue("@JOIN_DATE", join_date);
                sCommand.Parameters.AddWithValue("@PHONE_NUM", txt_phone);
                sCommand.Parameters.AddWithValue("@DEPT_CD", dept_cd);
                sCommand.Parameters.AddWithValue("@POS_CD", pos_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", stor_cd);
                sCommand.Parameters.AddWithValue("@LOGIN_ID", txt_login);
                sCommand.Parameters.AddWithValue("@PW", txt_pw);
                sCommand.Parameters.AddWithValue("@JOIN_CD", join_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }




        public int insertMold(
           string txt_mold_num
          , string txt_mold_nm
          , string txt_weight
          , string cmb_gubun
          , string cmb_storage
          , string dtp_start_date
          , string comment
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();



                //if (!dt.Rows[0]["pw"].ToString().Equals("0"))
                //{
                //    return 5;
                //}

                sb = new StringBuilder();
                sb.AppendLine("insert into N_MOLD_CODE(");
                sb.AppendLine("      MOLD_NO");
                sb.AppendLine("     ,MOLD_NM  ");
                sb.AppendLine("     ,WEIGHT  ");
                sb.AppendLine("     ,MOLD_GUBUN  ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,INPUT_DATE ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @MOLD_NO ");
                sb.AppendLine(" ,@MOLD_NM ");
                sb.AppendLine(" ,@WEIGHT ");
                sb.AppendLine(" ,@MOLD_GUBUN ");
                sb.AppendLine(" ,@STORAGE_CD ");
                sb.AppendLine(" ,@INPUT_DATE ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@MOLD_NO", txt_mold_num);
                sCommand.Parameters.AddWithValue("@MOLD_NM", txt_mold_nm);
                sCommand.Parameters.AddWithValue("@WEIGHT", txt_weight);
                sCommand.Parameters.AddWithValue("@MOLD_GUBUN", cmb_gubun);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_storage);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", dtp_start_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }









        public int insertDept(string txtDeptCd, string txtDeptNm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_dept_code");
                sb.AppendLine(" where dept_cd = '" + txtDeptCd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_DEPT_CODE(");
                sb.AppendLine("     DEPT_CD ");
                sb.AppendLine("     ,DEPT_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @DEPT_CD ");
                sb.AppendLine(" ,@DEPT_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);
                sCommand.Parameters.AddWithValue("@DEPT_NM", txtDeptNm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertPos(string txt_pos_cd, string txt_pos_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_pos_code");
                sb.AppendLine(" where pos_cd = '" + txt_pos_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_POS_CODE(");
                sb.AppendLine("     POS_CD ");
                sb.AppendLine("     ,POS_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @POS_CD ");
                sb.AppendLine(" ,@POS_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);
                sCommand.Parameters.AddWithValue("@POS_NM", txt_pos_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertStor(string txt_stor_cd, string txt_stor_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_STORAGE_CODE");
                sb.AppendLine(" where STORAGE_CD = '" + txt_stor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_STORAGE_CODE(");
                sb.AppendLine("     STORAGE_CD ");
                sb.AppendLine("     ,STORAGE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @STORAGE_CD ");
                sb.AppendLine(" ,@STORAGE_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_NM", txt_stor_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        // 유형 코드 

        public int insertType(string txt_type_cd, string txt_type_nm, string chk_poor_yn, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_type_code");
                sb.AppendLine(" where type_cd = '" + txt_type_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_TYPE_CODE(");
                sb.AppendLine("     TYPE_CD ");
                sb.AppendLine("     ,TYPE_NM ");
                sb.AppendLine("     ,POOR_TYPE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @TYPE_CD ");
                sb.AppendLine(" ,@TYPE_NM ");
                sb.AppendLine(" ,@POOR_TYPE_YN ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);
                sCommand.Parameters.AddWithValue("@TYPE_NM", txt_type_nm);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_YN", chk_poor_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertUnit(string txt_unit_cd, string txt_unit_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_unit_code");
                sb.AppendLine(" where unit_cd = '" + txt_unit_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_UNIT_CODE(");
                sb.AppendLine("     UNIT_CD ");
                sb.AppendLine("     ,UNIT_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @UNIT_CD ");
                sb.AppendLine(" ,@UNIT_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);
                sCommand.Parameters.AddWithValue("@UNIT_NM", txt_unit_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertLine(string txt_line_cd, string txt_line_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_line_code");
                sb.AppendLine(" where line_cd = '" + txt_line_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_LINE_CODE(");
                sb.AppendLine("     LINE_CD ");
                sb.AppendLine("     ,LINE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @LINE_CD ");
                sb.AppendLine(" ,@LINE_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);
                sCommand.Parameters.AddWithValue("@LINE_NM", txt_line_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertPoor(string txt_poor_cd, string txt_poor_nm, string chk_poor_cd, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_poor_code");
                sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_POOR_CODE(");
                sb.AppendLine("     POOR_CD ");
                sb.AppendLine("     ,POOR_NM ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @POOR_CD ");
                sb.AppendLine(" ,@POOR_NM ");
                sb.AppendLine(" ,@TYPE_CD ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);
                sCommand.Parameters.AddWithValue("@POOR_NM", txt_poor_nm);
                sCommand.Parameters.AddWithValue("@TYPE_CD", chk_poor_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertFlow(string txt_flow_cd
            , string txt_flow_nm
            , string cmb_stor
            , string chk_flow_yn
            , string chk_item_gbn
            , string chk_flow_chk_yn
            , string chk_temp_yn
            , string chk_mold_yn
            , string cmb_poor
            , string chk_manager_yn
            , string manager_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_flow_code");
                sb.AppendLine(" where flow_cd = '" + txt_flow_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FLOW_CODE(");
                sb.AppendLine("     FLOW_CD ");
                sb.AppendLine("     ,FLOW_NM ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,FLOW_INSERT_YN ");
                sb.AppendLine("     ,ITEM_IDEN_YN ");
                sb.AppendLine("     ,FLOW_CHK_YN ");
                sb.AppendLine("     ,TEMP_TIME_YN ");
                sb.AppendLine("     ,MOLD_YN ");
                sb.AppendLine("     ,POOR_TYPE_CD ");
                sb.AppendLine("     ,STAFF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     '"+txt_flow_cd+"' ");
                sb.AppendLine("     ,'"+txt_flow_nm+"' ");
                sb.AppendLine("     ,'"+cmb_stor+"' ");
                sb.AppendLine("     ,'"+chk_flow_yn+"'   ");
                sb.AppendLine("     ,'" + chk_item_gbn + "'   ");
                sb.AppendLine("     ,'"+chk_flow_chk_yn+"'   ");
                sb.AppendLine("     ,'"+chk_temp_yn+"'   ");
                sb.AppendLine("     ,'"+chk_mold_yn+"'   ");
                sb.AppendLine("     ,'"+cmb_poor+"'   ");
                sb.AppendLine("     ,'"+chk_manager_yn+"'   ");
                sb.AppendLine("     ,'"+manager_cd+"'   ");
                sb.AppendLine("     ,'"+comment+"'   ");             
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@FLOW_NM", txt_flow_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@FLOW_INSERT_YN", chk_flow_yn);
                sCommand.Parameters.AddWithValue("@ITEM_IDEN_YN", chk_item_gbn);
                sCommand.Parameters.AddWithValue("@FLOW_CHK_YN", chk_flow_chk_yn);
                sCommand.Parameters.AddWithValue("@TEMP_TIME_YN", chk_temp_yn);
                sCommand.Parameters.AddWithValue("@MOLD_YN", chk_mold_yn);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_CD", cmb_poor);
                sCommand.Parameters.AddWithValue("@STAFF_YN", chk_manager_yn);
                sCommand.Parameters.AddWithValue("@STAFF_CD", manager_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertRawMat(
              string txt_raw_mat_cd
            , string txt_raw_mat_nm
            , string txt_spec
            , string txt_quality
            , string cmb_rat_mat_gbn
            , string cmb_type
            , string cmb_input_unit
            , string cmb_output_unit
            , double txt_conver_ratio
            , double txt_input_price
            , double txt_output_price
            , string cmb_line
            , string st_status_yn
            , string cmb_raw_stor
            , string cmb_used
            , string cmb_cust
            , string cmb_raw_chk
            , string txt_part_no
            , string comment
            , string storage
            , string tax_cd
            , DataGridView dgv_cust
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_CODE");
                sb.AppendLine(" where RAW_MAT_CD = '" + txt_raw_mat_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_RAW_CODE(");
                sb.AppendLine("     RAW_MAT_CD ");
                sb.AppendLine("     ,RAW_MAT_NM ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,RAW_MAT_GUBUN ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,INPUT_UNIT ");
                sb.AppendLine("     ,OUTPUT_UNIT ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,CVR_RATIO ");
                sb.AppendLine("     ,INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE ");
                sb.AppendLine("     ,ST_STATUS_YN ");
                sb.AppendLine("     ,RAW_STORAGE ");
                sb.AppendLine("     ,EX_STAN_QUALITY ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,BASIC_STOCK ");
                sb.AppendLine("     ,BAL_STOCK ");
                sb.AppendLine("     ,CHECK_GUBUN ");
                sb.AppendLine("     ,PART_NO ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @RAW_MAT_CD ");
                sb.AppendLine("     ,@RAW_MAT_NM ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@RAW_MAT_GUBUN ");
                sb.AppendLine("     ,@TYPE_CD ");
                sb.AppendLine("     ,@INPUT_UNIT ");
                sb.AppendLine("     ,@OUTPUT_UNIT ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@CVR_RATIO ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@OUTPUT_PRICE ");
                sb.AppendLine("     ,@ST_STATUS_YN ");
                sb.AppendLine("     ,@RAW_STORAGE ");
                sb.AppendLine("     ,@EX_STAN_QUALITY ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,'0' ");
                sb.AppendLine("     ,'0' ");
                sb.AppendLine("     ,@CHECK_GUBUN ");
                sb.AppendLine("     ,@PART_NO ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@TAX_CD ");
                sb.AppendLine(" ) ");


                /*원자재등록페이지_다중거래처등록*/
                if (dgv_cust.Rows.Count > 0)
                {
                    for (int i = 0; i < dgv_cust.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_RAW_CUST ");
                        sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        //sb.AppendLine("where CUST_CD = '" + (string)conCustGrid.Rows[i].Cells["CUSTCD"].Value + "' ");

                        sb.AppendLine("insert into N_RAW_CUST(");
                        sb.AppendLine("            RAW_MAT_CD ");
                        sb.AppendLine("     ,      CUST_CD ");
                        sb.AppendLine("     ,      MAIN_YN ");
                        sb.AppendLine("     ,      SEQ ");
                        sb.AppendLine("     ,      COMMENT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     ,'" + (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value + "' ");
                        if ((bool)dgv_cust.Rows[i].Cells["CHK"].Value)
                        {
                            sb.AppendLine("   ,'Y'");
                            cmb_cust = (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value;
                        }
                        else
                        {
                            sb.AppendLine("   ,'N'");
                        }

                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine(" ,'" + dgv_cust.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                        sb.AppendLine("  )");

                        sb.AppendLine("INSERT INTO N_PRICE_INFO ( ");
                        sb.AppendLine("CUST_CD,                                           ");
                        sb.AppendLine("PROD_CD,                                           ");
                        sb.AppendLine("B_BOX_PRICE,                                       ");
                        sb.AppendLine("S_BOX_PRICE,                                       ");
                        sb.AppendLine("UNIT_PRICE,                                        ");
                        sb.AppendLine("INSTAFF,                                           ");
                        sb.AppendLine("INTIME,                                            ");
                        sb.AppendLine("P_GUBUN )                                          ");
                        sb.AppendLine("VALUES (                                           ");
                        sb.AppendLine("     '" + (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value + "' ");
                        sb.AppendLine(" , '" + txt_raw_mat_cd + "'");
                        sb.AppendLine(" , '0'");
                        sb.AppendLine(" , '0'");
                        sb.AppendLine(" , @INPUT_PRICE ");
                        sb.AppendLine("  , '" + Common.p_strUserNo + "'  ");
                        sb.AppendLine("  , convert(varchar, getdate(), 120)   ");
                        sb.AppendLine("  , '1'   ");
                        sb.AppendLine("  )");

                    }
                }
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", txt_raw_mat_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@RAW_MAT_GUBUN", cmb_rat_mat_gbn);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@INPUT_UNIT", cmb_input_unit);
                sCommand.Parameters.AddWithValue("@OUTPUT_UNIT", cmb_output_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@CVR_RATIO", txt_conver_ratio);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@ST_STATUS_YN", st_status_yn);
                sCommand.Parameters.AddWithValue("@RAW_STORAGE", storage);
                sCommand.Parameters.AddWithValue("@EX_STAN_QUALITY", txt_quality);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@CHECK_GUBUN", cmb_raw_chk);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@TAX_CD", tax_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_MAT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                Console.WriteLine(e.Message + "/" + e.ToString());
                return 9;
            }
        }

        public int insertFac(
              string txt_fac_cd
            , string txt_fac_nm
            , string txt_model_nm
            , string txt_spec
            , string txt_manu_comp
            , string txt_acq_date
            , string txt_acq_price
            , string cmb_dept
            , string txt_used
            , string txt_pro_capa
            , string txt_power_num
            , string cmb_mainten)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_FAC_CODE");
                sb.AppendLine(" where FAC_CD = '" + txt_fac_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FAC_CODE(");
                sb.AppendLine("     FAC_CD ");
                sb.AppendLine("     ,FAC_NM ");
                sb.AppendLine("     ,MODEL_NM ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,MANU_COMPANY ");
                sb.AppendLine("     ,ACQ_DATE ");
                sb.AppendLine("     ,ACQ_PRICE ");
                sb.AppendLine("     ,DEPT_CD ");
                sb.AppendLine("     ,USED ");
                sb.AppendLine("     ,PRO_CAPA ");
                sb.AppendLine("     ,POWER_NUMBER ");
                sb.AppendLine("     ,MAINTEN_CLASS ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @FAC_CD ");
                sb.AppendLine("     ,@FAC_NM ");
                sb.AppendLine("     ,@MODEL_NM ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@MANU_COMPANY ");
                sb.AppendLine("     ,@ACQ_DATE ");
                sb.AppendLine("     ,@ACQ_PRICE ");
                sb.AppendLine("     ,@DEPT_CD ");
                sb.AppendLine("     ,@USED ");
                sb.AppendLine("     ,@PRO_CAPA ");
                sb.AppendLine("     ,@POWER_NUMBER ");
                sb.AppendLine("     ,@MAINTEN_CLASS ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_fac_cd);
                sCommand.Parameters.AddWithValue("@FAC_NM", txt_fac_nm);
                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@MANU_COMPANY", txt_manu_comp);
                sCommand.Parameters.AddWithValue("@ACQ_DATE", txt_acq_date);
                sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_acq_price);
                sCommand.Parameters.AddWithValue("@DEPT_CD", cmb_dept);
                sCommand.Parameters.AddWithValue("@USED", txt_used);
                sCommand.Parameters.AddWithValue("@PRO_CAPA", txt_pro_capa);
                sCommand.Parameters.AddWithValue("@POWER_NUMBER", txt_power_num);
                sCommand.Parameters.AddWithValue("@MAINTEN_CLASS", cmb_mainten);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        //거래처 등록 

        //거래처 등록 

        public int insertCust(
              string txt_cust_cd
            , string cust_gbn
            , string txt_cust_nm
            , string txt_owner
            , string txt_saup_no
            , string txt_uptae
            , string txt_jong
            , string txt_deal_type
            , string txt_post_no
            , string txt_addr
            , string txt_cust_manager
            , string txt_email
            , string txt_comp_phone
            , string txt_phone
            , string txt_fax
            , string txt_start_date
            , string cmb_manager
            , string cmb_used
            , string comment
            , string tax_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_CUST_CODE");
                sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "'");
                sb.AppendLine(" and CUST_GUBUN = '" + cust_gbn + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_CUST_CODE(");
                sb.AppendLine("     CUST_CD ");
                sb.AppendLine("     ,CUST_GUBUN ");
                sb.AppendLine("     ,CUST_NM ");
                sb.AppendLine("     ,OWNER ");
                sb.AppendLine("     ,SAUP_NO ");
                sb.AppendLine("     ,UPTAE ");
                sb.AppendLine("     ,JONGMOK ");
                sb.AppendLine("     ,DEAL_TYPE ");
                sb.AppendLine("     ,POST_NO ");
                sb.AppendLine("     ,ADDR ");
                sb.AppendLine("     ,CUST_MANAGER ");
                sb.AppendLine("     ,CUST_EMAIL ");
                sb.AppendLine("     ,CUST_COMP_PHONE ");
                sb.AppendLine("     ,CUST_PHONE ");
                sb.AppendLine("     ,CUST_FAX ");
                sb.AppendLine("     ,CUST_OPEN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @CUST_CD ");
                sb.AppendLine("     ,@CUST_GUBUN ");
                sb.AppendLine("     ,@CUST_NM ");
                sb.AppendLine("     ,@OWNER ");
                sb.AppendLine("     ,@SAUP_NO ");
                sb.AppendLine("     ,@UPTAE ");
                sb.AppendLine("     ,@JONGMOK ");
                sb.AppendLine("     ,@DEAL_TYPE ");
                sb.AppendLine("     ,@POST_NO ");
                sb.AppendLine("     ,@ADDR ");
                sb.AppendLine("     ,@CUST_MANAGER ");
                sb.AppendLine("     ,@CUST_EMAIL ");
                sb.AppendLine("     ,@CUST_COMP_PHONE ");
                sb.AppendLine("     ,@CUST_PHONE ");
                sb.AppendLine("     ,@CUST_FAX ");
                sb.AppendLine("     ,@CUST_OPEN ");
                sb.AppendLine("     ,@STAFF_CD ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@TAX_CD ");
                sb.AppendLine(" ) ");

                if (cust_gbn.ToString() == "1")
                {
                    sb.AppendLine("insert into N_PRICE_INFO(");
                    sb.AppendLine("CUST_CD");
                    sb.AppendLine(", PROD_CD");
                    sb.AppendLine(", B_BOX_PRICE");
                    sb.AppendLine(", S_BOX_PRICE");
                    sb.AppendLine(", UNIT_PRICE");
                    sb.AppendLine(", INSTAFF");
                    sb.AppendLine(", INTIME");
                    sb.AppendLine(", P_GUBUN");
                    sb.AppendLine(" ) select ");
                    sb.AppendLine("@CUST_CD");
                    sb.AppendLine(", ITEM_CD ");
                    sb.AppendLine(", 0");
                    sb.AppendLine(", 0");
                    sb.AppendLine(", 0");
                    sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(", '2'");
                    sb.AppendLine(" from N_ITEM_CODE");
                }
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                sCommand.Parameters.AddWithValue("@CUST_NM", txt_cust_nm);
                sCommand.Parameters.AddWithValue("@OWNER", txt_owner);
                sCommand.Parameters.AddWithValue("@SAUP_NO", txt_saup_no);
                sCommand.Parameters.AddWithValue("@UPTAE", txt_uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", txt_jong);
                sCommand.Parameters.AddWithValue("@DEAL_TYPE", txt_deal_type);
                sCommand.Parameters.AddWithValue("@POST_NO", txt_post_no);
                sCommand.Parameters.AddWithValue("@ADDR", txt_addr);
                sCommand.Parameters.AddWithValue("@CUST_MANAGER", txt_cust_manager);
                sCommand.Parameters.AddWithValue("@CUST_EMAIL", txt_email);
                sCommand.Parameters.AddWithValue("@CUST_COMP_PHONE", txt_comp_phone);
                sCommand.Parameters.AddWithValue("@CUST_PHONE", txt_phone);
                sCommand.Parameters.AddWithValue("@CUST_FAX", txt_fax);
                sCommand.Parameters.AddWithValue("@CUST_OPEN", txt_start_date);
                sCommand.Parameters.AddWithValue("@STAFF_cD", cmb_manager);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@TAX_CD", tax_cd);
                
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_CUST_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }





        public int insertItem(
              string txt_item_cd
            , string txt_item_nm
            , string cmb_item_gbn
            , string txt_spec
            , string cmb_type
            , string cmb_line
            , string cmb_unit
            , string cmb_stor_loc
            , double txt_prop_stock
            , double txt_item_weight
            , double txt_input_price
            , double txt_output_price
            , double txt_char_amt
            , double txt_pack_amt
            , string cmb_cust
            , string chk_print_yn
            , string cmb_used
            , string input_date
            , string box_bar_cd
            , string box_amt
            , string unit_bar_cd
            , string unit_amt
            , string comment
            , string txt_link
            , string txt_vat_cd
            , conDataGridView comp_dgv
            , conDataGridView flow_dgv
            , conDataGridView half_dgv
            , DataGridView 도면등록_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_ITEM_CODE");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("insert into N_ITEM_CODE(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,STOCK_LOC ");
                sb.AppendLine("     ,PROP_STOCK ");
                sb.AppendLine("     ,BAL_STOCK ");
                sb.AppendLine("     ,BASIC_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,PRINT_YN ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,LINK_CD ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @ITEM_CD ");
                sb.AppendLine("     ,@ITEM_NM ");
                sb.AppendLine("     ,@ITEM_GUBUN ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@TYPE_CD ");
                sb.AppendLine("     ,@UNIT_CD ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@STOCK_LOC ");
                sb.AppendLine("     ,@PROP_STOCK ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,@ITEM_WEIGHT ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@OUTPUT_PRICE ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@PRINT_YN ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@INPUT_DATE ");
                sb.AppendLine("     ,@BOX_BAR_CD ");
                sb.AppendLine("     ,@BOX_AMT ");
                sb.AppendLine("     ,@UNIT_BAR_CD ");
                sb.AppendLine("     ,@UNIT_AMT ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@LINK_CD ");
                sb.AppendLine("     ,@VAT_CD ");
                sb.AppendLine(" ) ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_COMP(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }

                if (flow_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @f_seq" + i + " int ");
                        sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_FLOW(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,BOX_AMT ");
                        sb.AppendLine("     ,CVR_RATIO ");
                        sb.AppendLine("     ,CHARGE_AMT ");
                        sb.AppendLine("     ,ITEM_IDEN_YN ");
                        sb.AppendLine("     ,FLOW_SEQ ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@f_seq" + i + " ");
                        sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                        sb.AppendLine("     ,0 ");
                        sb.AppendLine("     ,0 ");
                        sb.AppendLine("     ,0");
                        if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                        {
                            sb.AppendLine("     ,'Y' ");
                        }
                        else
                        {
                            sb.AppendLine("     ,'N' ");
                        }
                        sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_SEQ"].Value + "' "); //공정순서 추가
                        sb.AppendLine("  )");
                    }
                }

                if (half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @h_seq" + i + " int ");
                        sb.AppendLine("select @h_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP_HALF ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_COMP_HALF(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@h_seq" + i + " ");
                        sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }

                sb.AppendLine("insert into N_PRICE_INFO(");
                sb.AppendLine("CUST_CD");
                sb.AppendLine(", PROD_CD");
                sb.AppendLine(", B_BOX_PRICE");
                sb.AppendLine(", S_BOX_PRICE");
                sb.AppendLine(", UNIT_PRICE");
                sb.AppendLine(", INSTAFF");
                sb.AppendLine(", INTIME");
                sb.AppendLine(", P_GUBUN");
                sb.AppendLine(" ) select ");
                sb.AppendLine("CUST_CD");
                sb.AppendLine("      ,'" + txt_item_cd + "' ");
                sb.AppendLine(", 0");
                sb.AppendLine(", 0");
                sb.AppendLine(", 0");
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine(", '2'");
                sb.AppendLine(" from N_CUST_CODE");
                sb.AppendLine(" where CUST_GUBUN = '1'");

                string dtp_input_date = DateTime.Now.ToString("yyyy-MM-dd");
                byte[] img;

                if (도면등록_dgv.Rows.Count > 0)
                {
                    sb.AppendLine("declare @INPUT_CD int ");
                    for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                    {
                        img = null;

                        sb.AppendLine("select @INPUT_CD=ISNULL(MAX(INPUT_CD),0)+1 from F_DOCUMENT ");
                        sb.AppendLine("where INPUT_DATE = '" + dtp_input_date + "' ");

                        sb.AppendLine("and IMG_GUBUN =  '1' ");

                        sb.AppendLine("insert into F_DOCUMENT(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,IMG_GUBUN ");
                        sb.AppendLine("     ,STAFF_CD ");
                        sb.AppendLine("     IMG_PATH ");
                        sb.AppendLine("     ,IMG_NAME ");
                        sb.AppendLine("     INTIME ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,IMG ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     ,'" + dtp_input_date + "' ");
                        sb.AppendLine("     ,@INPUT_CD ");
                        sb.AppendLine("     ,@IMG_GUBUN ");
                        sb.AppendLine("     ,@STAFF_CD ");
                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["IMG_NAME"].Value.ToString() + " ");
                        sb.AppendLine("     , convert(varchar,getdate(),120) ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");

                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["PIC_PATH"].Value.ToString() + "' ");
                        sb.AppendLine("     ,@ITEM_CD ");
                        sb.AppendLine("  )");


                    }
                }
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);

                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@LINK_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@VAT_CD", txt_vat_cd);

                
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertItem(
      string txt_item_cd
    , string txt_item_nm
    , string cmb_item_gbn
    , string txt_spec
    , string cmb_type
    , string cmb_line
    , string cmb_unit
    , string cmb_stor_loc
    , double txt_prop_stock
    , double txt_item_weight
    , double txt_input_price
    , double txt_output_price
    , double txt_char_amt
    , double txt_pack_amt
    , string cmb_cust
    , string chk_print_yn
    , string cmb_used
    , string input_date
    , string box_bar_cd
    , string box_amt
    , string unit_bar_cd
    , string unit_amt
    , string comment
    , string txt_link
    , string txt_vat_cd
    , conDataGridView comp_dgv
    , conDataGridView flow_dgv
    , conDataGridView half_dgv
    , DataGridView 도면등록_dgv
    , string mold)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_ITEM_CODE");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("insert into N_ITEM_CODE(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,STOCK_LOC ");
                sb.AppendLine("     ,PROP_STOCK ");
                sb.AppendLine("     ,BAL_STOCK ");
                sb.AppendLine("     ,BASIC_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,PRINT_YN ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,LINK_CD ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine("     ,MOLD_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @ITEM_CD ");
                sb.AppendLine("     ,@ITEM_NM ");
                sb.AppendLine("     ,@ITEM_GUBUN ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@TYPE_CD ");
                sb.AppendLine("     ,@UNIT_CD ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@STOCK_LOC ");
                sb.AppendLine("     ,@PROP_STOCK ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,@ITEM_WEIGHT ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@OUTPUT_PRICE ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@PRINT_YN ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@INPUT_DATE ");
                sb.AppendLine("     ,@BOX_BAR_CD ");
                sb.AppendLine("     ,@BOX_AMT ");
                sb.AppendLine("     ,@UNIT_BAR_CD ");
                sb.AppendLine("     ,@UNIT_AMT ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@LINK_CD ");
                sb.AppendLine("     ,@VAT_CD ");
                sb.AppendLine("     ,@MOLD_CD ");
                sb.AppendLine(" ) ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_COMP(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }

                if (flow_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @f_seq" + i + " int ");
                        sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_FLOW(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,BOX_AMT ");
                        sb.AppendLine("     ,CVR_RATIO ");
                        sb.AppendLine("     ,CHARGE_AMT ");
                        sb.AppendLine("     ,ITEM_IDEN_YN ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@f_seq" + i + " ");
                        sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                        sb.AppendLine("     ,0 ");
                        sb.AppendLine("     ,0 ");
                        sb.AppendLine("     ,0");
                        if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                        {
                            sb.AppendLine("     ,'Y' ");
                        }
                        else
                        {
                            sb.AppendLine("     ,'N' ");
                        }

                        sb.AppendLine("  )");
                    }
                }

                if (half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @h_seq" + i + " int ");
                        sb.AppendLine("select @h_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP_HALF ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_COMP_HALF(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@h_seq" + i + " ");
                        sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }
                string dtp_input_date = DateTime.Now.ToString("yyyy-MM-dd");
                byte[] img;

                if (도면등록_dgv.Rows.Count > 0)
                {
                    sb.AppendLine("declare @INPUT_CD int ");
                    for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                    {
                        img = null;

                        sb.AppendLine("select @INPUT_CD=ISNULL(MAX(INPUT_CD),0)+1 from F_DOCUMENT ");
                        sb.AppendLine("where INPUT_DATE = '" + dtp_input_date + "' ");

                        sb.AppendLine("and IMG_GUBUN =  '1' ");

                        sb.AppendLine("insert into F_DOCUMENT(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,IMG_GUBUN ");
                        sb.AppendLine("     ,STAFF_CD ");
                        sb.AppendLine("     IMG_PATH ");
                        sb.AppendLine("     ,IMG_NAME ");
                        sb.AppendLine("     INTIME ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,IMG ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     ,'" + dtp_input_date + "' ");
                        sb.AppendLine("     ,@INPUT_CD ");
                        sb.AppendLine("     ,@IMG_GUBUN ");
                        sb.AppendLine("     ,@STAFF_CD ");
                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["IMG_NAME"].Value.ToString() + " ");
                        sb.AppendLine("     , convert(varchar,getdate(),120) ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");

                        sb.AppendLine("     ,'" + 도면등록_dgv.Rows[i].Cells["PIC_PATH"].Value.ToString() + "' ");
                        sb.AppendLine("     ,@ITEM_CD ");
                        sb.AppendLine("  )");


                    }
                }
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);

                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@LINK_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@VAT_CD", txt_vat_cd);
                sCommand.Parameters.AddWithValue("@MOLD_CD", mold);

                
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }




        //공정검사 항목 
        public int insertRawChk(
              string txt_raw_mat_cd
            , string txt_control_no
            , conDataGridView raw_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_CHK");
                sb.AppendLine(" where RAW_MAT_CD = '" + txt_raw_mat_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_RAW_CHK(");
                sb.AppendLine("     RAW_MAT_CD ");
                sb.AppendLine("     ,CONTROL_NO ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @RAW_MAT_CD ");
                sb.AppendLine("     ,@CONTROL_NO ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (raw_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < raw_chk_dgv.Rows.Count; i++)
                    {

                        sb.AppendLine("insert into N_RAW_CHK_STAN(");
                        sb.AppendLine("     RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_STAN_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //공정검사 항목 
        public int insertFlowChk(
              string txt_item_cd
            , string txt_flow_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_FLOW_CHK");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");
                sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FLOW_CHK(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("     ,MEASURE_CNT ");
                //sb.AppendLine("     ,ITEM_IMG ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ITEM_CD ");
                sb.AppendLine("     ,@FLOW_CD ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                //sb.AppendLine("     ,@ITEM_IMG ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (flow_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_FLOW_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_METHOD = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_FLOW_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_METHOD ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + txt_flow_cd + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);
                //sCommand.Parameters.AddWithValue("@ITEM_IMG", txt_item_img);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertFlowChkExam(
             string txt_lot_no
           , string txt_lot_sub
           , string txt_f_step
           , string txt_item_cd
           , string txt_flow_cd
           , string txt_sub_amt
           , string txt_measure_cnt
           , int startIdx
           , Label lblSearch
           , byte[] img
           , int img_size
           , DataGridView flow_chk_dgv
            , string path
        )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_FLOW_CHK");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "'");
                sb.AppendLine("     and LOT_SUB = '" + txt_lot_sub + "' ");
                sb.AppendLine("     and F_STEP = '" + txt_f_step + "' ");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                string f_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_FLOW_CHK(");
                sb.AppendLine("     LOT_NO ");
                sb.AppendLine("     ,LOT_SUB ");
                sb.AppendLine("     ,F_STEP ");
                sb.AppendLine("     ,F_CHK_DATE ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("     ,F_SUB_AMT ");
                sb.AppendLine("     ,MEASURE_CNT ");
                sb.AppendLine("     ,MAP ");
                sb.AppendLine("     ,MAP_SIZE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,EXTERIOR ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      ,'" + txt_lot_sub + "' ");
                sb.AppendLine("      ,'" + txt_f_step + "' ");
                sb.AppendLine("      ,'" + f_chk_date + "' ");
                sb.AppendLine("      ,'" + txt_item_cd + "' ");
                sb.AppendLine("      ,'" + txt_flow_cd + "' ");
                sb.AppendLine("      ,'" + txt_sub_amt.Replace(",", "") + "' ");
                sb.AppendLine("      ,'" + txt_measure_cnt.Replace(",", "") + "' ");

                if (img_size > 0)
                {
                    sb.AppendLine("     ,@MAP ");
                    sb.AppendLine("     ,@MAP_SIZE ");

                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + path + "' ");
                sb.AppendLine(" ) ");



                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("insert into F_FLOW_CHK_RST(");
                    sb.AppendLine("     LOT_NO ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,F_STEP ");
                    sb.AppendLine("     ,CHK_CD ");
                    sb.AppendLine("     ,CHK_ORD ");
                    sb.AppendLine("     ,GRADE ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("     '" + txt_lot_no + "' ");
                    sb.AppendLine("     ,'" + txt_lot_sub + "' ");
                    sb.AppendLine("     ,'" + txt_f_step + "' ");

                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_ORD"].Value + "'  ");
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }
                    if ((string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value == "")
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "1";
                    }
                    sb.AppendLine("      , '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine("      , '" + (string)flow_chk_dgv.Rows[i].Cells["comment"].Value + "' ");
                    sb.AppendLine(" ) ");

                    int k = 1;


                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("insert into F_FLOW_CHK_DETAIL(");
                        sb.AppendLine("     LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,F_STEP ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("     '" + txt_lot_no + "' ");
                        sb.AppendLine("     ,'" + txt_lot_sub + "' ");
                        sb.AppendLine("     ,'" + txt_f_step + "' ");

                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                        sb.AppendLine("     , " + k + " "); //flow_chk_dgv.Columns[j].HeaderText.ToString()
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                        k++;
                    }
                }


                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'N' ");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "' ");
                sb.AppendLine("     and LOT_SUB = '" + txt_lot_sub + "' ");
                sb.AppendLine("     and F_STEP = '" + txt_f_step + "' ");
                Debug.WriteLine(sb);

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@F_CHK_DATE", f_chk_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@F_SUB_AMT", txt_sub_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt.Replace(",", ""));

                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        //수입검사 등록 
        public int insertRawChkExam(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string txt_raw_mat_cd
            , string txt_control_cd
            , string txt_part_no
            , string txt_chk_total_amt
            , string txt_pass_amt
            , string pri_non_pass_amt
            , string upd_com_amt
            , string final_non_pass_amt
            , string final_pass_amt
            , string comment
            , DataGridView rawStanGrid
            , DataGridView rawPoorGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_RAW_CHK");
                sb.AppendLine(" where INPUT_DATE = '" + txt_input_date + "'");
                sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                string r_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_RAW_CHK(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,CHK_DATE ");
                sb.AppendLine("     ,CONTROL_NO ");
                sb.AppendLine("     ,PART_NO ");
                sb.AppendLine("     ,CHK_TOTAL_AMT ");
                sb.AppendLine("     ,PASS_AMT ");
                sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,UPD_COM_AMT ");
                sb.AppendLine("     ,FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,FINAL_PASS_AMT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@INPUT_CD ");
                sb.AppendLine("     ,@SEQ ");
                sb.AppendLine("     ,@RAW_MAT_CD ");
                sb.AppendLine("     ,@CHK_DATE ");
                sb.AppendLine("     ,@CONTROL_NO ");
                sb.AppendLine("     ,@PART_NO ");
                sb.AppendLine("     ,@CHK_TOTAL_AMT ");
                sb.AppendLine("     ,@PASS_AMT ");
                sb.AppendLine("     ,@PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,@UPD_COM_AMT ");
                sb.AppendLine("     ,@FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,@FINAL_PASS_AMT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                if (rawStanGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawStanGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("insert into F_RAW_CHK_RST(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_input_date + "' ");
                        sb.AppendLine("      ," + txt_input_cd + " ");
                        sb.AppendLine("      ," + txt_seq + " ");
                        sb.AppendLine("      ,'" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("      ,'" + rawStanGrid.Rows[i].Cells["CHK_CD"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + rawStanGrid.Rows[i].Cells["CHK_VALUE"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" )");
                    }
                }

                if (rawPoorGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawPoorGrid.Rows.Count; i++)
                    {

                        sb.AppendLine("declare @p_seq" + i + " int ");
                        sb.AppendLine("select @p_seq" + i + " =ISNULL(MAX(POOR_SEQ),0)+1 from F_RAW_CHK_POOR ");
                        sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                        sb.AppendLine("insert into F_RAW_CHK_POOR(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,POOR_SEQ ");
                        sb.AppendLine("     ,TYPE_CD ");
                        sb.AppendLine("     ,POOR_NM ");
                        sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                        sb.AppendLine("     ,UPD_DETAIL ");
                        sb.AppendLine("     ,UPD_PASS_AMT ");
                        //sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_input_date + "' ");
                        sb.AppendLine("      ," + txt_input_cd + " ");
                        sb.AppendLine("      ," + txt_seq + " ");
                        sb.AppendLine("      ,@p_seq" + i + " ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                        // sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                    }
                }

                sb.AppendLine(" update F_RAW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'N' ");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@CHK_DATE", r_chk_date);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_cd);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);
                sCommand.Parameters.AddWithValue("@CHK_TOTAL_AMT", txt_chk_total_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PASS_AMT", txt_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PRI_NON_PASS_AMT", pri_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@UPD_COM_AMT", upd_com_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_NON_PASS_AMT", final_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_PASS_AMT", final_pass_amt.Replace(",", ""));

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }







        //제품검사 등록 
        public int insertItemChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string txt_item_cd
            , string txt_sub_amt
            , string txt_measure_cnt
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_ITEM_CHK");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "'");
                sb.AppendLine("     and LOT_SUB = '" + txt_lot_sub + "' ");
                sb.AppendLine("     and F_STEP = '" + txt_f_step + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                string f_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_ITEM_CHK(");
                sb.AppendLine("     LOT_NO ");
                sb.AppendLine("     ,LOT_SUB ");
                sb.AppendLine("     ,F_STEP ");
                sb.AppendLine("     ,F_CHK_DATE ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,F_SUB_AMT ");
                sb.AppendLine("     ,MEASURE_CNT ");
                sb.AppendLine("     ,PASS_YN ");
                sb.AppendLine("     ,MAP ");
                sb.AppendLine("     ,MAP_SIZE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @LOT_NO ");
                sb.AppendLine("     ,@LOT_SUB ");
                sb.AppendLine("     ,@F_STEP ");
                sb.AppendLine("     ,@F_CHK_DATE ");
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@F_SUB_AMT ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                sb.AppendLine("     ,'N' ");
                if (img_size > 0)
                {
                    sb.AppendLine("     ,@MAP ");
                    sb.AppendLine("     ,@MAP_SIZE ");

                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("insert into F_ITEM_CHK_RST(");
                    sb.AppendLine("     LOT_NO ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,F_STEP ");
                    sb.AppendLine("     ,CHK_CD ");
                    sb.AppendLine("     ,CHK_ORD ");
                    sb.AppendLine("     ,GRADE ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("      @LOT_NO ");
                    sb.AppendLine("     ,@LOT_SUB ");
                    sb.AppendLine("     ,@F_STEP ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_ORD"].Value + "'  ");
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }
                    sb.AppendLine("      , '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    int k = 1;
                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("insert into F_ITEM_CHK_DETAIL(");
                        sb.AppendLine("     LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,F_STEP ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @LOT_NO ");
                        sb.AppendLine("     ,@LOT_SUB ");
                        sb.AppendLine("     ,@F_STEP ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                        sb.AppendLine("     , " + k + " "); //flow_chk_dgv.Columns[j].HeaderText.ToString()
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                        k++;
                    }
                }

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set ITEM_CHECK_YN = 'N' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@F_CHK_DATE", f_chk_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@F_SUB_AMT", txt_sub_amt);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);

                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        //공정검사 항목 
        public int insertItemChk(
              string txt_item_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView item_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_ITEM_CHK");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_ITEM_CHK(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,MEASURE_CNT ");
                //sb.AppendLine("     ,ITEM_IMG ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ITEM_CD ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                //sb.AppendLine("     ,@ITEM_IMG ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (item_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_ITEM_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_INTERVAL = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_ITEM_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_INTERVAL ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);
                //sCommand.Parameters.AddWithValue("@ITEM_IMG", txt_item_img);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #region 검사항목 마스터 코드
        public int insertChk(
              string txt_chk_cd
            , string chk_gbn
            , string txt_chk_nm
            , string txt_chk_ord
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_CHK_CODE");
                sb.AppendLine(" where CHK_CD = '" + txt_chk_cd + "'");
                sb.AppendLine(" and CHK_GUBUN = '" + chk_gbn + "'");
                sb.AppendLine(" and CHK_ORD = '" + txt_chk_ord + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    //wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                }
                else
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 4;
                }

                //---------------------------
                sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_CHK_CODE");
                sb.AppendLine(" where CHK_CD = '" + txt_chk_cd + "'");
                sb.AppendLine(" and CHK_GUBUN = '" + chk_gbn + "'");

                sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_CHK_CODE(");
                sb.AppendLine("      CHK_CD ");
                sb.AppendLine("     ,CHK_GUBUN ");
                sb.AppendLine("     ,CHK_ORD ");
                sb.AppendLine("     ,CHK_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @CHK_CD ");
                sb.AppendLine("     ,@CHK_GUBUN ");
                sb.AppendLine("     ,@CHK_ORD ");
                sb.AppendLine("     ,@CHK_NM ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);
                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);
                sCommand.Parameters.AddWithValue("@CHK_ORD", txt_chk_ord);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_chk_nm);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        #endregion 검사항목 마스터 코드

        public int insertPlan(
              string plan_date
            , string txt_cust_cd
            , string deliver_req_date
            , string order_yn
            , string txt_plan_num
            , string comment
            , conDataGridView p_item_dgv
            , DataGridView p_half_dgv
            , string jumun_date
            , string jumun_cd
            , ArrayList jumun_date_Array
            , ArrayList Jumun_cd_array)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(PLAN_CD),0)+1 from F_PLAN ");
                sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");

                sb.AppendLine("insert into F_PLAN(");
                sb.AppendLine("     PLAN_DATE");
                sb.AppendLine("     ,PLAN_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,DELIVER_REQ_DATE ");
                sb.AppendLine("     ,STAFF_CD");
                sb.AppendLine("     ,ORDER_YN");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @PLAN_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@DELIVER_REQ_DATE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,@ORDER_YN ");
                sb.AppendLine("     ,'P' + '-' + '" + txt_plan_num + "' + '-' + RIGHT('000'+ convert(varchar, @seq), 3) "); //yyMMdd000n
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (p_item_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_item_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @item_seq" + i + " int ");
                        sb.AppendLine("select @item_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                        sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                        sb.AppendLine("and PLAN_CD =  @seq ");

                        sb.AppendLine("insert into F_PLAN_DETAIL(");
                        sb.AppendLine("     PLAN_DATE ");
                        sb.AppendLine("     ,PLAN_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,WORK_YN ");
                        sb.AppendLine("     ,F_LEVEL ");
                        sb.AppendLine("     ,DEFAULT_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + plan_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@item_seq" + i + " ");
                        sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,'N' ");
                        sb.AppendLine("      , 1 ");
                        sb.AppendLine("      , 1  ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                if (p_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                        sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                        sb.AppendLine("and PLAN_CD =  @seq ");

                        sb.AppendLine("insert into F_PLAN_DETAIL(");
                        sb.AppendLine("     PLAN_DATE ");
                        sb.AppendLine("     ,PLAN_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,WORK_YN ");
                        sb.AppendLine("     ,F_LEVEL ");
                        sb.AppendLine("     ,TOP_ITEM_CD ");
                        sb.AppendLine("     ,P_ITEM_CD ");
                        sb.AppendLine("     ,DEFAULT_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + plan_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["H_UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,'N' ");
                        sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["F_LEVEL"].Value).Replace(",", "") + "'  ");
                        sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["TOP_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["P_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["DEFAULT_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }


                sb.AppendLine("update F_JUMUN set ");
                sb.AppendLine("     PLAN_YN  = 'Y' ");
                sb.AppendLine("     , PLAN_DATE  = CONVERT(date,GETDATE()) ");
                sb.AppendLine("     , PLAN_CD  = @seq ");
                sb.AppendLine("    where JUMUN_DATE = '" + jumun_date + "' AND JUMUN_CD = '" + jumun_cd + "'  ");

                for (int i = 0; i < jumun_date_Array.Count; i++)
                {
                    sb.AppendLine("update F_JUMUN set ");
                    sb.AppendLine("     PLAN_YN  = 'Y' ");
                    sb.AppendLine("     , PLAN_DATE  = CONVERT(date,GETDATE()) ");
                    sb.AppendLine("     , PLAN_CD  = @seq ");
                    sb.AppendLine("    where JUMUN_DATE = '" + jumun_date_Array[i].ToString() + "' AND JUMUN_CD = '" + Jumun_cd_array[i].ToString() + "'  ");
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@PLAN_DATE", plan_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@DELIVER_REQ_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@ORDER_YN", order_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_PLAN_TB");
                if (qResult > 0)
                {
                    sb = new StringBuilder();
                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(PLAN_CD),0) from F_PLAN ");
                    sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");

                    sb.AppendLine("DECLARE	@return_value int ");
                    sb.AppendLine("EXEC	@return_value = [dbo].[SP_PLAN_GROUP] ");
                    sb.AppendLine("@PLAN_DATE = '" + plan_date + "',");
                    sb.AppendLine("@PLAN_CD = @seq, ");
                    sb.AppendLine("@STAFFCD = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("SELECT	'RV' = @return_value ");

                    sCommand = new SqlCommand(sb.ToString());

                    DataTable dt = wAdo.SqlCommandSelect(sCommand);
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["RV"].ToString().Equals("0"))
                        {
                            return 0;
                        }
                        else return 1;
                    }
                    else return 1;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString()); Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #region 지육 관련

        //지육 입고 테이블 출력
        public DataTable fn_Meat_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE");
            sb.AppendLine("     ,INPUT_CD ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine("     ,RAW_MAT_NM ");
            sb.AppendLine("     ,RAW_MAT_AMOUNT ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     ,INPUT_PRICE ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '2' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,RAW_MAT_WEIGHT ");
            sb.AppendLine("     ,OUTPUT_YN ");
            sb.AppendLine("     ,MF_DATE ");
            sb.AppendLine("     ,COUNTRY_ORIGIN ");
            sb.AppendLine("     ,(select FROZEN_NM from N_FROZEN_CODE where FROZEN_CD = A.FROZEN_GUBUN) as FROZEN_GUBUN ");
            sb.AppendLine("     ,EXPRT_DATE ");
            sb.AppendLine("     ,(select GRADE_NM from N_GRADE_CODE where GRADE_CD = A.GRADE) as GRADE ");
            sb.AppendLine("     ,UNION_CD ");
            sb.AppendLine(" from F_RAW_MEAT_INPUT A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by INPUT_DATE desc, INPUT_CD desc ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Meat_Detail_List(string condition)
        {
            //2019-10-31 이재원 컬럼 명칭을 수정하였음
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.GRADE");
            sb.AppendLine("     ,A.SEQ");
            sb.AppendLine("     ,A.INPUT_PRICE ");
            sb.AppendLine("     ,A.RAW_MAT_WEIGHT ");
            sb.AppendLine("     ,A.OUTPUT_YN ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine(" from F_RAW_MEAT_DETAIL A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");



            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int insertMeatOutCome(
            string txt_source_cd
           , conDataGridView comp_dgv
          )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_MEAT_SOURCE");
                sb.AppendLine(" where RAW_SOURCE_CD = '" + txt_source_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb = new StringBuilder();

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    sb.AppendLine("delete from N_RAW_MEAT_SOURCE    ");
                    sb.AppendLine("  where RAW_SOURCE_CD = '" + txt_source_cd + "' ");

                }




                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_RAW_MEAT_SOURCE ");
                        sb.AppendLine("where RAW_SOURCE_CD = '" + txt_source_cd + "' ");

                        sb.AppendLine("insert into N_RAW_MEAT_SOURCE(");
                        sb.AppendLine("     RAW_SOURCE_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,RAW_MAT_NM ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_source_cd + "' ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)comp_dgv.Rows[i].Cells["RAW_MAT_NM"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }



                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_MEAT_SOURCE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insert_Meat_Input(
              string meat_cd
            , string meat_nm
            , string meat_amount
            , string meat_weight
            , string meat_price
            , string input_date
            , string comment
            , string cust_cd
            , string complete_yn
            , string mf_date
            , string unioin_cd
            , string grade_gubun
            , string frozen_gubun
            , string country_origin
            , DataGridView sourceRawGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_MEAT_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                Console.WriteLine(sb.ToString());

                sb.AppendLine("insert into F_RAW_MEAT_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,RAW_MAT_NM");
                sb.AppendLine("     ,INPUT_PRICE");
                sb.AppendLine("     ,RAW_MAT_AMOUNT");
                sb.AppendLine("     ,RAW_MAT_WEIGHT ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,OUTPUT_YN ");
                sb.AppendLine("     ,MF_DATE ");
                sb.AppendLine("     ,EXPRT_DATE ");
                sb.AppendLine("     ,COUNTRY_ORIGIN ");
                sb.AppendLine("     ,FROZEN_GUBUN ");
                sb.AppendLine("     ,UNION_CD ");
                sb.AppendLine("     ,GRADE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@RAW_MAT_CD ");
                sb.AppendLine("     ,@RAW_MAT_NM ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@RAW_MAT_AMOUNT ");
                sb.AppendLine("     ,@RAW_MAT_WEIGHT ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@OUTPUT_YN ");
                sb.AppendLine("     ,@MF_DATE ");
                sb.AppendLine("     ,REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, ");
                sb.AppendLine("     (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ");
                sb.AppendLine("     ,@MF_DATE),120),'/','-') ");
                sb.AppendLine("     ,@COUNTRY_ORIGIN ");
                sb.AppendLine("     ,@FROZEN_GUBUN ");
                sb.AppendLine("     ,@UNION_CD ");
                sb.AppendLine("     ,@GRADE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");



                //2019-10-31 이재원 도입기업의 요구에 따라 테이블 구조를 수정하였음
                // 그에 따른 로직 변경
                if (sourceRawGrid.Rows.Count > 0)
                {
                    StringBuilder sb2 = new StringBuilder();
                    int count = 50;
                    for (int i = 0; i < sourceRawGrid.Rows.Count; i++)
                    {
                        if (sourceRawGrid.Rows[i].Cells["source_price"].Value == null)
                            sourceRawGrid.Rows[i].Cells["source_price"].Value = "0";
                        if (sourceRawGrid.Rows[i].Cells["source_weight"].Value == null)
                            sourceRawGrid.Rows[i].Cells["source_price"].Value = "0";


                        sb.AppendLine("declare @item_seq" + (count) + " int ");
                        sb.AppendLine("select @item_seq" + (count) + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_MEAT_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");
                        sb.AppendLine("insert into F_RAW_MEAT_DETAIL(");
                        sb.AppendLine("     INPUT_DATE");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,GRADE ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,INPUT_PRICE");
                        sb.AppendLine("     ,RAW_MAT_NM");
                        sb.AppendLine("     ,RAW_MAT_WEIGHT ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,UNION_CD ");
                        sb.AppendLine("     ,MF_DATE ");
                        sb.AppendLine("     ,COUNTRY_ORIGIN ");
                        sb.AppendLine("     ,FROZEN_GUBUN ");
                        sb.AppendLine("     ,EXPRT_DATE ");
                        sb.AppendLine("     ,OUTPUT_YN ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @INPUT_DATE ");
                        sb.AppendLine("     ,@seq ");
                        sb.AppendLine("     ,@item_seq" + (count++) + "  ");
                        sb.AppendLine("     ,@GRADE    ");
                        sb.AppendLine("     ,'" + sourceRawGrid.Rows[i].Cells["RAW_CD"].Value + "' ");
                        sb.AppendLine("     ,@CUST_CD ");
                        sb.AppendLine("     ," + sourceRawGrid.Rows[i].Cells["source_price"].Value + " ");
                        sb.AppendLine("     ,'" + sourceRawGrid.Rows[i].Cells["RAW_NM"].Value + "' ");
                        sb.AppendLine("     ," + sourceRawGrid.Rows[i].Cells["source_weight"].Value + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("     ,@UNION_CD  ");
                        sb.AppendLine("     ,@MF_DATE  ");
                        sb.AppendLine("     ,@COUNTRY_ORIGIN  ");
                        sb.AppendLine("     ,@FROZEN_GUBUN  ");
                        sb.AppendLine("     ,REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, ");
                        sb.AppendLine("     (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ");
                        sb.AppendLine("     ,@MF_DATE),120),'/','-') ");
                        sb.AppendLine("     ,@OUTPUT_YN ");

                        sb.AppendLine(" ) ");

                    }
                    if (complete_yn.Equals("1"))
                    {
                        sb.AppendLine("    declare @seqDetail int    ");
                        sb.AppendLine("    select @seqDetail = ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                        sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");


                        sb.AppendLine("     insert into F_RAW_INPUT(  ");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,COMPLETE_YN ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ) values ( ");
                        sb.AppendLine("     @INPUT_DATE ");
                        sb.AppendLine("     ,@seqDetail ");
                        sb.AppendLine("     ,@CUST_CD ");
                        sb.AppendLine("     ,@OUTPUT_YN ");
                        sb.AppendLine("     ,@COMMENT ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("     ) ");


                        sb.AppendLine(" insert into F_RAW_DETAIL( ");
                        sb.AppendLine(" INPUT_DATE ");
                        sb.AppendLine(" ,INPUT_CD  ");
                        sb.AppendLine(" ,SEQ  ");
                        sb.AppendLine(" ,RAW_MAT_CD  ");
                        sb.AppendLine(" ,UNIT_CD  ");
                        sb.AppendLine(" ,TEMP_AMT  ");
                        sb.AppendLine(" ,TOTAL_AMT  ");
                        sb.AppendLine(" ,CURR_AMT  ");
                        sb.AppendLine(" ,PRICE  ");
                        sb.AppendLine(" ,TOTAL_MONEY  ");
                        sb.AppendLine(" ,INSTAFF  ");
                        sb.AppendLine(" ,INTIME  ");
                        sb.AppendLine(" ,CHECK_YN  ");
                        sb.AppendLine(" ,COMPLETE_YN  ");

                        sb.AppendLine("     ,UNION_CD ");
                        sb.AppendLine("     ,MF_DATE ");
                        sb.AppendLine("     ,COUNTRY_ORIGIN ");
                        sb.AppendLine("     ,FROZEN_GUBUN ");
                        sb.AppendLine("     ,EXPRT_DATE ");
                        sb.AppendLine("     ,GRADE ");

                        sb.AppendLine(" )  ");
                        sb.AppendLine(" select INPUT_DATE   ");
                        sb.AppendLine(" ,@seqDetail  ");
                        sb.AppendLine(" ,ROW_NUMBER() over(order by seq)  ");
                        sb.AppendLine(" ,RAW_MAT_CD  ");
                        sb.AppendLine(" ,(select INPUT_UNIT from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD)  ");
                        sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '0' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                        sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '1' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                        sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '1' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                        sb.AppendLine(" , INPUT_PRICE  ");
                        sb.AppendLine(" , ((INPUT_PRICE/100) * RAW_MAT_WEIGHT) AS TOTAL_MONEY  ");
                        sb.AppendLine(" , INSTAFF  ");
                        sb.AppendLine(" , INTIME  ");
                        sb.AppendLine(" , (select case when CHECK_GUBUN = '1' then (select S_CODE from SM_FACTORY_COM.dbo.T_S_CODE where L_CODE = '610' and ORD = '1') else (select S_CODE from SM_FACTORY_COM.dbo.T_S_CODE where L_CODE = '610' and ORD = '4') end  from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD)  ");
                        sb.AppendLine(" , 'N'  ");
                        sb.AppendLine("     ,@UNION_CD  ");
                        sb.AppendLine("     ,@MF_DATE  ");
                        sb.AppendLine("     ,@COUNTRY_ORIGIN  ");
                        sb.AppendLine("     ,@FROZEN_GUBUN  ");
                        sb.AppendLine("     ,REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, ");
                        sb.AppendLine("     (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ");
                        sb.AppendLine("     ,@MF_DATE),120),'/','-') ");
                        sb.AppendLine("     ,@GRADE ");
                        sb.AppendLine("  from F_RAW_MEAT_DETAIL A  ");
                        sb.AppendLine("  where INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq and RAW_MAT_WEIGHT != 0  ");
                    }


                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", cust_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", meat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", meat_nm);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", meat_price);
                sCommand.Parameters.AddWithValue("@RAW_MAT_AMOUNT", meat_amount);
                sCommand.Parameters.AddWithValue("@RAW_MAT_WEIGHT", meat_weight);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@OUTPUT_YN", complete_yn);
                sCommand.Parameters.AddWithValue("@MF_DATE", mf_date);
                sCommand.Parameters.AddWithValue("@COUNTRY_ORIGIN", country_origin);
                sCommand.Parameters.AddWithValue("@FROZEN_GUBUN", frozen_gubun);
                sCommand.Parameters.AddWithValue("@UNION_CD", unioin_cd);
                sCommand.Parameters.AddWithValue("@GRADE", grade_gubun);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int Update_Meat_Input(
             string meat_cd
            , string meat_nm
            , string meat_amount
            , string meat_weight
            , string meat_price
            , string input_date
            , string input_cd
            , string comment
            , string cust_cd
            , string complete_yn
            , string mf_date
            , string unioin_cd
            , string grade_gubun
            , string frozen_gubun
            , string country_origin
            , DataGridView sourceRawGrid
            )
        {
            try
            {

                //2019-10-31 이재원 도입기업의 요구에 따라 테이블 구조를 수정하였음
                // 그에 따른 로직 변경

                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("Update F_RAW_MEAT_INPUT SET ");
                sb.AppendLine("     CUST_CD =  @CUST_CD   ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE   ");
                sb.AppendLine("     ,RAW_MAT_CD = @RAW_MAT_CD   ");
                sb.AppendLine("     ,RAW_MAT_NM = @RAW_MAT_NM   ");
                sb.AppendLine("     ,RAW_MAT_AMOUNT = @RAW_MAT_AMOUNT   ");
                sb.AppendLine("     ,RAW_MAT_WEIGHT = @RAW_MAT_WEIGHT   ");
                sb.AppendLine("     ,COMMENT = @COMMENT   ");
                sb.AppendLine("     ,MF_DATE = @MF_DATE   ");
                sb.AppendLine("     ,COUNTRY_ORIGIN = @COUNTRY_ORIGIN   ");
                sb.AppendLine("     ,FROZEN_GUBUN = @FROZEN_GUBUN   ");
                sb.AppendLine("     ,UNION_CD = @UNION_CD   ");
                sb.AppendLine("     ,GRADE = @GRADE   ");
                sb.AppendLine("     ,OUTPUT_YN  =  @OUTPUT_YN");
                sb.AppendLine("     ,EXPRT_DATE  =  REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ,@MF_DATE),120),'/','-')");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     WHERE INPUT_DATE = '" + input_date + "'    ");
                sb.AppendLine("     and INPUT_CD = '" + input_cd + "'   ");


                if (sourceRawGrid.Rows.Count > 0)
                {
                    StringBuilder sb2 = new StringBuilder();
                    int count = 50;
                    for (int i = 0; i < sourceRawGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("Update F_RAW_MEAT_DETAIL set  ");
                        sb.AppendLine("     CUST_CD = '" + cust_cd + "'   ");
                        sb.AppendLine("     ,INPUT_PRICE = " + sourceRawGrid.Rows[i].Cells["source_price"].Value.ToString().Replace(",", "") + "  ");
                        sb.AppendLine("     ,RAW_MAT_WEIGHT = " + sourceRawGrid.Rows[i].Cells["source_weight"].Value + "  ");
                        sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,UNION_CD = @UNION_CD   ");


                        sb.AppendLine("     ,MF_DATE = @MF_DATE   ");
                        sb.AppendLine("     ,COUNTRY_ORIGIN = @COUNTRY_ORIGIN   ");
                        sb.AppendLine("     ,FROZEN_GUBUN = @FROZEN_GUBUN   ");
                        sb.AppendLine("     ,GRADE = @GRADE   ");
                        sb.AppendLine("     ,OUTPUT_YN = @OUTPUT_YN   ");
                        sb.AppendLine("     ,EXPRT_DATE = REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ,@MF_DATE),120),'/','-')   ");



                        sb.AppendLine("     WHERE INPUT_DATE = '" + input_date + "'    ");
                        sb.AppendLine("     and INPUT_CD = '" + input_cd + "'   ");
                        sb.AppendLine("     and RAW_MAT_CD = '" + sourceRawGrid.Rows[i].Cells["RAW_CD"].Value + "'  ");
                    }
                }

                if (complete_yn.Equals("1"))
                {
                    sb.AppendLine("    declare @seqDetail int    ");
                    sb.AppendLine("    select @seqDetail = ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                    sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");


                    sb.AppendLine("     insert into F_RAW_INPUT(  ");
                    sb.AppendLine("     INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,CUST_CD ");
                    sb.AppendLine("     ,COMPLETE_YN ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine("     ) values ( ");
                    sb.AppendLine("     @INPUT_DATE ");
                    sb.AppendLine("     ,@seqDetail ");
                    sb.AppendLine("     ,@CUST_CD ");
                    sb.AppendLine("     ,@OUTPUT_YN ");
                    sb.AppendLine("     ,@COMMENT ");
                    sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine("     ) ");


                    sb.AppendLine(" insert into F_RAW_DETAIL( ");
                    sb.AppendLine(" INPUT_DATE ");
                    sb.AppendLine(" ,INPUT_CD  ");
                    sb.AppendLine(" ,SEQ  ");
                    sb.AppendLine(" ,RAW_MAT_CD  ");
                    sb.AppendLine(" ,UNIT_CD  ");
                    sb.AppendLine(" ,TEMP_AMT  ");
                    sb.AppendLine(" ,TOTAL_AMT  ");
                    sb.AppendLine(" ,CURR_AMT  ");
                    sb.AppendLine(" ,PRICE  ");
                    sb.AppendLine(" ,TOTAL_MONEY  ");
                    sb.AppendLine(" ,INSTAFF  ");
                    sb.AppendLine(" ,INTIME  ");
                    sb.AppendLine(" ,CHECK_YN  ");
                    sb.AppendLine(" ,COMPLETE_YN  ");

                    sb.AppendLine("     ,UNION_CD ");
                    sb.AppendLine("     ,MF_DATE ");
                    sb.AppendLine("     ,COUNTRY_ORIGIN ");
                    sb.AppendLine("     ,FROZEN_GUBUN ");
                    sb.AppendLine("     ,EXPRT_DATE ");
                    sb.AppendLine("     ,GRADE ");

                    sb.AppendLine(" )  ");
                    sb.AppendLine(" select INPUT_DATE   ");
                    sb.AppendLine(" ,@seqDetail  ");
                    sb.AppendLine(" ,ROW_NUMBER() over(order by seq)  ");
                    sb.AppendLine(" ,RAW_MAT_CD  ");
                    sb.AppendLine(" ,(select INPUT_UNIT from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD)  ");
                    sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '0' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                    sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '1' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                    sb.AppendLine(" , case when (select CHECK_GUBUN from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD) = '1' THEN 0 else A.RAW_MAT_WEIGHT end  ");
                    sb.AppendLine(" , INPUT_PRICE  ");
                    sb.AppendLine(" , ((INPUT_PRICE/100) * RAW_MAT_WEIGHT) AS TOTAL_MONEY  ");
                    sb.AppendLine(" , INSTAFF  ");
                    sb.AppendLine(" , INTIME  ");
                    sb.AppendLine(" , (select case when CHECK_GUBUN = '1' then (select S_CODE from SM_FACTORY_COM.dbo.T_S_CODE where L_CODE = '610' and ORD = '1') else (select S_CODE from SM_FACTORY_COM.dbo.T_S_CODE where L_CODE = '610' and ORD = '4') end  from N_RAW_CODE where RAW_MAT_CD = A.RAW_MAT_CD)  ");
                    sb.AppendLine(" , 'N'  ");
                    sb.AppendLine("     ,@UNION_CD  ");
                    sb.AppendLine("     ,@MF_DATE  ");
                    sb.AppendLine("     ,@COUNTRY_ORIGIN  ");
                    sb.AppendLine("     ,@FROZEN_GUBUN  ");
                    sb.AppendLine("     ,REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, ");
                    sb.AppendLine("     (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ");
                    sb.AppendLine("     ,@MF_DATE),120),'/','-') ");
                    sb.AppendLine("     ,@GRADE ");
                    sb.AppendLine("  from F_RAW_MEAT_DETAIL A  ");
                    sb.AppendLine("  where INPUT_DATE = @INPUT_DATE and INPUT_CD = @INPUT_CD and RAW_MAT_WEIGHT != 0  ");
                }




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", cust_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", meat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", meat_nm);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", meat_price);
                sCommand.Parameters.AddWithValue("@RAW_MAT_AMOUNT", meat_amount);
                sCommand.Parameters.AddWithValue("@RAW_MAT_WEIGHT", meat_weight);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@OUTPUT_YN", complete_yn);
                sCommand.Parameters.AddWithValue("@MF_DATE", mf_date);
                sCommand.Parameters.AddWithValue("@COUNTRY_ORIGIN", country_origin);
                sCommand.Parameters.AddWithValue("@FROZEN_GUBUN", frozen_gubun);
                sCommand.Parameters.AddWithValue("@UNION_CD", unioin_cd);
                sCommand.Parameters.AddWithValue("@GRADE", grade_gubun);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateMold(
          string txt_mold_num
         , string txt_mold_nm
         , string txt_weight
         , string cmb_gubun
         , string cmb_storage
         , string dtp_start_date
         , string comment
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();



                //if (!dt.Rows[0]["pw"].ToString().Equals("0"))
                //{
                //    return 5;
                //}

                sb = new StringBuilder();
                sb.AppendLine("update N_MOLD_CODE set ");
                sb.AppendLine("      MOLD_NO = @MOLD_NO");
                sb.AppendLine("     ,MOLD_NM = @MOLD_NM ");
                sb.AppendLine("     ,WEIGHT = @WEIGHT ");
                sb.AppendLine("     ,MOLD_GUBUN = @MOLD_GUBUN ");
                sb.AppendLine("     ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("     ,INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     ,COMMENT  = @COMMENT");
                sb.AppendLine("  ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@MOLD_NO", txt_mold_num);
                sCommand.Parameters.AddWithValue("@MOLD_NM", txt_mold_nm);
                sCommand.Parameters.AddWithValue("@WEIGHT", txt_weight);
                sCommand.Parameters.AddWithValue("@MOLD_GUBUN", cmb_gubun);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_storage);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", dtp_start_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Delete_Meat_Input(
            string input_date
            , string input_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_RAW_MEAT_INPUT  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                sb.AppendLine("DELETE FROM F_RAW_MEAT_DETAIL  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        #endregion


        #region 발주서
        public int insertOrder(
          string order_date
        , string txt_cust_cd
        , string in_req_date
        , string pur_yn
        , string comment
        , conDataGridView o_rm_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(ORDER_CD),0)+1 from F_ORDER ");
                sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");



                sb.AppendLine("declare @order_NUM int ");
                sb.AppendLine("select @order_NUM =ISNULL(count(ORDER_DATE),0)+1 from F_ORDER ");
                sb.AppendLine("where substring(ORDER_DATE,0,5) = '" + order_date.Substring(0, 4) + "' ");

                sb.AppendLine("insert into F_ORDER(");
                sb.AppendLine("     ORDER_DATE");
                sb.AppendLine("     ,ORDER_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INPUT_REQ_DATE ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,order_NUM ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ORDER_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INPUT_REQ_DATE ");
                sb.AppendLine("     ,'" + pur_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,@order_NUM ");
                sb.AppendLine(" ) ");

                if (o_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < o_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @order_seq" + i + " int ");
                        sb.AppendLine("select @order_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                        sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                        sb.AppendLine("and ORDER_CD =  @seq ");

                        sb.AppendLine("insert into F_ORDER_DETAIL(");
                        sb.AppendLine("     ORDER_DATE ");
                        sb.AppendLine("     ,ORDER_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,SPEC ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + order_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@order_seq" + i + " ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["SPEC"].Value + "' ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["비고"].Value + "' ");


                        sb.AppendLine("  )");
                    }
                }
                //Common.p_strStaffNo 

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);
                sCommand.Parameters.AddWithValue("@ORDER_DATE", order_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INPUT_REQ_DATE", in_req_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        #endregion 발주서

        #region 원자재입고등록

        public int insertRmInput(
          string input_date
        , string txt_cust_cd
        , string input_yn
        , string comment
        , string vat_cd
        , string all_supply_money
        , string all_tax_money
        , string all_total_money
        , string give_gubun
        , string give_money
        , string dc_money
        , string total_give_money
        , conDataGridView in_rm_dgv
        , Hashtable hash)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;
                for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                {
                    if ((string)in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value != null && (string)in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value != "")
                    {
                        sb = new StringBuilder();
                        sb.AppendLine(" select A.ORDER_DATE,A.ORDER_CD,B.SEQ,C.ORDER_AMT, C.INPUT_AMT");
                        sb.AppendLine(" FROM F_ORDER A ");
                        sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B  ");
                        sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
                        sb.AppendLine("     AND A.ORDER_CD = B.ORDER_CD ");
                        sb.AppendLine(" LEFT OUTER JOIN(	 ");
                        sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
                        sb.AppendLine("                           ,AA.ORDER_CD       ");
                        sb.AppendLine("                           ,AA.SEQ ");
                        sb.AppendLine("                           ,FLOOR(ISNULL(AA.TOTAL_AMT,0)) AS ORDER_AMT ");
                        sb.AppendLine("                           ,ISNULL(SUM(BB.TOTAL_AMT),0) AS INPUT_AMT ");
                        sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TOTAL_AMT),0) AS NO_INPUT_AMT ");
                        sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
                        sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
                        sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
                        sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
                        sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
                        sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
                        sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
                        sb.AppendLine("     AND A.ORDER_CD = C.ORDER_CD ");
                        sb.AppendLine("     AND B.SEQ = C.SEQ  ");
                        sb.AppendLine(" WHERE A.ORDER_DATE = '" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("      AND A.ORDER_CD = '" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("      AND B.SEQ = '" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");

                        sCommand = new SqlCommand(sb.ToString());
                        if (sCommand.CommandText.Equals(null))
                        {
                            wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                            return 2;
                        }

                        DataTable dt = wAdo.SqlCommandSelect(sCommand);

                        double order_amt = double.Parse(dt.Rows[0]["ORDER_AMT"].ToString());
                        double input_amt = double.Parse(dt.Rows[0]["INPUT_AMT"].ToString());
                        double grd_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", ""));
                        double grd_ord_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["OLD_TOTAL_AMT"].Value)); //백업은 콤마 정의 안함

                        // 발주수량 - 입고수량 - 입력한 수량 값 = 결과값

                        double rs_num = order_amt - input_amt - grd_total_amt;
                        if (rs_num < 0)
                        {
                            StringBuilder alert_sb = new StringBuilder();
                            alert_sb.AppendLine(i + 1 + "번째 줄 원자재에 포함된 발주번호 \n ");
                            alert_sb.AppendLine(in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + " [" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "] 의 발주수량보다 더 많게 입력하셨습니다. \n");
                            alert_sb.AppendLine("그대로 저장하시겠습니까? (저장:예 / 취소:아니오)");

                            DialogResult msgOk = MessageBox.Show(alert_sb.ToString(), "삭제여부", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (msgOk == DialogResult.No)
                            {
                                return 3;
                            }
                        }
                    }
                }

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("declare @buy_seq int ");
                sb.AppendLine("select @buy_seq =ISNULL(convert(int,MAX(BUY_CD)),0)+1 from F_BUY ");
                sb.AppendLine("where BUY_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into F_RAW_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + input_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + input_yn + "' ");
                sb.AppendLine("     ,'" + comment + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                //구매 등록
                sb.AppendLine("insert into F_BUY (");
                sb.AppendLine("     BUY_DATE");
                sb.AppendLine("     ,BUY_CD ");
                sb.AppendLine("     ,BUY_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine("     ,INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + input_date + "' ");
                sb.AppendLine("     ,@buy_seq");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_supply_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_tax_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + vat_cd + "' ");
                sb.AppendLine("     ,'" + input_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");
                //구매 등록


                bool isCustDay = isCustDayTotal(input_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(input_date, txt_cust_cd));
                }


                if (!give_gubun.Equals("-1"))
                {
                    sb.AppendLine("declare @give_seq int ");
                    sb.AppendLine("select @give_seq = ISNULL(convert(int,MAX(GIVE_CD)),0)+1 from F_GIVE ");
                    sb.AppendLine("where GIVE_DATE = '" + input_date + "'  ");

                    //지급등록
                    sb.AppendLine("insert into F_GIVE(");
                    sb.AppendLine(" GIVE_DATE ");
                    sb.AppendLine(" ,GIVE_CD ");
                    sb.AppendLine(" ,GIVE_GUBUN ");
                    sb.AppendLine(" ,CUST_CD ");
                    sb.AppendLine(" ,GIVE_MONEY ");
                    sb.AppendLine(" ,DC_MONEY ");
                    sb.AppendLine(" ,TOTAL_MONEY ");
                    sb.AppendLine(" ,COMMENT ");
                    sb.AppendLine(" ,INSTAFF ");
                    sb.AppendLine(" ,INTIME ");
                    sb.AppendLine(" ,INPUT_DATE ");
                    sb.AppendLine(" ,INPUT_CD ");
                    sb.AppendLine(" ) VALUES ( ");
                    sb.AppendLine(" '" + input_date + "' ");
                    sb.AppendLine(" ,@give_seq ");
                    sb.AppendLine(" ,'" + give_gubun + "' ");
                    sb.AppendLine(" ,'" + txt_cust_cd + "' ");
                    sb.AppendLine(" ," + give_money.Replace(",", "") + " ");
                    sb.AppendLine(" ," + dc_money.Replace(",", "") + " ");
                    sb.AppendLine(" ," + total_give_money.Replace(",", "") + " ");
                    sb.AppendLine(" ,'#구매 " + input_date + "/' + convert(nvarchar,@buy_seq) ");
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ,'" + input_date + "' ");
                    sb.AppendLine(" ,@seq ");
                    sb.AppendLine(" ) ");
                    //지급등록

                    sb.AppendLine("UPDATE N_CUST_CODE ");
                    sb.AppendLine("      SET BALANCE = BALANCE -'" + total_give_money.Replace(",", "") + "' ");
                    sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                    sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                    sb.AppendLine(" PAY_MONEY = PAY_MONEY + " + give_money.Replace(",", "") + " ");
                    sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY + " + dc_money.Replace(",", "") + " ");
                    sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY + " + total_give_money.Replace(",", "") + "  ");
                    sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                }

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE +'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY + " + all_total_money.Replace(",", "") + "  ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(input_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));

                if (!give_gubun.Equals("-1"))
                {
                    sb.AppendLine(CustDayTotal_Change_Balance(
                        input_date
                        , txt_cust_cd
                        , total_give_money.Replace(",", "")
                        , "-"));
                }
                //거래처 잔고 상승! 


                if (in_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                        sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");

                        sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                        sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                        sb.AppendLine("IF @chk_gbn" + i + " = '1' BEGIN set @chk_yn" + i + " = 'S' set @final_amt" + i + " = '0' END "); //원자재 검사여부가 검사일 경우 'S' 대기 
                        sb.AppendLine("ELSE BEGIN set @chk_yn" + i + " = 'O' set @final_amt" + i + " = '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' END "); //원자재 검사여부가 생략일 경우 'O'

                        sb.AppendLine("declare @buy_seq" + i + " int ");
                        sb.AppendLine("select @buy_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_BUY_DETAIL ");
                        sb.AppendLine("where BUY_DATE = '" + input_date + "' ");
                        sb.AppendLine("and BUY_CD =  @buy_seq ");

                        //<2020-05-08 이재원 LOC_CD 와 LOC_NM 추가>
                        string loc_cd = "";
                        string loc_nm = "";
                        if (in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag != null && !in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag.ToString().Equals(""))
                        {
                            loc_cd = in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag.ToString();
                            loc_nm = in_rm_dgv.Rows[i].Cells["LOC_CD"].ToolTipText.ToString();
                        }

                        sb.AppendLine("insert into F_RAW_DETAIL(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SPEC ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TEMP_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,CURR_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,HEAT_NO ");
                        sb.AppendLine("     ,HEAT_TIME ");
                        sb.AppendLine("     ,ORDER_DATE ");
                        sb.AppendLine("     ,ORDER_CD ");
                        sb.AppendLine("     ,ORDER_SEQ ");
                        sb.AppendLine("     ,COMPLETE_YN ");
                        sb.AppendLine("     ,CHECK_YN ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,STORAGE_CD ");
                        sb.AppendLine("     ,LOC_CD ");
                        sb.AppendLine("     ,LOC_NM ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@input_seq" + i + " ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["SPEC"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' "); //가입고
                        sb.AppendLine("     ,@final_amt" + i + " "); //최종입고
                        sb.AppendLine("     ,@final_amt" + i + " "); //현재입고
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");
                        sb.AppendLine("     ,'" + input_yn + "' ");

                        sb.AppendLine("     , @chk_yn" + i + "  "); //BE
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["비고"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + loc_cd + "' ");
                        sb.AppendLine("     ,'" + loc_nm + "' ");
                        sb.AppendLine("  )");


                            sb.AppendLine("insert into F_BUY_DETAIL(");
                            sb.AppendLine("      BUY_DATE   ");      //1
                            sb.AppendLine("     ,BUY_CD    ");       //2
                            sb.AppendLine("     ,SEQ    ");          //3
                            sb.AppendLine("     ,RAW_MAT_CD    ");   //4
                            sb.AppendLine("     ,INPUT_DATE    ");   //5
                            sb.AppendLine("     ,INPUT_CD    ");     //6
                            sb.AppendLine("     ,INPUT_SEQ    ");    //7
                            sb.AppendLine("     ,TOTAL_AMT    ");    //8
                            sb.AppendLine("     ,TOTAL_PRICE    ");  //9
                            sb.AppendLine("     ,TOTAL_MONEY    ");  //10
                            sb.AppendLine("     ,SUPPLY_MONEY    "); //11
                            sb.AppendLine("     ,TAX_MONEY    ");    //12
                            sb.AppendLine("     ,INTIME    ");       //13
                            sb.AppendLine("     ,INSTAFF    ");      //14
                            sb.AppendLine("     ,TAX_CD    ");       //15
                            sb.AppendLine("  ) values ( ");
                            sb.AppendLine("     '" + input_date + "' ");                                                                   //1  
                            sb.AppendLine("      ,@buy_seq ");                                                                             // 2 
                            sb.AppendLine("     ,@buy_seq" + i + " ");                                                                     //  3
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");                                 //  4
                            sb.AppendLine("     ,'" + input_date + "' ");                                                                  //  5
                            sb.AppendLine("     ,@seq  ");                                                                                 //  6
                            sb.AppendLine("     ,@input_seq" + i + "  ");                                                                  //  7
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");       //  8
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");           //  9
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");     //  10
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["SUPPLY_MONEY"].Value).Replace(",", "") + "' ");    //  11
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TAX_MONEY"].Value).Replace(",", "") + "' ");       //  12
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                     //  13
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                         //  14
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["TAX_CD"].Value.ToString() + "' ");                          //  15
                            sb.AppendLine("  )");



                            sb.AppendLine(" update N_RAW_CODE set ");
                            sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " "));
                            sb.AppendLine(" where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");


                            //sb.AppendLine("update F_ORDER set");
                            //sb.AppendLine("      CUST_CD = '"+txt_cust_cd+"' ");
                            //sb.AppendLine("     ,INPUT_REQ_DATE = @INPUT_REQ_DATE ");
                            //sb.AppendLine("     ,COMPLETE_YN = 'Y' ");
                            //sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            //sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                            //sb.AppendLine("     ,COMMENT = '"+comment+"' ");

                            //sb.AppendLine(" where ORDER_DATE = @ORDER_DATE and ORDER_CD= @ORDER_CD ");

                            if (input_yn == "Y")
                            {
                                sb.AppendLine(" update F_ORDER set ");
                                sb.AppendLine("   COMPLETE_YN='Y'");
                                sb.AppendLine("   where ORDER_DATE='" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' and ORDER_CD='" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "'");

                            }

                            /*단가테이블 최종단가로 업데이트*/

                            sb.AppendLine(" declare @chk" + i + " int  ");
                            sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                            sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' and P_GUBUN = '1' ");

                            sb.AppendLine(" if @chk" + i + " > 0  ");
                            sb.AppendLine(" begin  ");
                            sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                            sb.AppendLine("      UNIT_PRICE = '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "'  ");
                            sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                            sb.AppendLine("      AND PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      AND P_GUBUN = '1' ");
                            sb.AppendLine(" end ");
                            sb.AppendLine(" else begin ");
                            sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                            sb.AppendLine("      CUST_CD ");
                            sb.AppendLine("      ,PROD_CD ");
                            sb.AppendLine("      ,B_BOX_PRICE ");
                            sb.AppendLine("      ,S_BOX_PRICE ");
                            sb.AppendLine("      ,UNIT_PRICE ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,P_GUBUN ");
                            sb.AppendLine("   )VALUES(  ");
                            sb.AppendLine("   '" + txt_cust_cd + "'  ");
                            sb.AppendLine("   ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'  ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   ,'1' ");
                            sb.AppendLine(" ) ");
                            sb.AppendLine(" end ");
                        }
                    /*원자재수입검사*/
                    if (hash.Count > 0)
                    {
                        foreach (int idx in hash.Keys)
                        {
                            frm원자재수입검사 frm = (frm원자재수입검사)hash[idx];

                            sb.AppendLine(" insert into f_raw_chk (   ");
                            sb.AppendLine(" input_date                  ");
                            sb.AppendLine(" ,input_cd                  ");
                            sb.AppendLine(" ,seq                  ");
                            sb.AppendLine(" ,raw_mat_cd                  ");
                            sb.AppendLine(" ,chk_date                  ");
                            sb.AppendLine(" ,chk_amt                  ");
                            sb.AppendLine(" ,pass_amt                 ");
                            sb.AppendLine(" ,non_pass_amt             ");
                            sb.AppendLine(" ,pass_yn                  ");
                            sb.AppendLine(" ,instaff                  ");
                            sb.AppendLine(" ,intime                   ");
                            sb.AppendLine(" ) values (      ");
                            sb.AppendLine("     '" + input_date + "' ");
                            sb.AppendLine("      ,@seq ");
                            sb.AppendLine("     ,'" + (idx+1) + "' ");
                            sb.AppendLine(" ,'"+in_rm_dgv.Rows[idx].Cells["RAW_MAT_CD"].Value.ToString()+"'   ");
                            sb.AppendLine(" ,'" + input_date + "'   ");
                            sb.AppendLine(" ,'" + frm.txt_input_amt.Text + "'   ");
                            sb.AppendLine(" ,'" + frm.txt_pass_amt.Text.Replace(",", "") + "'   ");
                            sb.AppendLine(" ,'" + frm.txt_non_pass_amt.Text.Replace(",", "") + "'    ");
                            sb.AppendLine(" ,'" + frm.txt_pass_yn.Text + "'   ");
                            sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" ) ");
                    

                            sb.AppendLine(" update f_raw_detail set ");
                            sb.AppendLine(" check_yn = 'Y' ");
                            sb.AppendLine(" ,total_amt = temp_amt ");
                            sb.AppendLine(" ,curr_amt = temp_amt ");
                            sb.AppendLine(" where input_date = '" + input_date + "' and input_cd = @seq and seq = '" + (idx + 1) + "'     ");

                            sb.AppendLine(" update n_raw_code set ");
                            sb.AppendLine(" bal_stock = bal_stock + (select temp_amt from f_raw_detail where  ");
                            sb.AppendLine(" input_date = '" + input_date + "' and input_cd = @seq and seq = '" + (idx + 1) + "'  )   ");
                            sb.AppendLine(" where raw_mat_cd = (select raw_mat_cd from f_raw_detail where   ");
                            sb.AppendLine(" input_date = '" + input_date + "' and input_cd = @seq and seq = '" + (idx + 1) + "'  )   ");

                            for (int i = 0; i < frm.dataChkGrid.Rows.Count; i++)
                            {
                                if (frm.dataChkGrid.Rows[i].Cells[1].Tag == null) continue;

                                sb.AppendLine(" declare @c_seq" + idx + i + " int ");
                                sb.AppendLine(" select @c_seq" + idx + i + " = isnull(max(seq),0)+1 from f_raw_chk_detail ");
                                sb.AppendLine(" where input_date = '" + input_date + "' and input_cd = @seq and input_seq = '" + (idx + 1) + "'     ");

                                sb.AppendLine(" insert into f_raw_chk_detail ( ");
                                sb.AppendLine(" input_date ");
                                sb.AppendLine(" ,input_cd ");
                                sb.AppendLine(" ,input_seq ");
                                sb.AppendLine(" ,seq ");
                                sb.AppendLine(" ,chk_cd ");
                                sb.AppendLine(" ,chk_amt ");
                                sb.AppendLine(" ,pass_yn ");
                                sb.AppendLine(" ,add_print_yn ");
                                sb.AppendLine(" ,comment ");
                                sb.AppendLine(" ) values ( ");
                                sb.AppendLine(" '" + input_date + "' ");
                                sb.AppendLine(" ,@seq ");
                                sb.AppendLine(" ,'" + (idx + 1) + "' ");
                                sb.AppendLine(" ,@c_seq" + idx + i + " ");
                                sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells[1].Tag.ToString() + "' ");
                                sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells["CHK_AMT"].Value.ToString().Replace(",", "") + "' ");
                                sb.AppendLine(" ,'" + (frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == null || (bool)frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                                sb.AppendLine(" ,'" + (frm.dataChkGrid.Rows[i].Cells["ADD_PRINT"].Value == null || (bool)frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                                sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                                sb.AppendLine(" ) ");

                            }
                        }

                    } 
                }


                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion 원자재입고등록

        #region 원자재입고등록

        public int returnRmInput(
          string input_date
        , string txt_cust_cd
        , string input_yn
        , DataGridView in_rm_dgv
            , string lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;

                string dtp_input_date = DateTime.Today.ToString("yyyy-MM-dd");

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + dtp_input_date + "' ");
                sb.AppendLine("insert into F_RAW_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,'" + input_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + lot_no + "' ");
                sb.AppendLine(" ) ");

                if (in_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                    {


                        sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                        sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + dtp_input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");

                        //     sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                        //     sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                        sb.AppendLine("insert into F_RAW_DETAIL(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SPEC ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,CURR_AMT ");

                        sb.AppendLine("     ,ORDER_DATE ");
                        sb.AppendLine("     ,ORDER_CD ");
                        sb.AppendLine("     ,ORDER_SEQ ");
                        sb.AppendLine("     ,COMPLETE_YN ");
                        sb.AppendLine("     ,CHECK_YN ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,STORAGE_CD ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + dtp_input_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@input_seq" + i + " ");
                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["SPEC"].Value + "' ");
                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     ," + double.Parse(in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + " "); //가입고
                        sb.AppendLine("     ," + double.Parse(in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + " ");

                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     ,'' ");
                        sb.AppendLine("     , ''  "); //BE
                        // sb.AppendLine("     , @chk_yn" + i + "  "); //BE
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["COMMENT"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Value + "' ");

                        sb.AppendLine("  )");


                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");


                        //sb.AppendLine("update F_ORDER set");
                        //sb.AppendLine("      CUST_CD = @CUST_CD ");
                        //sb.AppendLine("     ,INPUT_REQ_DATE = @INPUT_REQ_DATE ");
                        //sb.AppendLine("     ,COMPLETE_YN = 'Y' ");
                        //sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        //sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                        //sb.AppendLine("     ,COMMENT = @COMMENT ");

                        //sb.AppendLine(" where ORDER_DATE = @ORDER_DATE and ORDER_CD= @ORDER_CD ");

                        //if (input_yn == "Y")
                        //{
                        //    sb.AppendLine(" update F_ORDER set ");
                        //    sb.AppendLine("   COMPLETE_YN='Y'");
                        //    sb.AppendLine("   where ORDER_DATE='" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' and ORDER_CD='" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "'");

                        //}

                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", dtp_input_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion 원자재입고등록

        #region 소요산출량 발주서 일괄 등록

        public int insertSoyo(
              DataGridView dgv
            , DataGridView chk_dgv
            , string order_date_2
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //2019-07-29 유정훈
                //거래처를 GROUP으로 나눠 번호 순을 매김..

                


                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    if ((bool)dgv.Rows[i].Cells[0].Value == false)
                    {
                        dgv.Rows.RemoveAt(i);
                        i = -1;
                    }
                    else if (decimal.Parse(dgv.Rows[i].Cells["RS_AMT"].Value.ToString().Replace(",", "")) <= 0)
                    {
                        dgv.Rows.RemoveAt(i);
                        i = -1;
                    }
                } //발주량이 0이거나 체크가 되어있지 않은 행은 삭제함.


                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    if (dgv.Rows[i].Cells["PUR_CUST_CD"].Value == null || dgv.Rows[i].Cells["PUR_CUST_CD"].Value.ToString().Equals(""))
                    {
                        MessageBox.Show("1개 이상의 항목이 구매처가 설정되지 않았습니다.");
                        return 1;
                    }
                }

                string order_date = DateTime.Now.ToString("yyyy-MM-dd");

                ArrayList custGroup = new ArrayList();
                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    if (!custGroup.Contains((string)dgv.Rows[i].Cells["PUR_CUST_CD"].Value.ToString()))
                    {
                        custGroup.Add(dgv.Rows[i].Cells["PUR_CUST_CD"].Value.ToString());
                    }
                } //모든 거래처 ArrayList에 담기


                for (int i = 0; i < custGroup.Count; i++)
                {

                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select  @seq" + i + " =ISNULL(MAX(ORDER_CD),0)+1 from F_ORDER ");
                    sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");

                    sb.AppendLine("insert into F_ORDER(");
                    sb.AppendLine("     ORDER_DATE");
                    sb.AppendLine("     ,ORDER_CD ");
                    sb.AppendLine("     ,CUST_CD ");
                    sb.AppendLine("     ,INPUT_REQ_DATE ");
                    sb.AppendLine("     ,COMPLETE_YN ");
                    sb.AppendLine("     ,STAFF_CD ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("      '" + order_date + "' ");
                    sb.AppendLine("     ,@seq" + i + " ");
                    sb.AppendLine("     ,'" + custGroup[i] + "' ");
                    sb.AppendLine("      ,'" + order_date_2 + "' ");
                    sb.AppendLine("     ,'N' ");
                    sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,'소요량산출' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    for (int j = 0; j < dgv.Rows.Count; j++)
                    {
                        string rs_amt = ((string)dgv.Rows[j].Cells["RS_AMT"].Value.ToString()).Replace(",", "");
                        double d_rs_amt = double.Parse(rs_amt);
                        if (dgv.Rows[j].Cells["PUR_CUST_CD"].Value.ToString().Equals(custGroup[i]))
                        {
                            if ((bool)dgv.Rows[j].Cells[0].Value)
                            {


                                sb.AppendLine("declare @order_seq" + j + " int ");
                                sb.AppendLine("select @order_seq" + j + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                                sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                                sb.AppendLine("and ORDER_CD =  @seq" + i + " ");

                                sb.AppendLine("insert into F_ORDER_DETAIL(");
                                sb.AppendLine("     ORDER_DATE ");
                                sb.AppendLine("     ,ORDER_CD ");
                                sb.AppendLine("     ,SEQ ");
                                sb.AppendLine("     ,RAW_MAT_CD ");
                                sb.AppendLine("     ,UNIT_CD ");
                                sb.AppendLine("     ,TOTAL_AMT ");
                                sb.AppendLine("     ,PRICE ");
                                sb.AppendLine("     ,TOTAL_MONEY ");
                                sb.AppendLine("     ,INSTAFF ");
                                sb.AppendLine("     ,INTIME ");
                                sb.AppendLine("  )values ( ");
                                sb.AppendLine("     '" + order_date + "' ");
                                sb.AppendLine("      ,@seq" + i + " ");
                                sb.AppendLine("     ,@order_seq" + j + " ");
                                sb.AppendLine("     ,'" + dgv.Rows[j].Cells["RAW_MAT_CD"].Value + "' ");
                                sb.AppendLine("     ,'" + dgv.Rows[j].Cells["UNIT_CD"].Value + "' ");
                                sb.AppendLine("     ,'" + dgv.Rows[j].Cells["RS_AMT"].Value.ToString().Replace(",", "") + "' ");
                                sb.AppendLine("     ,'" + dgv.Rows[j].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                                sb.AppendLine("     ,'" + dgv.Rows[j].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", "") + "' ");
                                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                                sb.AppendLine("  )");
                            }
                        }
                    }
                }

                for (int i = 0; i < chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("update F_PLAN set");
                    sb.AppendLine("      ORDER_YN = 'Y'");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" where PLAN_DATE = '" + chk_dgv.Rows[i].Cells["PLAN_DATE"].Value + "'  and PLAN_CD= '" + chk_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                }
                Debug.WriteLine("소요산 저장하는");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_SOYO_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion 소요산출량 발주서 일괄 등록

        #region 작업지시서 등록

        public int insertWork(
              string work_date
            , string txt_work_cd
            , string txt_lot_no
            , string txt_item_cd
            , string txt_cust_cd
            , string txt_inst_amt
            , string deliver_req_date
            , string cmb_line
            , string cmb_worker
            , string txt_plan_num
            , string txt_plan_item
            , string txt_inst_notice
            , string txt_char_amt
            , string txt_pack_amt
            , conDataGridView w_rm_dgv
            , DataGridView w_half_dgv
            , string rawchk
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_INST "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where W_INST_DATE LIKE '" + work_date.Substring(0, 7).ToString() + "%'"); //2019-05

                sb.AppendLine("declare @seq1 int ");
                sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' "); //일별 체크    

                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,WORKER_CD");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,PLAN_ITEM");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,RAW_OUT_YN ");
                sb.AppendLine("     ,INST_NOTICE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @W_INST_DATE ");
                sb.AppendLine("     ,@seq1");
                sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INST_AMT ");
                sb.AppendLine("     ,@DELIVERY_DATE ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@WORKER_CD ");
                sb.AppendLine("     ,@PLAN_NUM ");
                sb.AppendLine("     ,@PLAN_ITEM ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + rawchk + "' ");
                sb.AppendLine("     ,@INST_NOTICE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @work_seq" + i + " int ");
                        sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@work_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_HALF_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_HALF_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@PLAN_NUM", txt_plan_num);
                sCommand.Parameters.AddWithValue("@PLAN_ITEM", txt_plan_item);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertWork(
      string work_date
    , string txt_work_cd
    , string txt_lot_no
    , string txt_item_cd
    , string txt_cust_cd
    , string txt_inst_amt
    , string deliver_req_date
    , string cmb_line
    , string cmb_worker
    , string txt_plan_num
    , string txt_plan_item
    , string txt_inst_notice
    , string txt_char_amt
    , string txt_pack_amt
    , conDataGridView w_rm_dgv
    , DataGridView w_half_dgv
    , string rawchk
    , string mold
    )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_INST "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where W_INST_DATE LIKE '" + work_date.Substring(0, 7).ToString() + "%'"); //2019-05

                sb.AppendLine("declare @seq1 int ");
                sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' "); //일별 체크    

                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,WORKER_CD");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,PLAN_ITEM");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,RAW_OUT_YN ");
                sb.AppendLine("     ,INST_NOTICE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,MOLD_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @W_INST_DATE ");
                sb.AppendLine("     ,@seq1");
                sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INST_AMT ");
                sb.AppendLine("     ,@DELIVERY_DATE ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@WORKER_CD ");
                sb.AppendLine("     ,@PLAN_NUM ");
                sb.AppendLine("     ,@PLAN_ITEM ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + rawchk + "' ");
                sb.AppendLine("     ,@INST_NOTICE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,@MOLD_CD ");
                sb.AppendLine(" ) ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @work_seq" + i + " int ");
                        sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@work_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_HALF_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_HALF_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@PLAN_NUM", txt_plan_num);
                sCommand.Parameters.AddWithValue("@PLAN_ITEM", txt_plan_item);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                sCommand.Parameters.AddWithValue("@MOLD_CD", mold);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion 작업지시서 등록


        #region 작업공정 등록
        public int insert_Work_Flow(
             string txt_lot_no
           , string txt_item_cd
           , conDataGridView[] dgv
           , Label[] lbl_flow_cd
           , Label[] lbl_flow_seq
           , Label[] lbl_item_iden
           , int flow_cnt
           , String strCustCD)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                //sb.AppendLine("declare @seq int ");
                //sb.AppendLine("select @seq =ISNULL(MAX(FLOW_CD),0)+1 from F_FLOW ");
                //sb.AppendLine("where FLOW_DATE = '" + flow_date + "' ");

                sb.AppendLine("insert into F_WORK_FLOW(");
                //sb.AppendLine("     ,FLOW_CD "); //1
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                //sb.AppendLine("     ,@seq");
                sb.AppendLine("      @LOT_NO");
                sb.AppendLine("      ,@FLOW_DATE ");
                sb.AppendLine("      ,@ITEM_CD ");
                sb.AppendLine("     ,'S'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {
                        for (int j = 0; j < dgv[i].Rows.Count; j++)
                        {
                            sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                            sb.AppendLine("      LOT_NO ");//1
                            sb.AppendLine("      ,ITEM_CD ");//2
                            sb.AppendLine("      ,CUST_CD");//3
                            sb.AppendLine("      ,LOT_SUB ");//4
                            sb.AppendLine("      ,F_STEP ");//5
                            sb.AppendLine("      ,FLOW_CD ");//6
                            sb.AppendLine("      ,SEQ ");        //7
                            sb.AppendLine("      ,F_SUB_DATE ");//8
                            sb.AppendLine("      ,INPUT_AMT ");//9
                            sb.AppendLine("      ,LOSS ");//10
                            sb.AppendLine("      ,POOR_CD ");//11
                            sb.AppendLine("      ,POOR_AMT ");//12
                            sb.AppendLine("      ,F_SUB_AMT");//13
                            sb.AppendLine("      ,COMPLETE_YN ");//14
                            sb.AppendLine("      ,CHECK_YN ");//15
                            sb.AppendLine("      ,ITEM_CHECK_YN ");//16
                            sb.AppendLine("      ,INSTAFF ");//17
                            sb.AppendLine("      ,INTIME ");//18
                            sb.AppendLine("      ,COMMENT ");//19
                            sb.AppendLine("      ,INPUT_YN ");//20
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("      '" + (string)dgv[i].Rows[j].Cells[0].Value + "' "); // lot no1
                            sb.AppendLine("      ,@ITEM_CD ");   //2
                            sb.AppendLine("      ,'" + strCustCD + "'");//3
                            int real_AMT = Int32.Parse(((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "")) + Int32.Parse(((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "")) + Int32.Parse(((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", ""));

                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");  // lot sub 4
                            sb.AppendLine("      , '" + lbl_flow_seq[i].Text.ToString() + "' ");  //f _step 5
                            sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");   //6
                            sb.AppendLine("      , '" + lbl_flow_seq[i].Text.ToString() + "' ");//7
                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[2].Value + "' "); //날짜 8
                            sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //input9
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' "); //loss10
                            if (dgv[i].Rows[j].Cells[5].Value == null)
                            {
                                dgv[i].Rows[j].Cells[5].Value = "";
                            }
                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[5].Value + "' "); //POOR_CD 11
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT 12
                            // 투입량에서 loss 빼고 불량빼고
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "") + "' "); //F_SUB_AMT 13
                            sb.AppendLine("      , 'N' ");//14
                            sb.AppendLine("      , 'S' "); //S -> 대기 15
                            sb.AppendLine("      , 'S' "); //S -> 대기 16
                            //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '"+ lbl_flow_cd[i].Text.ToString()+"') ");
                            sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//17
                            sb.AppendLine("      , convert(varchar, getdate(), 120) ");//18
                            sb.AppendLine("      ,'' ");//19
                            if ((bool)dgv[i].Rows[j].Cells[8].Value)
                            {
                                sb.AppendLine("      ,'Y' ");//20
                            }
                            else
                            {
                                sb.AppendLine("      ,'N' ");//20

                            }

                            sb.AppendLine("      ) ");
                        }
                    }
                }

                bool chk = false;
                //int input_amt = 0;
                for (int i = 0; i < flow_cnt; i++)
                {
                    if (lbl_item_iden[i].Text.ToString().Equals("Y"))
                    {
                        chk = true;
                        break;
                    }
                }


                if (chk)  //제품식별표가 Y
                {
                    for (int i = 0; i < dgv[flow_cnt - 1].Rows.Count; i++)
                    {
                        string item_date = flow_date;
                        int item_sum = int.Parse(dgv[flow_cnt - 1].Rows[i].Cells[3].Value.ToString().Replace(",", "")) - int.Parse(dgv[flow_cnt - 1].Rows[i].Cells[4].Value.ToString().Replace(",", "")) - int.Parse(dgv[flow_cnt - 1].Rows[i].Cells[6].Value.ToString().Replace(",", ""));
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                        sb.AppendLine("where INPUT_DATE = '" + flow_date + "' ");

                        sb.AppendLine("insert into F_ITEM_INPUT(");
                        sb.AppendLine("      INPUT_DATE ");//1
                        sb.AppendLine("      ,INPUT_CD ");
                        sb.AppendLine("      ,ITEM_CD ");//3
                        sb.AppendLine("      ,LOT_NO ");
                        sb.AppendLine("      ,LOT_SUB ");//5
                        sb.AppendLine("      ,F_STEP ");
                        sb.AppendLine("      ,FLOW_CD ");//7
                        sb.AppendLine("      ,INPUT_AMT ");
                        sb.AppendLine("      ,INSTAFF ");//9
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,CURR_AMT ");//11
                        sb.AppendLine("      ,COMPLETE_YN ");//12
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("       '" + item_date + "' ");//1
                        sb.AppendLine("      ,@seq" + i + " ");
                        sb.AppendLine("      ,'" + txt_item_cd + "' ");//3
                        sb.AppendLine("      ,'" + txt_lot_no + "' ");
                        sb.AppendLine("      , '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");//5
                        sb.AppendLine("      , '" + (flow_cnt).ToString() + "' "); //f_step
                        sb.AppendLine("      , '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' "); //flow_cd 7
                        // sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");  //공정 마지막 의 불량을 안빼주고 완료생산량을 저장하길래 공정마지막 갯수 저장하는것 삭제하고 마지막갯수에서 마지막 불량 뺄셈하고 저장 
                        sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//9
                        sb.AppendLine("      , convert(varchar, getdate(), 120) ");//10
                        sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");  //11
                        sb.AppendLine("      , 'N' ");//12
                        sb.AppendLine("      ) ");
                        //input_amt += int.Parse(((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", ""));
                    }

                    //string item_date = flow_date;

                    //sb.AppendLine("declare @seq int ");
                    //sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                    //sb.AppendLine("where INPUT_DATE = '" + flow_date + "' ");

                    //sb.AppendLine("insert into F_ITEM_INPUT(");
                    //sb.AppendLine("      INPUT_DATE ");
                    //sb.AppendLine("      ,INPUT_CD ");
                    //sb.AppendLine("      ,ITEM_CD ");
                    //sb.AppendLine("      ,LOT_NO ");
                    //sb.AppendLine("      ,INPUT_AMT ");
                    //sb.AppendLine("      ,INSTAFF ");
                    //sb.AppendLine("      ,INTIME ");
                    //sb.AppendLine(" ) values ( ");
                    //sb.AppendLine("       '" + item_date + "' ");
                    //sb.AppendLine("      ,@seq ");
                    //sb.AppendLine("      ,'" + txt_item_cd + "' ");
                    //sb.AppendLine("      ,'" + txt_lot_no + "' ");
                    //sb.AppendLine("      ,'" + input_amt + "' ");
                    //sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                    //sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                    //sb.AppendLine("      ) ");
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_DATE", flow_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }
        #endregion 작업공정 등록

        #region 작업공정 등록
        public int insert_Work_Flow2(
             string txt_lot_no
           , string txt_item_cd
           , conDataGridView[] dgv
           , Label[] lbl_flow_cd
           , Label[] lbl_flow_seq
           , Label[] lbl_item_iden
           , int flow_cnt
           , String strCustCD
           , int MaxSeq
            , string 현재고
            , string 식별표chk)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                //sb.AppendLine("declare @seq int ");
                //sb.AppendLine("select @seq =ISNULL(MAX(FLOW_CD),0)+1 from F_FLOW ");
                //sb.AppendLine("where FLOW_DATE = '" + flow_date + "' ");
                MessageBox.Show(dgv[0].Rows[MaxSeq].Cells[2].ColumnIndex.ToString());
                MessageBox.Show(dgv[0].Columns[2].Name.ToString());


                sb.AppendLine("insert into F_WORK_FLOW(");
                //sb.AppendLine("     ,FLOW_CD "); //1
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                //sb.AppendLine("     ,@seq");
                sb.AppendLine("     '" + txt_lot_no + "'");
                sb.AppendLine("      ,'" + dgv[0].Rows[MaxSeq].Cells[2].Value.ToString() + "'");
                sb.AppendLine("      ,'" + txt_item_cd + "' ");
                sb.AppendLine("     ,'S'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");



                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {

                        sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                        sb.AppendLine("      LOT_NO ");//1
                        sb.AppendLine("      ,ITEM_CD ");//2
                        sb.AppendLine("      ,CUST_CD");//3
                        sb.AppendLine("      ,LOT_SUB ");//4
                        sb.AppendLine("      ,F_STEP ");//5
                        sb.AppendLine("      ,FLOW_CD ");//6
                        sb.AppendLine("      ,SEQ ");        //7
                        sb.AppendLine("      ,F_SUB_DATE ");//8
                        sb.AppendLine("      ,INPUT_AMT ");//9
                        sb.AppendLine("      ,LOSS ");//10

                        sb.AppendLine("      ,POOR_AMT ");//12
                        sb.AppendLine("      ,F_SUB_AMT");//13
                        sb.AppendLine("      ,COMPLETE_YN ");//14
                        sb.AppendLine("      ,CHECK_YN ");//15
                        sb.AppendLine("      ,ITEM_CHECK_YN ");//16
                        sb.AppendLine("      ,INSTAFF ");//17
                        sb.AppendLine("      ,INTIME ");//18
                        sb.AppendLine("      ,COMMENT ");//19
                        sb.AppendLine("      ,INPUT_YN ");//20
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_lot_no + "' "); // lot no1
                        sb.AppendLine("      ,'" + txt_item_cd + "' ");   //2
                        sb.AppendLine("      ,'" + strCustCD + "'");//3
                        double real_AMT = double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[4].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[5].Value.ToString()).Replace(",", ""));

                        sb.AppendLine("      , '" + 1 + "' ");  // lot sub 4
                        sb.AppendLine("      , '" + (i + 1).ToString() + "' ");  //f _step 5
                        sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");   //6
                        sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//7
                        sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[2].Value.ToString() + "' "); //날짜 8
                        sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //input9
                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[4].Value.ToString()).Replace(",", "") + "' "); //loss10


                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[5].Value.ToString()).Replace(",", "") + "' "); //POOR_AMT 12
                        // 투입량에서 loss 빼고 불량빼고
                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "") + "' "); //F_SUB_AMT 13
                        sb.AppendLine("      , 'N' ");//14
                        sb.AppendLine("      , 'S' "); //S -> 대기 15
                        sb.AppendLine("      , 'S' "); //S -> 대기 16
                        //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '"+ lbl_flow_cd[i].Text.ToString()+"') ");
                        sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//17
                        sb.AppendLine("      , convert(varchar, getdate(), 120) ");//18
                        sb.AppendLine("      ,'' ");//19
                        if ((bool)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[0].Value)
                        {
                            sb.AppendLine("      ,'Y' ");//20
                        }
                        else
                        {
                            sb.AppendLine("      ,'N' ");//20

                        }

                        sb.AppendLine("      ) ");

                        if (식별표chk != null && !식별표chk.Equals(""))
                        {
                            if (i == int.Parse(식별표chk))
                            {


                                sb.AppendLine("declare @seq" + MaxSeq + " int ");
                                sb.AppendLine("select @seq" + MaxSeq + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                                sb.AppendLine("where INPUT_DATE = '" + dgv[i].Rows[MaxSeq].Cells[2].Value.ToString() + "' ");
                                sb.AppendLine("insert into F_ITEM_INPUT(");
                                sb.AppendLine("      INPUT_DATE ");//1
                                sb.AppendLine("      ,INPUT_CD ");
                                sb.AppendLine("      ,ITEM_CD ");//3
                                sb.AppendLine("      ,LOT_NO ");
                                sb.AppendLine("      ,LOT_SUB ");//sub
                                sb.AppendLine("      ,SEQ ");//5
                                sb.AppendLine("      ,F_STEP ");
                                sb.AppendLine("      ,FLOW_CD ");//7
                                sb.AppendLine("      ,INPUT_AMT ");
                                sb.AppendLine("      ,INSTAFF ");//9
                                sb.AppendLine("      ,INTIME ");
                                sb.AppendLine("      ,CURR_AMT ");//11
                                sb.AppendLine("      ,COMPLETE_YN ");//12
                                sb.AppendLine(" ) values ( ");
                                sb.AppendLine("       '" + dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[2].Value.ToString() + "' ");//1
                                sb.AppendLine("      ,@seq" + MaxSeq + " ");
                                sb.AppendLine("      ,'" + txt_item_cd + "' ");//3
                                sb.AppendLine("      ,'" + txt_lot_no + "' ");
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//sub
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//5
                                sb.AppendLine("      , '" + (i + 1).ToString() + "' "); //f_step
                                sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' "); //flow_cd 7
                                // sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "").ToString() + "' ");  //공정 마지막 의 불량을 안빼주고 완료생산량을 저장하길래 공정마지막 갯수 저장하는것 삭제하고 마지막갯수에서 마지막 불량 뺄셈하고 저장 
                                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//9
                                sb.AppendLine("      , convert(varchar, getdate(), 120) ");//10
                                sb.AppendLine("      , '" + 현재고 + "' ");  //11
                                sb.AppendLine("      , 'N' ");//12
                                sb.AppendLine("      ) ");

                            }
                        }



                    }
                }

                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }
        #endregion 작업공정 등록


        public int insert_Work_Flow2_K(
             string txt_lot_no
           , string txt_item_cd
           , DataGridView[] dgv
           , Label[] lbl_flow_cd
           , Label[] lbl_flow_seq
           , Label[] lbl_item_iden
           , int flow_cnt
           , String strCustCD
           , int MaxSeq)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                //sb.AppendLine("declare @seq int ");
                //sb.AppendLine("select @seq =ISNULL(MAX(FLOW_CD),0)+1 from F_FLOW ");
                //sb.AppendLine("where FLOW_DATE = '" + flow_date + "' ");


                sb.AppendLine("insert into F_WORK_FLOW(");
                //sb.AppendLine("     ,FLOW_CD "); //1
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                //sb.AppendLine("     ,@seq");
                sb.AppendLine("     '" + txt_lot_no + "'");
                sb.AppendLine("      ,'" + dgv[0].Rows[MaxSeq].Cells[2].Value.ToString() + "'");
                sb.AppendLine("      ,'" + txt_item_cd + "' ");
                sb.AppendLine("     ,'S'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");



                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {

                        sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                        sb.AppendLine("      LOT_NO ");//1
                        sb.AppendLine("      ,ITEM_CD ");//2
                        sb.AppendLine("      ,CUST_CD");//3
                        sb.AppendLine("      ,LOT_SUB ");//4
                        sb.AppendLine("      ,F_STEP ");//5
                        sb.AppendLine("      ,FLOW_CD ");//6
                        sb.AppendLine("      ,SEQ ");        //7
                        sb.AppendLine("      ,F_SUB_DATE ");//8
                        sb.AppendLine("      ,INPUT_AMT ");//9
                        sb.AppendLine("      ,LOSS ");//10

                        sb.AppendLine("      ,POOR_AMT ");//12
                        sb.AppendLine("      ,F_SUB_AMT");//13
                        sb.AppendLine("      ,COMPLETE_YN ");//14
                        sb.AppendLine("      ,CHECK_YN ");//15
                        sb.AppendLine("      ,ITEM_CHECK_YN ");//16
                        sb.AppendLine("      ,INSTAFF ");//17
                        sb.AppendLine("      ,INTIME ");//18
                        sb.AppendLine("      ,COMMENT ");//19
                        sb.AppendLine("      ,INPUT_YN ");//20
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_lot_no + "' "); // lot no1
                        sb.AppendLine("      ,'" + txt_item_cd + "' ");   //2
                        sb.AppendLine("      ,'" + strCustCD + "'");//3
                        double real_AMT = double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[4].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[5].Value.ToString()).Replace(",", ""));

                        sb.AppendLine("      , '" + 1 + "' ");  // lot sub 4
                        sb.AppendLine("      , '" + (i + 1).ToString() + "' ");  //f _step 5
                        sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");   //6
                        sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//7
                        sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[2].Value.ToString() + "' "); //날짜 8
                        sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //input9
                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[4].Value.ToString()).Replace(",", "") + "' "); //loss10


                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[5].Value.ToString()).Replace(",", "") + "' "); //POOR_AMT 12
                        // 투입량에서 loss 빼고 불량빼고
                        sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "") + "' "); //F_SUB_AMT 13
                        sb.AppendLine("      , 'N' ");//14
                        sb.AppendLine("      , 'S' "); //S -> 대기 15
                        sb.AppendLine("      , 'S' "); //S -> 대기 16
                        //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '"+ lbl_flow_cd[i].Text.ToString()+"') ");
                        sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//17
                        sb.AppendLine("      , convert(varchar, getdate(), 120) ");//18
                        sb.AppendLine("      ,'' ");//19
                        if ((bool)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[0].Value)
                        {
                            sb.AppendLine("      ,'Y' ");//20
                        }
                        else
                        {
                            sb.AppendLine("      ,'N' ");//20

                        }

                        sb.AppendLine("      ) ");


                        if (i == flow_cnt - 1)
                        {


                            sb.AppendLine("declare @seq" + MaxSeq + " int ");
                            sb.AppendLine("select @seq" + MaxSeq + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                            sb.AppendLine("where INPUT_DATE = '" + dgv[flow_cnt - 1].Rows[MaxSeq].Cells[2].Value.ToString() + "' ");
                            sb.AppendLine("insert into F_ITEM_INPUT(");
                            sb.AppendLine("      INPUT_DATE ");//1
                            sb.AppendLine("      ,INPUT_CD ");
                            sb.AppendLine("      ,ITEM_CD ");//3
                            sb.AppendLine("      ,LOT_NO ");
                            sb.AppendLine("      ,LOT_SUB ");//sub
                            sb.AppendLine("      ,SEQ ");//5
                            sb.AppendLine("      ,F_STEP ");
                            sb.AppendLine("      ,FLOW_CD ");//7
                            sb.AppendLine("      ,INPUT_AMT ");
                            sb.AppendLine("      ,INSTAFF ");//9
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,CURR_AMT ");//11
                            sb.AppendLine("      ,COMPLETE_YN ");//12
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("       '" + dgv[flow_cnt - 1].Rows[dgv[flow_cnt - 1].Rows.Count - 1].Cells[2].Value.ToString() + "' ");//1
                            sb.AppendLine("      ,@seq" + MaxSeq + " ");
                            sb.AppendLine("      ,'" + txt_item_cd + "' ");//3
                            sb.AppendLine("      ,'" + txt_lot_no + "' ");
                            sb.AppendLine("      , '" + 1 + "' ");//sub
                            sb.AppendLine("      , '" + (string)dgv[flow_cnt - 1].Rows[dgv[flow_cnt - 1].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//5
                            sb.AppendLine("      , '" + (flow_cnt).ToString() + "' "); //f_step
                            sb.AppendLine("      , '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' "); //flow_cd 7
                            // sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[dgv[flow_cnt - 1].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "").ToString() + "' ");  //공정 마지막 의 불량을 안빼주고 완료생산량을 저장하길래 공정마지막 갯수 저장하는것 삭제하고 마지막갯수에서 마지막 불량 뺄셈하고 저장 
                            sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//9
                            sb.AppendLine("      , convert(varchar, getdate(), 120) ");//10
                            sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[dgv[flow_cnt - 1].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "").ToString() + "' ");  //11
                            sb.AppendLine("      , 'N' ");//12
                            sb.AppendLine("      ) ");

                        }

                    }
                }

                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insert_Work_Flow3_K(
             string txt_lot_no
           , string txt_item_cd

           , String lot_sub
            , string flow_step
            , string flow_cd

           , string str투입량
            , string str로스
            , string str불량
            , string str완료
            , DataGridView dgv
            , string str체크여부
            , string 식별표발행
            , string 현재고
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("DECLARE @NUM INT");
                sb.AppendLine(" select @NUM=COUNT(*)  from F_WORK_FLOW ");
                sb.AppendLine("where LOT_NO='" + txt_lot_no + "'");
                sb.AppendLine("IF(@NUM != 1)");

                sb.AppendLine("insert into F_WORK_FLOW(");

                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");

                sb.AppendLine("     '" + txt_lot_no + "'");
                sb.AppendLine("      ,'" + flow_date + "'");
                sb.AppendLine("      ,'" + txt_item_cd + "' ");
                sb.AppendLine("     ,'S'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");




                sb.AppendLine("DECLARE @seq INT");
                sb.AppendLine(" select @seq=COUNT(*)  from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("where LOT_NO='" + txt_lot_no + "'and f_step='" + flow_step + "'");
                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");//1
                sb.AppendLine("      ,ITEM_CD ");//2

                sb.AppendLine("      ,LOT_SUB ");//4
                sb.AppendLine("      ,F_STEP ");//5
                sb.AppendLine("      ,FLOW_CD ");//6
                sb.AppendLine("      ,SEQ ");        //7
                sb.AppendLine("      ,F_SUB_DATE ");//8
                sb.AppendLine("      ,INPUT_AMT ");//9
                sb.AppendLine("      ,LOSS ");//10

                sb.AppendLine("      ,POOR_AMT ");//12
                sb.AppendLine("      ,F_SUB_AMT");//13

                sb.AppendLine("      ,COMPLETE_YN ");//14
                sb.AppendLine("      ,CHECK_YN ");//15
                sb.AppendLine("      ,ITEM_CHECK_YN ");//16
                sb.AppendLine("      ,INSTAFF ");//17
                sb.AppendLine("      ,INTIME ");//18
                sb.AppendLine("      ,COMMENT ");//19
                sb.AppendLine("      ,INPUT_YN ");//20
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' "); // lot no1
                sb.AppendLine("      ,'" + txt_item_cd + "' ");   //2

                sb.AppendLine("      ,'" + lot_sub + "' ");   //4
                sb.AppendLine("      ,'" + flow_step + "' ");   //5
                sb.AppendLine("      ,'" + flow_cd + "' ");   //6
                sb.AppendLine("      ,@seq+1 ");   //seq 7
                sb.AppendLine("      ,'" + flow_date + "' ");   //F_SUB_DATE 8
                sb.AppendLine("      ,'" + str투입량.Replace(",", "") + "' ");   //INPUT_AMT 9
                sb.AppendLine("      ,'" + str로스.Replace(",", "") + "' ");    //LOSS 10
                sb.AppendLine("      ,'" + str불량.Replace(",", "") + "' ");  //POOR_AMT 12
                sb.AppendLine("      ,'" + str완료.Replace(",", "") + "' ");  //F_SUB_AMT 13
                sb.AppendLine("      ,'N' ");
                sb.AppendLine("      ,'" + str체크여부 + "' ");
                sb.AppendLine("      , 'S' "); //S -> 대기 16
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//17
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");//18
                sb.AppendLine("      ,'' ");//19
                if (식별표발행 == "Y")
                {
                    sb.AppendLine("      ,'Y' ");//20

                }
                else
                {
                    sb.AppendLine("      ,'N' ");//20

                }
                sb.AppendLine("     )");//19



                if (식별표발행 == "Y")
                {
                    sb.AppendLine("declare @seq2 int ");
                    sb.AppendLine("select @seq2 =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                    sb.AppendLine("where INPUT_DATE = '" + flow_date + "' ");
                    sb.AppendLine("insert into F_ITEM_INPUT(");
                    sb.AppendLine("      INPUT_DATE ");//1
                    sb.AppendLine("      ,INPUT_CD ");
                    sb.AppendLine("      ,ITEM_CD ");//3
                    sb.AppendLine("      ,LOT_NO ");
                    sb.AppendLine("      ,LOT_SUB ");//sub
                    sb.AppendLine("      ,SEQ ");//5
                    sb.AppendLine("      ,F_STEP ");
                    sb.AppendLine("      ,FLOW_CD ");//7
                    sb.AppendLine("      ,INPUT_AMT ");
                    sb.AppendLine("      ,INSTAFF ");//9
                    sb.AppendLine("      ,INTIME ");
                    sb.AppendLine("      ,CURR_AMT ");//11
                    sb.AppendLine("      ,COMPLETE_YN ");//12
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("       '" + flow_date + "' ");//1
                    sb.AppendLine("      ,@seq2 ");
                    sb.AppendLine("      ,'" + txt_item_cd + "' ");//3
                    sb.AppendLine("      ,'" + txt_lot_no + "' ");
                    sb.AppendLine("      , '" + lot_sub + "' ");//sub
                    sb.AppendLine("      , @seq+1 ");//5
                    sb.AppendLine("      , '" + flow_step + "' "); //f_step
                    sb.AppendLine("      , '" + flow_cd + "' "); //flow_cd 7

                    sb.AppendLine("      ,'" + str완료.Replace(",", "") + "' ");
                    sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//9
                    sb.AppendLine("      , convert(varchar, getdate(), 120) ");//10
                    sb.AppendLine("      ,'" + 현재고.Replace(",", "") + "' ");
                    sb.AppendLine("      , 'N' ");//12
                    sb.AppendLine("      ) ");
                }

                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insert_Work_Flow3(
             string txt_lot_no
           , string txt_item_cd
           , conDataGridView[] dgv
           , Label[] lbl_flow_cd
           , Label[] lbl_flow_seq
           , Label[] lbl_item_iden
           , int flow_cnt
           , String strCustCD
           , int MaxSeq
            , string 현재고
            , string 식별표chk)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                //sb.AppendLine("declare @seq int ");
                //sb.AppendLine("select @seq =ISNULL(MAX(FLOW_CD),0)+1 from F_FLOW ");
                //sb.AppendLine("where FLOW_DATE = '" + flow_date + "' ");




                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {
                        for (int j = 0; j < dgv[i].Rows.Count; j++)
                        {
                            dgv[i].Rows[j].Cells[7].Value = dgv[i].Rows[j].Cells[7].Value ?? "";
                            if (dgv[i].Rows[j].Cells[7].Value.ToString() != "clear")
                            {



                                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                                sb.AppendLine("      LOT_NO ");//1
                                sb.AppendLine("      ,ITEM_CD ");//2
                                sb.AppendLine("      ,CUST_CD");//3
                                sb.AppendLine("      ,LOT_SUB ");//4
                                sb.AppendLine("      ,F_STEP ");//5
                                sb.AppendLine("      ,FLOW_CD ");//6
                                sb.AppendLine("      ,SEQ ");        //7
                                sb.AppendLine("      ,F_SUB_DATE ");//8
                                sb.AppendLine("      ,INPUT_AMT ");//9
                                sb.AppendLine("      ,LOSS ");//10

                                sb.AppendLine("      ,POOR_AMT ");//12
                                sb.AppendLine("      ,F_SUB_AMT");//13
                                sb.AppendLine("      ,COMPLETE_YN ");//14
                                sb.AppendLine("      ,CHECK_YN ");//15
                                sb.AppendLine("      ,ITEM_CHECK_YN ");//16
                                sb.AppendLine("      ,INSTAFF ");//17
                                sb.AppendLine("      ,INTIME ");//18
                                sb.AppendLine("      ,COMMENT ");//19
                                sb.AppendLine("      ,INPUT_YN ");//20
                                sb.AppendLine(" ) values ( ");
                                sb.AppendLine("      '" + txt_lot_no + "' "); // lot no1
                                sb.AppendLine("      ,'" + txt_item_cd + "' ");   //2
                                sb.AppendLine("      ,'" + strCustCD + "'");//3
                                double real_AMT = double.Parse(((string)dgv[i].Rows[j].Cells[3].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[j].Cells[4].Value.ToString()).Replace(",", "")) + double.Parse(((string)dgv[i].Rows[j].Cells[5].Value.ToString()).Replace(",", ""));

                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value.ToString() + "' ");  // lot sub 4
                                sb.AppendLine("      , '" + (i + 1).ToString() + "' ");  //f _step 5
                                sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");   //6
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value.ToString() + "' ");//7
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[2].Value.ToString() + "' "); //날짜 8
                                sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //input9
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[4].Value.ToString()).Replace(",", "") + "' "); //loss10


                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[5].Value.ToString()).Replace(",", "") + "' "); //POOR_AMT 12
                                // 투입량에서 loss 빼고 불량빼고
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[3].Value.ToString()).Replace(",", "") + "' "); //F_SUB_AMT 13
                                sb.AppendLine("      , 'N' ");//14
                                sb.AppendLine("      , 'S' "); //S -> 대기 15
                                sb.AppendLine("      , 'S' "); //S -> 대기 16
                                //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '"+ lbl_flow_cd[i].Text.ToString()+"') ");
                                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//17
                                sb.AppendLine("      , convert(varchar, getdate(), 120) ");//18
                                sb.AppendLine("      ,'' ");//19
                                if ((bool)dgv[i].Rows[j].Cells[0].Value)
                                {
                                    sb.AppendLine("      ,'Y' ");//20
                                }
                                else
                                {
                                    sb.AppendLine("      ,'N' ");//20

                                }

                                sb.AppendLine("      ) ");

                                if (i == int.Parse(식별표chk))
                                {
                                    sb.AppendLine("declare @seq" + MaxSeq + " int ");
                                    sb.AppendLine("select @seq" + MaxSeq + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                                    sb.AppendLine("where INPUT_DATE = '" + dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[2].Value.ToString() + "' ");
                                    sb.AppendLine("insert into F_ITEM_INPUT(");
                                    sb.AppendLine("      INPUT_DATE ");//1
                                    sb.AppendLine("      ,INPUT_CD ");
                                    sb.AppendLine("      ,ITEM_CD ");//3
                                    sb.AppendLine("      ,LOT_NO ");
                                    sb.AppendLine("      ,LOT_SUB ");//sub
                                    sb.AppendLine("      ,SEQ ");//5
                                    sb.AppendLine("      ,F_STEP ");
                                    sb.AppendLine("      ,FLOW_CD ");//7
                                    sb.AppendLine("      ,INPUT_AMT ");
                                    sb.AppendLine("      ,INSTAFF ");//9
                                    sb.AppendLine("      ,INTIME ");
                                    sb.AppendLine("      ,CURR_AMT ");//11
                                    sb.AppendLine("      ,COMPLETE_YN ");//12
                                    sb.AppendLine(" ) values ( ");
                                    sb.AppendLine("       '" + dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[2].Value.ToString() + "' ");//1
                                    sb.AppendLine("      ,@seq" + MaxSeq + " ");
                                    sb.AppendLine("      ,'" + txt_item_cd + "' ");//3
                                    sb.AppendLine("      ,'" + txt_lot_no + "' ");
                                    sb.AppendLine("      , '" + 1 + "' ");//sub
                                    sb.AppendLine("      , '" + (string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[1].Value.ToString() + "' ");//5
                                    sb.AppendLine("      , '" + (i + 1).ToString() + "' "); //f_step
                                    sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' "); //flow_cd 7
                                    // sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                                    sb.AppendLine("      , '" + ((string)dgv[i].Rows[dgv[i].Rows.Count - 1].Cells[3].Value.ToString()).Replace(",", "").ToString() + "' ");  //공정 마지막 의 불량을 안빼주고 완료생산량을 저장하길래 공정마지막 갯수 저장하는것 삭제하고 마지막갯수에서 마지막 불량 뺄셈하고 저장 
                                    sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");//9
                                    sb.AppendLine("      , convert(varchar, getdate(), 120) ");//10
                                    sb.AppendLine("      , '" + 현재고 + "' ");  //11
                                    sb.AppendLine("      , 'N' ");//12
                                    sb.AppendLine("      ) ");
                                }


                            }
                        }
                    }
                }
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #region 제품출고 등록
        public int insertItemOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , string vat_cd
        , string all_supply_money
        , string all_tax_money
        , string all_total_money
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(convert(int,MAX(OUTPUT_CD)),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @sales_seq int ");
                sb.AppendLine("select @sales_seq =ISNULL(convert(int,MAX(SALES_CD)),0)+1 from F_SALES ");
                sb.AppendLine("where SALES_DATE = '" + out_date + "' ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + cmb_stor + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                //매출 등록
                sb.AppendLine("insert into F_SALES(");
                sb.AppendLine("     SALES_DATE");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine("     ,SALES_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,OUTPUT_DATE ");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_supply_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_tax_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + vat_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");
                //매출 등록

                //거래처 잔고 상승! 
                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE +'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                bool isCustDay = isCustDayTotal(out_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(out_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + " + all_total_money.Replace(",", "") + "  ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));
                //거래처 잔고 상승! 



                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");

                        sb.AppendLine("declare @sales_seq" + i + " int ");
                        sb.AppendLine("select @sales_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_SALES_DETAIL ");
                        sb.AppendLine("where SALES_DATE = '" + out_date + "' ");
                        sb.AppendLine("and SALES_CD =  @sales_seq ");


                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,TAX_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,INP_SEQ "); // alter table f_item_out_detail add INP_SEQ nvarchar (10)
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@out_seq" + i + " ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_SEQ"].Value + "' ");
                        sb.AppendLine("  )");


                        sb.AppendLine("insert into F_SALES_DETAIL(");
                        sb.AppendLine("      SALES_DATE   ");      //1
                        sb.AppendLine("     ,SALES_CD    ");       //2
                        sb.AppendLine("     ,SEQ    ");            //3
                        sb.AppendLine("     ,ITEM_CD    ");        //4
                        sb.AppendLine("     ,OUTPUT_DATE    ");    //5
                        sb.AppendLine("     ,OUTPUT_CD    ");      //6
                        sb.AppendLine("     ,OUTPUT_SEQ    ");     //7
                        sb.AppendLine("     ,INPUT_DATE    ");     //8
                        sb.AppendLine("     ,INPUT_CD    ");       //9
                        sb.AppendLine("     ,LOT_NO    ");         //10
                        sb.AppendLine("     ,LOT_SUB    ");        //11
                        sb.AppendLine("     ,TOTAL_AMT    ");      //12
                        sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                        sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                        sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                        sb.AppendLine("     ,TAX_MONEY    ");      //16
                        sb.AppendLine("     ,INTIME    ");         //17
                        sb.AppendLine("     ,INSTAFF    ");        //18
                        sb.AppendLine("     ,PRINT_YN    ");       //19
                        sb.AppendLine("     ,TAX_CD    ");         //20
                        sb.AppendLine("  ) values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                               //1
                        sb.AppendLine("      ,@sales_seq ");                                                                                     //2
                        sb.AppendLine("     ,@sales_seq" + i + " ");                                                                             //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                         //4
                        sb.AppendLine("     ,'" + out_date + "' ");                                                                              //5
                        sb.AppendLine("     ,@seq  ");                                                                                           //6
                        sb.AppendLine("     ,@out_seq" + i + "  ");                                                                              //7
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                                      //8
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                                        //9
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                          //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                         //11
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");             //12
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                        sb.AppendLine("     ,'N' ");                                                                                             //19
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                          //20
                        sb.AppendLine("  )");


                        sb.AppendLine(" declare @chk" + i + " int  ");
                        sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                        sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                        sb.AppendLine(" if @chk" + i + " > 0  ");
                        sb.AppendLine(" begin  ");
                        sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                        sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                        sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                        sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("      AND P_GUBUN = '2' ");
                        sb.AppendLine(" end ");
                        sb.AppendLine(" else begin ");
                        sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                        sb.AppendLine("      CUST_CD ");
                        sb.AppendLine("      ,PROD_CD ");
                        sb.AppendLine("      ,B_BOX_PRICE ");
                        sb.AppendLine("      ,S_BOX_PRICE ");
                        sb.AppendLine("      ,UNIT_PRICE ");
                        sb.AppendLine("      ,INSTAFF ");
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,P_GUBUN ");
                        sb.AppendLine("   )VALUES(  ");
                        sb.AppendLine("   '" + txt_cust_cd + "'  ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("   ,'2' ");
                        sb.AppendLine(" ) ");
                        sb.AppendLine(" end ");

                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }
                Debug.WriteLine(sb);
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_SALES_MES");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        //제품 출하 지시 

        public int insertItemOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , string vat_cd
        , string jumun_date
        , string jumun_cd
        , string all_supply_money
        , string all_tax_money
        , string all_total_money
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(convert(int,MAX(OUTPUT_CD)),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @sales_seq int ");
                sb.AppendLine("select @sales_seq =ISNULL(convert(int,MAX(SALES_CD)),0)+1 from F_SALES ");
                sb.AppendLine("where SALES_DATE = '" + out_date + "' ");

                //제품 출고 
                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,JUMUN_DATE ");
                sb.AppendLine("     ,JUMUN_CD ");
                sb.AppendLine("     ,SALES_DATE ");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + cmb_stor + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + jumun_date + "' ");
                sb.AppendLine("     ,'" + jumun_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine(" ) ");
                //제품 출고

                //매출 등록
                sb.AppendLine("insert into F_SALES(");
                sb.AppendLine("     SALES_DATE");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine("     ,SALES_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,OUTPUT_DATE ");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_supply_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_tax_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + vat_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");
                //매출 등록

                //주문 납품 완료
                sb.AppendLine(" UPDATE F_JUMUN ");
                sb.AppendLine(" SET COMPLETE_YN = 'Y' ");
                sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' and JUMUN_CD = '" + jumun_cd + "'  ");
                //주문 납품 완료


                //거래처 잔고 상승! 
                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE +'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                bool isCustDay = isCustDayTotal(out_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(out_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + " + all_total_money.Replace(",", "") + "  ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));
                //거래처 잔고 상승! 



                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");


                        sb.AppendLine("declare @sales_seq" + i + " int ");
                        sb.AppendLine("select @sales_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_SALES_DETAIL ");
                        sb.AppendLine("where SALES_DATE = '" + out_date + "' ");
                        sb.AppendLine("and SALES_CD =  @sales_seq ");

                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");                                                            //1
                        sb.AppendLine("     ,OUTPUT_CD ");                                                             //2
                        sb.AppendLine("     ,SEQ ");                                                                   //3
                        sb.AppendLine("     ,LOT_NO ");                                                                //4
                        sb.AppendLine("     ,LOT_SUB ");                                                               //5
                        sb.AppendLine("     ,ITEM_CD ");                                                               //6
                        sb.AppendLine("     ,UNIT_CD ");                                                               //7
                        sb.AppendLine("     ,OUTPUT_AMT ");                                                            //8
                        sb.AppendLine("     ,PRICE ");                                                                 //9
                        sb.AppendLine("     ,TOTAL_MONEY ");                                                           //10
                        sb.AppendLine("     ,INPUT_DATE ");                                                            //11
                        sb.AppendLine("     ,INPUT_CD ");                                                              //12
                        sb.AppendLine("     ,TAX_CD ");                                                                //13
                        sb.AppendLine("     ,CUST_CD ");                                                               //14
                        sb.AppendLine("     ,INSTAFF ");                                                               //15
                        sb.AppendLine("     ,INTIME ");                                                                //16
                        sb.AppendLine("     ,INP_SEQ "); // alter table f_item_out_detail add INP_SEQ nvarchar (10)    //17
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                      //1
                        sb.AppendLine("      ,@seq ");                                                                                  //2
                        sb.AppendLine("     ,@out_seq" + i + " ");                                                                      //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                 //4
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                //5
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                //6
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");                                //7
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");    //8
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");         //9
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");   //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                             //11
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                               //12
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                 //13
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");                                //14
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                          //15
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                      //16
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_SEQ"].Value + "' ");                              //17
                        sb.AppendLine("  )");

                        sb.AppendLine("insert into F_SALES_DETAIL(");
                        sb.AppendLine("      SALES_DATE   ");      //1
                        sb.AppendLine("     ,SALES_CD    ");       //2
                        sb.AppendLine("     ,SEQ    ");            //3
                        sb.AppendLine("     ,ITEM_CD    ");        //4
                        sb.AppendLine("     ,OUTPUT_DATE    ");    //5
                        sb.AppendLine("     ,OUTPUT_CD    ");      //6
                        sb.AppendLine("     ,OUTPUT_SEQ    ");     //7
                        sb.AppendLine("     ,INPUT_DATE    ");     //8
                        sb.AppendLine("     ,INPUT_CD    ");       //9
                        sb.AppendLine("     ,LOT_NO    ");         //10
                        sb.AppendLine("     ,LOT_SUB    ");        //11
                        sb.AppendLine("     ,TOTAL_AMT    ");      //12
                        sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                        sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                        sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                        sb.AppendLine("     ,TAX_MONEY    ");      //16
                        sb.AppendLine("     ,INTIME    ");         //17
                        sb.AppendLine("     ,INSTAFF    ");        //18
                        sb.AppendLine("     ,PRINT_YN    ");       //19
                        sb.AppendLine("     ,TAX_CD    ");         //20
                        sb.AppendLine("  ) values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                               //1
                        sb.AppendLine("      ,@sales_seq ");                                                                                     //2
                        sb.AppendLine("     ,@sales_seq" + i + " ");                                                                             //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                         //4
                        sb.AppendLine("     ,'" + out_date + "' ");                                                                              //5
                        sb.AppendLine("     ,@seq  ");                                                                                           //6
                        sb.AppendLine("     ,@out_seq" + i + "  ");                                                                              //7
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                                      //8
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                                        //9
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                          //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                         //11
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");             //12
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                        sb.AppendLine("     ,'N' ");                                                                                             //19
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                          //20
                        sb.AppendLine("  )");


                        sb.AppendLine(" declare @chk" + i + " int  ");
                        sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                        sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                        sb.AppendLine(" if @chk" + i + " > 0  ");
                        sb.AppendLine(" begin  ");
                        sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                        sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                        sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                        sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("      AND P_GUBUN = '2' ");
                        sb.AppendLine(" end ");
                        sb.AppendLine(" else begin ");
                        sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                        sb.AppendLine("      CUST_CD ");
                        sb.AppendLine("      ,PROD_CD ");
                        sb.AppendLine("      ,B_BOX_PRICE ");
                        sb.AppendLine("      ,S_BOX_PRICE ");
                        sb.AppendLine("      ,UNIT_PRICE ");
                        sb.AppendLine("      ,INSTAFF ");
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,P_GUBUN ");
                        sb.AppendLine("   )VALUES(  ");
                        sb.AppendLine("   '" + txt_cust_cd + "'  ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("   ,'2' ");
                        sb.AppendLine(" ) ");
                        sb.AppendLine(" end ");

                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }
                Debug.WriteLine(sb);
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_SALES_MES");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public int insertItemOutInst(
          string out_date
        , string out_cd
        , string out_seq)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();

                sb.AppendLine("insert into F_ITEM_OUT_INST(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine("     ,OUT_INST_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,'" + out_cd + "'");
                sb.AppendLine("     ,'" + out_seq + "'");
                sb.AppendLine("     ,'Y' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_OUT_INST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertHalfOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @OUTPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_HALF_OUT_TB");
                if (qResult > 0)
                {
                    sb = new StringBuilder();
                    sb.AppendLine("declare @OUT_CD int ");
                    sb.AppendLine("select @OUT_CD =ISNULL(MAX(OUTPUT_CD),0) from F_ITEM_OUT ");
                    sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("DECLARE	@return_value" + i + " int ");
                        sb.AppendLine("EXEC	@return_value" + i + " = [dbo].[SP_HALF_OUT] ");
                        sb.AppendLine("@OUTPUT_DATE = '" + out_date + "',");
                        sb.AppendLine("@OUTPUT_CD = @OUT_CD, ");
                        sb.AppendLine("@LOT_NO = '" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' , ");
                        sb.AppendLine("@LOT_SUB = '" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' , ");
                        sb.AppendLine("@ITEM_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' , ");
                        sb.AppendLine("@OUT_AMT = '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' , ");
                        sb.AppendLine("@STAFF_CD = '" + Common.p_strStaffNo + "'  ");
                        sb.AppendLine("SELECT	'RV' = @return_value" + i + " ");
                    }

                    sCommand = new SqlCommand(sb.ToString());

                    DataTable dt = wAdo.SqlCommandSelect(sCommand);
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["RV"].ToString().Equals("0"))
                        {
                            return 0;
                        }
                        else return 1;
                    }
                    else return 1;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        #endregion 제품출고 등록


        #region 공정이동표 자동 설정
        public int insert_Work_Flow_Move(
              string txt_lot_no
            , string txt_lot_sub
            , int f_step
            , int f_sub_amt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string f_sub_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("declare @item_cd nvarchar(20), @flow_cd nvarchar(20) ,@n_step int, @f_sub_amt numeric(18,0)");
                sb.AppendLine("select @item_cd = ITEM_CD ");
                sb.AppendLine("from F_WORK_FLOW ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                int n_step = f_step + 1;
                sb.AppendLine("select @flow_cd =  FLOW_CD, @n_step = SEQ ");
                sb.AppendLine(" from N_ITEM_FLOW ");
                sb.AppendLine("where ITEM_CD =@item_cd  ");
                sb.AppendLine("and SEQ = " + n_step + " "); //다음단계의 공정

                if (f_step > 0)
                {
                    sb.AppendLine("select @f_sub_amt = ISNULL(f_sub_amt,0)  ");
                    sb.AppendLine("from F_WORK_FLOW_DETAIL ");
                    sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' and LOT_SUB = '" + txt_lot_sub + "' and F_STEP = " + f_step + "  "); //공정 이동 전 마지막 단계의 수량 가져오기 
                }
                else
                {
                    sb.AppendLine("select @f_sub_amt = " + f_sub_amt + "  ");
                }

                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,LOT_SUB ");
                sb.AppendLine("      ,F_STEP ");
                sb.AppendLine("      ,FLOW_CD ");
                sb.AppendLine("      ,SEQ ");
                sb.AppendLine("      ,F_SUB_DATE ");
                sb.AppendLine("      ,F_SUB_AMT ");
                sb.AppendLine("      ,LOSS ");
                sb.AppendLine("      ,POOR_CD ");
                sb.AppendLine("      ,POOR_AMT ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,CHECK_YN ");
                sb.AppendLine("      ,ITEM_CHECK_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine("      ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + txt_lot_sub + "' ");
                sb.AppendLine("      , '" + n_step + "' ");
                sb.AppendLine("      , @flow_cd ");
                sb.AppendLine("      , @n_step ");
                sb.AppendLine("      , '" + f_sub_date + "' ");
                sb.AppendLine("      , @f_sub_amt");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , '' ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine("      ,'' ");
                sb.AppendLine("      ) ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_MOVE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }


        public int insert_Work_Flow_Move_First(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_item_cd
            , int txt_f_sub_amt
            , int f_step)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string f_date = DateTime.Today.ToString("yyyy-MM-dd");
                string f_sub_date = f_date;

                sb.AppendLine("insert into F_WORK_FLOW(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,FLOW_DATE ");
                sb.AppendLine("      ,ITEM_CD ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + f_date + "' ");
                sb.AppendLine("      , '" + txt_item_cd + "' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                int n_step = f_step + 1;
                sb.AppendLine("declare @flow_cd nvarchar(20) ,@n_step int");
                sb.AppendLine("select @flow_cd =  FLOW_CD, @n_step = SEQ ");
                sb.AppendLine(" from N_ITEM_FLOW ");
                sb.AppendLine("where ITEM_CD ='" + txt_item_cd + "'  ");
                sb.AppendLine("and SEQ = " + n_step + " "); //다음단계의 공정

                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,LOT_SUB ");
                sb.AppendLine("      ,F_STEP ");
                sb.AppendLine("      ,FLOW_CD ");
                sb.AppendLine("      ,SEQ ");
                sb.AppendLine("      ,F_SUB_DATE ");
                sb.AppendLine("      ,F_SUB_AMT ");
                sb.AppendLine("      ,LOSS ");
                sb.AppendLine("      ,POOR_CD ");
                sb.AppendLine("      ,POOR_AMT ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,CHECK_YN ");
                sb.AppendLine("      ,ITEM_CHECK_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine("      ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + txt_lot_sub + "' ");
                sb.AppendLine("      , '" + n_step + "' ");
                sb.AppendLine("      , @flow_cd ");
                sb.AppendLine("      , @n_step ");
                sb.AppendLine("      , '" + f_sub_date + "' ");
                sb.AppendLine("      , " + txt_f_sub_amt + " ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , '' ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine("      ,'' ");
                sb.AppendLine("      ) ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_MOVE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }
        #endregion 공정이동표 자동 설정
        #endregion insert

        #region update

        public int updateStaff(
            string txt_user_cd
            , string txt_user_nm
            , string dept_cd
            , string pos_cd
            , string stor_cd
            , string join_date
            , string txt_phone
            , string txt_login
            , string txt_pw
            , string comment
            , string join_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_STAFF_CODE set");
                sb.AppendLine("     STAFF_CD = @STAFF_CD ");
                sb.AppendLine("     ,STAFF_NM = @STAFF_NM ");
                sb.AppendLine("     ,JOIN_DATE  =@JOIN_DATE");
                sb.AppendLine("     ,PHONE_NUM = @PHONE_NUM ");
                sb.AppendLine("     ,DEPT_CD = @DEPT_CD ");
                sb.AppendLine("     ,POS_CD = @POS_CD");
                sb.AppendLine("     ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("     ,LOGIN_ID = @LOGIN_ID ");
                sb.AppendLine("     ,PW = @PW");
                sb.AppendLine("     ,JOIN_CD = @JOIN_CD ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine(" where STAFF_CD = @STAFF_CD");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);
                sCommand.Parameters.AddWithValue("@STAFF_NM", txt_user_nm);
                sCommand.Parameters.AddWithValue("@JOIN_DATE", join_date);
                sCommand.Parameters.AddWithValue("@PHONE_NUM", txt_phone);
                sCommand.Parameters.AddWithValue("@DEPT_CD", dept_cd);
                sCommand.Parameters.AddWithValue("@POS_CD", pos_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", stor_cd);
                sCommand.Parameters.AddWithValue("@LOGIN_ID", txt_login);
                sCommand.Parameters.AddWithValue("@PW", txt_pw);
                sCommand.Parameters.AddWithValue("@JOIN_CD", join_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int 공정완료(String txt_lot_no
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("      , complete_YN= 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("      , complete_YN= 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");


                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;


            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateDept(string txtDeptCd, string txtDeptNm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_DEPT_CODE set");
                sb.AppendLine("    DEPT_CD  = @DEPT_CD  ");
                sb.AppendLine("    ,DEPT_NM  = @DEPT_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where DEPT_CD =@DEPT_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);
                sCommand.Parameters.AddWithValue("@DEPT_NM", txtDeptNm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updatePos(string txt_pos_cd, string txt_pos_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_POS_CODE set");
                sb.AppendLine("    POS_CD  = @POS_CD  ");
                sb.AppendLine("    ,POS_NM  = @POS_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where POS_CD =@POS_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);
                sCommand.Parameters.AddWithValue("@POS_NM", txt_pos_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateStor(string txt_stor_cd, string txt_stor_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_STORAGE_CODE set");
                sb.AppendLine("    STORAGE_CD  = @STORAGE_CD  ");
                sb.AppendLine("    ,STORAGE_NM  = @STORAGE_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where STORAGE_CD =@STORAGE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_NM", txt_stor_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateType(string txt_type_cd, string txt_type_nm, string chk_poor_yn, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_TYPE_CODE set");
                sb.AppendLine("    TYPE_CD  = @TYPE_CD  ");
                sb.AppendLine("    ,TYPE_NM  = @TYPE_NM  ");
                sb.AppendLine("    ,POOR_TYPE_YN  = @POOR_TYPE_YN  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where TYPE_CD = @TYPE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);
                sCommand.Parameters.AddWithValue("@TYPE_NM", txt_type_nm);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_YN", chk_poor_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateUnit(string txt_unit_cd, string txt_unit_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_UNIT_CODE set");
                sb.AppendLine("    UNIT_CD  = @UNIT_CD  ");
                sb.AppendLine("    ,UNIT_NM  = @UNIT_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where UNIT_CD =@UNIT_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);
                sCommand.Parameters.AddWithValue("@UNIT_NM", txt_unit_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateLine(string txt_line_cd, string txt_line_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_LINE_CODE set");
                sb.AppendLine("    LINE_CD  = @LINE_CD  ");
                sb.AppendLine("    ,LINE_NM  = @LINE_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where LINE_CD =@LINE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);
                sCommand.Parameters.AddWithValue("@LINE_NM", txt_line_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updatePoor(string txt_poor_cd, string txt_poor_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_POOR_CODE set");
                sb.AppendLine("    POOR_NM  = @POOR_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where POOR_CD =@POOR_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);
                sCommand.Parameters.AddWithValue("@POOR_NM", txt_poor_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateFlow(string txt_flow_cd
            , string txt_flow_nm
            , string cmb_stor
            , string chk_flow_yn
            , string chk_item_gbn
            , string chk_flow_chk_yn
            , string chk_temp_yn
            , string chk_mold_yn
            , string cmb_poor
            , string chk_manager_yn
            , string manager_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine(" update N_FLOW_CODE set");
                sb.AppendLine("     FLOW_CD = @FLOW_CD ");
                sb.AppendLine("     ,FLOW_NM = @FLOW_NM ");
                sb.AppendLine("     ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("     ,FLOW_INSERT_YN = @FLOW_INSERT_YN");
                sb.AppendLine("     ,ITEM_IDEN_YN = @ITEM_IDEN_YN ");
                sb.AppendLine("     ,FLOW_CHK_YN = @FLOW_CHK_YN ");
                sb.AppendLine("     ,TEMP_TIME_YN  = @TEMP_TIME_YN");
                sb.AppendLine("     ,MOLD_YN = @MOLD_YN");
                sb.AppendLine("     ,POOR_TYPE_CD = @POOR_TYPE_CD");
                sb.AppendLine("     ,STAFF_YN = @STAFF_YN ");
                sb.AppendLine("     ,STAFF_CD = @STAFF_CD ");
                sb.AppendLine("     ,COMMENT = @COMMENT");
                sb.AppendLine(" where FLOW_CD = @FLOW_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@FLOW_NM", txt_flow_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@FLOW_INSERT_YN", chk_flow_yn);
                sCommand.Parameters.AddWithValue("@ITEM_IDEN_YN", chk_item_gbn);
                sCommand.Parameters.AddWithValue("@FLOW_CHK_YN", chk_flow_chk_yn);
                sCommand.Parameters.AddWithValue("@TEMP_TIME_YN", chk_temp_yn);
                sCommand.Parameters.AddWithValue("@MOLD_YN", chk_mold_yn);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_CD", cmb_poor);
                sCommand.Parameters.AddWithValue("@STAFF_YN", chk_manager_yn);
                sCommand.Parameters.AddWithValue("@STAFF_CD", manager_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateRawMat(
              string txt_raw_mat_cd
            , string txt_raw_mat_nm
            , string txt_spec
            , string txt_quality
            , string cmb_rat_mat_gbn
            , string cmb_type
            , string cmb_input_unit
            , string cmb_output_unit
            , double txt_conver_ratio
            , double txt_input_price
            , double txt_output_price
            , string cmb_line
            , string st_status_yn
            , string cmb_raw_stor
            , string cmb_used
            , string cmb_cust
            , string cmb_raw_chk
            , string part_no
            , string comment
            , string storage
            , string tax_cd
            , DataGridView dgv_cust
            , DataGridView del_cust
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" update N_RAW_CODE set");
                sb.AppendLine("     RAW_MAT_CD =  '"+txt_raw_mat_cd+"' ");
                sb.AppendLine("     ,RAW_MAT_NM = @RAW_MAT_NM ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,RAW_MAT_GUBUN = @RAW_MAT_GUBUN ");
                sb.AppendLine("     ,TYPE_CD = @TYPE_CD ");
                sb.AppendLine("     ,INPUT_UNIT = @INPUT_UNIT ");
                sb.AppendLine("     ,OUTPUT_UNIT = @OUTPUT_UNIT ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,CVR_RATIO = @CVR_RATIO ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE = @OUTPUT_PRICE ");
                sb.AppendLine("     ,ST_STATUS_YN = @ST_STATUS_YN ");
                sb.AppendLine("     ,RAW_STORAGE = @RAW_STORAGE ");
                sb.AppendLine("     ,EX_STAN_QUALITY = @EX_STAN_QUALITY ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,CHECK_GUBUN = @CHECK_GUBUN ");
                sb.AppendLine("     ,PART_NO = @PART_NO ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,TAX_CD = @TAX_CD ");
                sb.AppendLine(" where RAW_MAT_CD =  '"+txt_raw_mat_cd+"'  ");

                if (dgv_cust.Rows.Count > 0)
                {
                    for (int i = 0; i < dgv_cust.Rows.Count; i++)
                    {
                        string txt_seq = (string)dgv_cust.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @seq" + i + " int ");
                            sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_RAW_CUST ");
                            sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");

                            sb.AppendLine("insert into N_RAW_CUST(");
                            sb.AppendLine("     RAW_MAT_CD ");
                            sb.AppendLine("     ,CUST_CD ");
                            sb.AppendLine("     ,MAIN_YN ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                            sb.AppendLine("     ,'" + ((string)dgv_cust.Rows[i].Cells["CUST_CD"].Value) + "'");
                            if (dgv_cust.Rows[i].Cells[0].Value != null)
                            {
                                sb.AppendLine("   ,'Y'");
                                cmb_cust = (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value;
                            }
                            else
                            {
                                sb.AppendLine("   ,'N'");
                            }
                            sb.AppendLine("     ,@seq" + i + " ");
                            sb.AppendLine("     ,'" + dgv_cust.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                            sb.AppendLine("  )");



                        }
                        else
                        {
                            sb.AppendLine("update N_RAW_CUST set");
                            sb.AppendLine("       RAW_MAT_CD =  '" + txt_raw_mat_cd + "'   ");
                            sb.AppendLine("       ,CUST_CD =  '" + (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value + "' ");
                            if ((bool)dgv_cust.Rows[i].Cells[0].Value)
                            {
                                sb.AppendLine("       ,MAIN_YN =  'Y' ");
                                cmb_cust = (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value;
                            }
                            else
                            {
                                sb.AppendLine("       ,MAIN_YN =  'N' ");
                            }
                            sb.AppendLine(" ,COMMENT = '" + dgv_cust.Rows[i].Cells["COMMENT"].Value.ToString() + "'");
                            sb.AppendLine(" where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + dgv_cust.Rows[i].Cells["SEQ"].Value.ToString() + "'");




                        }
                        sb.AppendLine("delete from N_PRICE_INFO ");
                        sb.AppendLine("    where PROD_CD =  '"+txt_raw_mat_cd+"'   ");
                        sb.AppendLine("    and CUST_CD = '" + (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value + "'  ");

                        /*원자재 단가정리 테이블 추가*/
                        sb.AppendLine("INSERT INTO N_PRICE_INFO ( ");
                        sb.AppendLine("CUST_CD,                                           ");
                        sb.AppendLine("PROD_CD,                                           ");
                        sb.AppendLine("B_BOX_PRICE,                                       ");
                        sb.AppendLine("S_BOX_PRICE,                                       ");
                        sb.AppendLine("UNIT_PRICE,                                        ");
                        sb.AppendLine("INSTAFF,                                           ");
                        sb.AppendLine("INTIME,                                            ");
                        sb.AppendLine("P_GUBUN )                                          ");
                        sb.AppendLine("VALUES (                                           ");
                        sb.AppendLine("     '" + (string)dgv_cust.Rows[i].Cells["CUST_CD"].Value + "' ");
                        sb.AppendLine(" ,  '"+txt_raw_mat_cd+"'   ");
                        sb.AppendLine(" , '0'");
                        sb.AppendLine(" , '0'");
                        sb.AppendLine(" , '0'");
                        sb.AppendLine("  , '" + Common.p_strStaffNo + "'  ");
                        sb.AppendLine("  , convert(varchar, getdate(), 120)   ");
                        sb.AppendLine(" , '1'"); //원자재:1 , 제품: 2
                        sb.AppendLine("  )");

                    }
                }
                if (del_cust.Rows.Count > 0)
                {
                    for (int i = 0; i < del_cust.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_RAW_CUST ");
                        sb.AppendLine("    where CUST_CD = '" + (string)del_cust.Rows[i].Cells["CUST_CD"].Value + "' ");

                        sb.AppendLine("delete from N_PRICE_INFO ");
                        sb.AppendLine("    where CUST_CD = '" + (string)del_cust.Rows[i].Cells["CUST_CD"].Value + "' ");

                    }
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", txt_raw_mat_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@RAW_MAT_GUBUN", cmb_rat_mat_gbn);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@INPUT_UNIT", cmb_input_unit);
                sCommand.Parameters.AddWithValue("@OUTPUT_UNIT", cmb_output_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@CVR_RATIO", txt_conver_ratio);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@ST_STATUS_YN", st_status_yn);
                sCommand.Parameters.AddWithValue("@RAW_STORAGE", storage);
                sCommand.Parameters.AddWithValue("@EX_STAN_QUALITY", txt_quality);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@CHECK_GUBUN", cmb_raw_chk);
                sCommand.Parameters.AddWithValue("@PART_NO", part_no);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@TAX_CD", tax_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_MAT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateCust(
              string txt_cust_cd
            , string cust_gbn
            , string txt_cust_nm
            , string txt_owner
            , string txt_saup_no
            , string txt_uptae
            , string txt_jong
            , string txt_deal_type
            , string txt_post_no
            , string txt_addr
            , string txt_cust_manager
            , string txt_email
            , string txt_comp_phone
            , string txt_phone
            , string txt_fax
            , string txt_start_date
            , string cmb_manager
            , string cmb_used
            , string comment
            , string tax_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("      CUST_GUBUN = @CUST_GUBUN ");
                sb.AppendLine("     ,CUST_NM = @CUST_NM");
                sb.AppendLine("     ,OWNER = @OWNER ");
                sb.AppendLine("     ,SAUP_NO = @SAUP_NO ");
                sb.AppendLine("     ,UPTAE = @UPTAE ");
                sb.AppendLine("     ,JONGMOK = @JONGMOK ");
                sb.AppendLine("     ,DEAL_TYPE  = @DEAL_TYPE");
                sb.AppendLine("     ,POST_NO = @POST_NO ");
                sb.AppendLine("     ,ADDR = @ADDR");
                sb.AppendLine("     ,CUST_MANAGER = @CUST_MANAGER ");
                sb.AppendLine("     ,CUST_EMAIL = @CUST_EMAIL ");
                sb.AppendLine("     ,CUST_COMP_PHONE = @CUST_COMP_PHONE");
                sb.AppendLine("     ,CUST_PHONE = @CUST_PHONE");
                sb.AppendLine("     ,CUST_FAX = @CUST_FAX ");
                sb.AppendLine("     ,CUST_OPEN = @CUST_OPEN ");
                sb.AppendLine("     ,STAFF_CD  = @STAFF_CD");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,TAX_CD = @TAX_CD ");

                sb.AppendLine(" where CUST_CD = @CUST_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                sCommand.Parameters.AddWithValue("@CUST_NM", txt_cust_nm);
                sCommand.Parameters.AddWithValue("@OWNER", txt_owner);
                sCommand.Parameters.AddWithValue("@SAUP_NO", txt_saup_no);
                sCommand.Parameters.AddWithValue("@UPTAE", txt_uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", txt_jong);
                sCommand.Parameters.AddWithValue("@DEAL_TYPE", txt_deal_type);
                sCommand.Parameters.AddWithValue("@POST_NO", txt_post_no);
                sCommand.Parameters.AddWithValue("@ADDR", txt_addr);
                sCommand.Parameters.AddWithValue("@CUST_MANAGER", txt_cust_manager);
                sCommand.Parameters.AddWithValue("@CUST_EMAIL", txt_email);
                sCommand.Parameters.AddWithValue("@CUST_COMP_PHONE", txt_comp_phone);
                sCommand.Parameters.AddWithValue("@CUST_PHONE", txt_phone);
                sCommand.Parameters.AddWithValue("@CUST_FAX", txt_fax);
                sCommand.Parameters.AddWithValue("@CUST_OPEN", txt_start_date);
                sCommand.Parameters.AddWithValue("@STAFF_CD", cmb_manager);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@TAX_CD", tax_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "update_CUST_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Cust_List_Jang(string condition)
        {
            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    SELECT * ");
            sb.AppendLine("   FROM T_거래처정보 ");
            sb.AppendLine("   where 사업자번호='" + Common.p_saupNo + "'");
            sb.AppendLine(condition);
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect_Jang(sCommand);
        }

        public int updateChk(
              string txt_chk_cd
            , string chk_gbn
            , string txt_chk_nm
            , string txt_chk_ord
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_CHK_CODE set");
                sb.AppendLine("      CHK_GUBUN = @CHK_GUBUN ");
                sb.AppendLine("     ,CHK_ORD = @CHK_ORD");
                sb.AppendLine("     ,CHK_NM = @CHK_NM");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                sb.AppendLine(" where CHK_CD = @CHK_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);
                sCommand.Parameters.AddWithValue("@CHK_ORD", txt_chk_ord);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_chk_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateItem(
              string txt_item_cd
            , string txt_item_nm
            , string cmb_item_gbn
            , string txt_spec
            , string cmb_type
            , string cmb_line
            , string cmb_unit
            , string cmb_stor_loc
            , double txt_prop_stock
            , double txt_item_weight
            , double txt_input_price
            , double txt_output_price
            , double txt_char_amt
            , double txt_pack_amt
            , string cmb_cust
            , string chk_print_yn
            , string cmb_used
            , string input_date
            , string box_bar_cd
            , string box_amt
            , string unit_bar_cd
            , string unit_amt
            , string comment
            , string txt_link
            , string txt_vat_cd
            , conDataGridView comp_dgv
            , conDataGridView flow_dgv
            , conDataGridView half_dgv
            , DataGridView del_comp_dgv
            , DataGridView del_flow_dgv
            , DataGridView del_half_dgv
            , DataGridView 도면등록_dgv
            , DataGridView del_도면등록_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_ITEM_CODE set");
                sb.AppendLine("      ITEM_NM = @ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN = @ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,TYPE_CD = @TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD = @UNIT_CD ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,PROP_STOCK = @PROP_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT = @ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE = @OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT = @CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT = @PACK_AMT ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,PRINT_YN = @PRINT_YN ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD = @BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT = @BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD = @UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT = @UNIT_AMT ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,LINK_CD = " + (txt_link.Equals("") ? txt_item_cd : "'" + txt_link + "'"));
                sb.AppendLine("     ,VAT_CD =  @VAT_CD ");

                sb.AppendLine(" where ITEM_CD = @ITEM_CD ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)comp_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @seq" + i + " int ");
                            sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                            //MES 제품코드 보고 장터지기 코드가 있는지 확인하는부분 mes , 장터지기 nvarchar 인데 int로 바꿔서 찾고 ㅇ있으면 +1 해주는 형태 
                            sb.AppendLine("insert into N_ITEM_COMP(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@seq" + i + " ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update N_ITEM_COMP set");
                            sb.AppendLine("      RAW_MAT_CD =  '" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + comp_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (flow_dgv.Rows.Count > 0)
                {
                    /// 문제점 발생
                    /// 공정 업데이트에서 중간순서를 삭제했을때 문제점발생
                    /// ex seq 1234567 공정이 있을때 
                    ///  seq 23을 삭제하면   
                    ///  seq 14567 로 업데이트가 됨 
                    ///  새로 추가가 되면 max값만 찾고 +1형태임 
                    ///  변경사항
                    /// 데이터 다날리고
                    /// 처음부터 insert 하는 형태로 변경 
                    sb.AppendLine("delete N_ITEM_FLOW where ITEM_CD='" + txt_item_cd + "'");
                    for (int i = 0; i < flow_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)flow_dgv.Rows[i].Cells["F_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @f_seq" + i + " int ");
                            sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_FLOW(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,FLOW_CD ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,BOX_AMT ");
                            sb.AppendLine("     ,CVR_RATIO ");
                            sb.AppendLine("     ,CHARGE_AMT ");
                            sb.AppendLine("     ,ITEM_IDEN_YN ");
                            sb.AppendLine("     ,FLOW_SEQ ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@f_seq" + i + " ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0");
                            if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                            {
                                sb.AppendLine("     ,'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("     ,'N' ");
                            }
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_SEQ"].Value + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {

                            sb.AppendLine("declare @f_seq" + i + " int ");
                            sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_FLOW(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,FLOW_CD ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,BOX_AMT ");
                            sb.AppendLine("     ,CVR_RATIO ");
                            sb.AppendLine("     ,CHARGE_AMT ");
                            sb.AppendLine("     ,ITEM_IDEN_YN ");
                            sb.AppendLine("     ,FLOW_SEQ ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@f_seq" + i + " ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0");
                            if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                            {
                                sb.AppendLine("     ,'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("     ,'N' ");
                            }
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_SEQ"].Value + "' ");
                            sb.AppendLine("  )");
                            //sb.AppendLine("update N_ITEM_FLOW set");
                            //sb.AppendLine("      FLOW_CD =  '" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            //sb.AppendLine("     ,COMMENT =  '" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            //sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            //sb.AppendLine(" and SEQ = '" + flow_dgv.Rows[i].Cells["F_SEQ"].Value + "'");


                        }
                    }
                }

                if (half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < half_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)half_dgv.Rows[i].Cells["H_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @h_seq" + i + " int ");
                            sb.AppendLine("select @h_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP_HALF ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_COMP_HALF(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,HALF_ITEM_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@h_seq" + i + " ");
                            sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update N_ITEM_COMP_HALF set");
                            sb.AppendLine("      HALF_ITEM_CD =  '" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                        }
                    }
                }

                if (del_comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_COMP ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_comp_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                if (del_flow_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_flow_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_FLOW ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_flow_dgv.Rows[i].Cells["F_SEQ"].Value + "' ");
                    }
                }

                if (del_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_COMP_HALF ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_half_dgv.Rows[i].Cells["H_SEQ"].Value + "' ");
                    }
                }

                if (도면등록_dgv.Rows.Count > 0 && 도면등록_dgv.Rows[0].Cells["PIC_PATH"].Value != null)
                {
                    sb.AppendLine("declare @INPUT_CD int ");
                    string fp_input_date = DateTime.Today.ToString("yyyy-MM-dd");

                    for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                    {

                        string txt_seq = (string)도면등록_dgv.Rows[i].Cells["SEQ"].Value;

                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("select @INPUT_CD =ISNULL(MAX(INPUT_CD),0)+1 from F_DOCUMENT ");
                            sb.AppendLine("where INPUT_DATE = '" + fp_input_date + "' ");
                            sb.AppendLine("AND IMG_GUBUN = '1' ");

                            sb.AppendLine("INSERT INTO F_DOCUMENT (");
                            sb.AppendLine(" INPUT_DATE ");
                            sb.AppendLine(" ,INPUT_CD ");
                            sb.AppendLine(" ,IMG_GUBUN "); //1. 도면 2.밀시트
                            sb.AppendLine(" ,STAFF_CD ");
                            sb.AppendLine(" ,IMG_PATH ");
                            sb.AppendLine(" ,IMG ");
                            sb.AppendLine(" ,IMG_NAME ");
                            sb.AppendLine(" ,INTIME ");
                            sb.AppendLine(" ,INSTAFF");
                            sb.AppendLine(" ,ITEM_CD");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine(" '" + fp_input_date + "' ");
                            sb.AppendLine(" ,@INPUT_CD ");
                            sb.AppendLine(" ,'1' ");
                            sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,'" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "' ");
                            sb.AppendLine("     , @img" + i);
                            sb.AppendLine(" ,'" + 도면등록_dgv.Rows[i].Cells["IMG_NAME"].Value.ToString() + "' ");

                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,'" + txt_item_cd + "' ");
                            sb.AppendLine(" ) ");
                        }
                        else
                        {
                            sb.AppendLine(" update F_DOCUMENT set");
                            sb.AppendLine("      IMG = @img" + i); //이미지
                            sb.AppendLine("     ,IMG_PATH = '" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "'  ");
                            sb.AppendLine(" ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,UPTIME = convert(varchar,getdate(),120) ");
                            sb.AppendLine(" where INPUT_DATE = '" + 도면등록_dgv.Rows[i].Cells["INPUT_DATE"].Value.ToString() + "' ");
                            sb.AppendLine("     and INPUT_CD = '" + 도면등록_dgv.Rows[i].Cells["SEQ"].Value.ToString() + "' ");
                        }



                    }
                }

                if (del_도면등록_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_도면등록_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_DOCUMENT ");
                        sb.AppendLine("    where INPUT_DATE = '" + del_도면등록_dgv.Rows[i].Cells["INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + del_도면등록_dgv.Rows[i].Cells["INPUT_CD"].Value + "' "); //SEQ == INPUT_CD
                    }
                }

                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                {
                    //if (도면등록_dgv.Rows[i].Cells["IMG_PATH"].Value.ToString().Equals(""))
                    //{
                    byte[] img_path = (byte[])도면등록_dgv.Rows[i].Cells["PIC_PATH"].Value;
                    sCommand.Parameters.AddWithValue("@img" + i, img_path);
                    //}


                }

                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                //sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@VAT_CD", txt_vat_cd);


                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);


                
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "update_ITEM_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateItem(
      string txt_item_cd
    , string txt_item_nm
    , string cmb_item_gbn
    , string txt_spec
    , string cmb_type
    , string cmb_line
    , string cmb_unit
    , string cmb_stor_loc
    , double txt_prop_stock
    , double txt_item_weight
    , double txt_input_price
    , double txt_output_price
    , double txt_char_amt
    , double txt_pack_amt
    , string cmb_cust
    , string chk_print_yn
    , string cmb_used
    , string input_date
    , string box_bar_cd
    , string box_amt
    , string unit_bar_cd
    , string unit_amt
    , string comment
    , string txt_link
    , string txt_vat_cd
    , conDataGridView comp_dgv
    , conDataGridView flow_dgv
    , conDataGridView half_dgv
    , DataGridView del_comp_dgv
    , DataGridView del_flow_dgv
    , DataGridView del_half_dgv
    , DataGridView 도면등록_dgv
    , DataGridView del_도면등록_dgv
    , string mold)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_ITEM_CODE set");
                sb.AppendLine("      ITEM_NM = @ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN = @ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,TYPE_CD = @TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD = @UNIT_CD ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,PROP_STOCK = @PROP_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT = @ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE = @OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT = @CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT = @PACK_AMT ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,PRINT_YN = @PRINT_YN ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD = @BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT = @BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD = @UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT = @UNIT_AMT ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,LINK_CD = " + (txt_link.Equals("") ? txt_item_cd : "'" + txt_link + "'"));
                sb.AppendLine("     ,VAT_CD =  @VAT_CD ");
                sb.AppendLine("     ,MOLD_CD =  @MOLD_CD ");

                sb.AppendLine(" where ITEM_CD = @ITEM_CD ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)comp_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @seq" + i + " int ");
                            sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                            //MES 제품코드 보고 장터지기 코드가 있는지 확인하는부분 mes , 장터지기 nvarchar 인데 int로 바꿔서 찾고 ㅇ있으면 +1 해주는 형태 
                            sb.AppendLine("insert into N_ITEM_COMP(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@seq" + i + " ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update N_ITEM_COMP set");
                            sb.AppendLine("      RAW_MAT_CD =  '" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + comp_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (flow_dgv.Rows.Count > 0)
                {
                    /// 문제점 발생
                    /// 공정 업데이트에서 중간순서를 삭제했을때 문제점발생
                    /// ex seq 1234567 공정이 있을때 
                    ///  seq 23을 삭제하면   
                    ///  seq 14567 로 업데이트가 됨 
                    ///  새로 추가가 되면 max값만 찾고 +1형태임 
                    ///  변경사항
                    /// 데이터 다날리고
                    /// 처음부터 insert 하는 형태로 변경 
                    sb.AppendLine("delete N_ITEM_FLOW where ITEM_CD='" + txt_item_cd + "'");
                    for (int i = 0; i < flow_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)flow_dgv.Rows[i].Cells["F_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @f_seq" + i + " int ");
                            sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_FLOW(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,FLOW_CD ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,BOX_AMT ");
                            sb.AppendLine("     ,CVR_RATIO ");
                            sb.AppendLine("     ,CHARGE_AMT ");
                            sb.AppendLine("     ,ITEM_IDEN_YN ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@f_seq" + i + " ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0");
                            if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                            {
                                sb.AppendLine("     ,'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("     ,'N' ");
                            }
                            sb.AppendLine("  )");
                        }
                        else
                        {

                            sb.AppendLine("declare @f_seq" + i + " int ");
                            sb.AppendLine("select @f_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_FLOW ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_FLOW(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,FLOW_CD ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,BOX_AMT ");
                            sb.AppendLine("     ,CVR_RATIO ");
                            sb.AppendLine("     ,CHARGE_AMT ");
                            sb.AppendLine("     ,ITEM_IDEN_YN ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@f_seq" + i + " ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0 ");
                            sb.AppendLine("     ,0");
                            if (flow_dgv.Rows[i].Cells["식별표"].Value != null && (bool)flow_dgv.Rows[i].Cells["식별표"].Value)
                            {
                                sb.AppendLine("     ,'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("     ,'N' ");
                            }
                            sb.AppendLine("  )");
                            //sb.AppendLine("update N_ITEM_FLOW set");
                            //sb.AppendLine("      FLOW_CD =  '" + flow_dgv.Rows[i].Cells["FLOW_CD"].Value + "' ");
                            //sb.AppendLine("     ,COMMENT =  '" + flow_dgv.Rows[i].Cells["FLOW_ETC"].Value + "' ");
                            //sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            //sb.AppendLine(" and SEQ = '" + flow_dgv.Rows[i].Cells["F_SEQ"].Value + "'");


                        }
                    }
                }

                if (half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < half_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)half_dgv.Rows[i].Cells["H_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @h_seq" + i + " int ");
                            sb.AppendLine("select @h_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP_HALF ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_COMP_HALF(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,HALF_ITEM_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@h_seq" + i + " ");
                            sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update N_ITEM_COMP_HALF set");
                            sb.AppendLine("      HALF_ITEM_CD =  '" + half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                        }
                    }
                }

                if (del_comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_COMP ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_comp_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                if (del_flow_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_flow_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_FLOW ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_flow_dgv.Rows[i].Cells["F_SEQ"].Value + "' ");
                    }
                }

                if (del_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_COMP_HALF ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_half_dgv.Rows[i].Cells["H_SEQ"].Value + "' ");
                    }
                }

                if (도면등록_dgv.Rows.Count > 0 && 도면등록_dgv.Rows[0].Cells["PIC_PATH"].Value != null)
                {
                    sb.AppendLine("declare @INPUT_CD int ");
                    string fp_input_date = DateTime.Today.ToString("yyyy-MM-dd");

                    for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                    {

                        string txt_seq = (string)도면등록_dgv.Rows[i].Cells["SEQ"].Value;

                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("select @INPUT_CD =ISNULL(MAX(INPUT_CD),0)+1 from F_DOCUMENT ");
                            sb.AppendLine("where INPUT_DATE = '" + fp_input_date + "' ");
                            sb.AppendLine("AND IMG_GUBUN = '1' ");

                            sb.AppendLine("INSERT INTO F_DOCUMENT (");
                            sb.AppendLine(" INPUT_DATE ");
                            sb.AppendLine(" ,INPUT_CD ");
                            sb.AppendLine(" ,IMG_GUBUN "); //1. 도면 2.밀시트
                            sb.AppendLine(" ,STAFF_CD ");
                            sb.AppendLine(" ,IMG_PATH ");
                            sb.AppendLine(" ,IMG ");
                            sb.AppendLine(" ,IMG_NAME ");
                            sb.AppendLine(" ,INTIME ");
                            sb.AppendLine(" ,INSTAFF");
                            sb.AppendLine(" ,ITEM_CD");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine(" '" + fp_input_date + "' ");
                            sb.AppendLine(" ,@INPUT_CD ");
                            sb.AppendLine(" ,'1' ");
                            sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,'" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "' ");
                            sb.AppendLine("     , @img" + i);
                            sb.AppendLine(" ,'" + 도면등록_dgv.Rows[i].Cells["IMG_NAME"].Value.ToString() + "' ");

                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,'" + txt_item_cd + "' ");
                            sb.AppendLine(" ) ");
                        }
                        else
                        {
                            sb.AppendLine(" update F_DOCUMENT set");
                            sb.AppendLine("      IMG = @img" + i); //이미지
                            sb.AppendLine("     ,IMG_PATH = '" + 도면등록_dgv.Rows[i].Cells["IMG_SIZE"].Value.ToString() + "'  ");
                            sb.AppendLine(" ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,UPTIME = convert(varchar,getdate(),120) ");
                            sb.AppendLine(" where INPUT_DATE = '" + 도면등록_dgv.Rows[i].Cells["INPUT_DATE"].Value.ToString() + "' ");
                            sb.AppendLine("     and INPUT_CD = '" + 도면등록_dgv.Rows[i].Cells["SEQ"].Value.ToString() + "' ");
                        }



                    }
                }

                if (del_도면등록_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_도면등록_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_DOCUMENT ");
                        sb.AppendLine("    where INPUT_DATE = '" + del_도면등록_dgv.Rows[i].Cells["INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + del_도면등록_dgv.Rows[i].Cells["INPUT_CD"].Value + "' "); //SEQ == INPUT_CD
                    }
                }

                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                for (int i = 0; i < 도면등록_dgv.Rows.Count; i++)
                {
                    //if (도면등록_dgv.Rows[i].Cells["IMG_PATH"].Value.ToString().Equals(""))
                    //{
                    byte[] img_path = (byte[])도면등록_dgv.Rows[i].Cells["PIC_PATH"].Value;
                    sCommand.Parameters.AddWithValue("@img" + i, img_path);
                    //}


                }

                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                //sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@VAT_CD", txt_vat_cd);
                sCommand.Parameters.AddWithValue("@MODL_CD", mold);


                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);


                
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "update_ITEM_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateBsItem(
              System.Windows.Forms.DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    string printYn = "";
                    if ((bool)dgv.Rows[i].Cells["PRINT_YN"].Value == true)
                        printYn = "Y";
                    else
                        printYn = "N";
                    sb.AppendLine("update N_ITEM_CODE set");
                    sb.AppendLine("      BASIC_STOCK =  " + int.Parse(dgv.Rows[i].Cells["BASIC_STOCK"].Value.ToString()) + " ");
                    sb.AppendLine("     ,PRINT_YN = '" + printYn + "' ");

                    sb.AppendLine(" where ITEM_CD = '" + dgv.Rows[i].Cells["ITEM_CD"].Value.ToString() + "' ");

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_BS_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateBsRaw(System.Windows.Forms.DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {

                    sb.AppendLine("update N_RAW_CODE set");
                    sb.AppendLine("      BASIC_STOCK =  " + int.Parse(dgv.Rows[i].Cells["BASIC_STOCK"].Value.ToString()) + " ");

                    sb.AppendLine(" where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ");

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_BS_RAW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateFac(
              string txt_fac_cd
            , string txt_fac_nm
            , string txt_model_nm
            , string txt_spec
            , string txt_manu_comp
            , string txt_acq_date
            , string txt_acq_price
            , string cmb_dept
            , string txt_used
            , string txt_pro_capa
            , string txt_power_num
            , string cmb_mainten)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_FAC_CODE set");
                sb.AppendLine("      FAC_NM = @FAC_NM ");
                sb.AppendLine("     ,MODEL_NM = @MODEL_NM ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,MANU_COMPANY = @MANU_COMPANY ");
                sb.AppendLine("     ,ACQ_DATE = @ACQ_DATE ");
                sb.AppendLine("     ,ACQ_PRICE = @ACQ_PRICE ");
                sb.AppendLine("     ,DEPT_CD = @DEPT_CD ");
                sb.AppendLine("     ,USED = @USED ");
                sb.AppendLine("     ,PRO_CAPA = @PRO_CAPA ");
                sb.AppendLine("     ,POWER_NUMBER = @POWER_NUMBER ");
                sb.AppendLine("     ,MAINTEN_CLASS = @MAINTEN_CLASS ");

                sb.AppendLine(" where FAC_CD = @FAC_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_fac_cd);
                sCommand.Parameters.AddWithValue("@FAC_NM", txt_fac_nm);
                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@MANU_COMPANY", txt_manu_comp);
                sCommand.Parameters.AddWithValue("@ACQ_DATE", txt_acq_date);
                sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_acq_price);
                sCommand.Parameters.AddWithValue("@DEPT_CD", cmb_dept);
                sCommand.Parameters.AddWithValue("@USED", txt_used);
                sCommand.Parameters.AddWithValue("@PRO_CAPA", txt_pro_capa);
                sCommand.Parameters.AddWithValue("@POWER_NUMBER", txt_power_num);
                sCommand.Parameters.AddWithValue("@MAINTEN_CLASS", cmb_mainten);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updatePlan(
              string plan_date
            , string txt_plan_cd
            , string txt_cust_cd
            , string deliver_req_date
            , string order_yn
            , string comment
            , conDataGridView p_item_dgv
            , DataGridView p_half_dgv
            , DataGridView del_dgv
            , DataGridView del_half_dgv
            , string jumun_date
            , string jumun_cd
            , ArrayList jumun_date_Array
            , ArrayList Jumun_cd_array)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update F_PLAN set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,DELIVER_REQ_DATE = @DELIVER_REQ_DATE ");
                sb.AppendLine("     ,ORDER_YN = @ORDER_YN ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where PLAN_DATE = @PLAN_DATE and PLAN_CD= @PLAN_CD ");

                if (p_item_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_item_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)p_item_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @item_seq" + i + " int ");
                            sb.AppendLine("select @item_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                            sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine("and PLAN_CD =  '" + txt_plan_cd + "' ");

                            sb.AppendLine("insert into F_PLAN_DETAIL(");
                            sb.AppendLine("     PLAN_DATE ");
                            sb.AppendLine("     ,PLAN_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,WORK_YN ");
                            sb.AppendLine("     ,F_LEVEL ");
                            sb.AppendLine("     ,DEFAULT_AMT ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("       '" + plan_date + "' ");
                            sb.AppendLine("      ,'" + txt_plan_cd + "' ");
                            sb.AppendLine("     ,@item_seq" + i + " ");
                            sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'N' ");
                            sb.AppendLine("     , 1 ");
                            sb.AppendLine("     , 1  ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  )");

                        }
                        else
                        {
                            sb.AppendLine("update F_PLAN_DETAIL set");
                            sb.AppendLine("      ITEM_CD =  '" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");

                            if ((bool)p_item_dgv.Rows[i].Cells["WORK_YN"].Value == true)
                            {
                                sb.AppendLine("      ,WORK_YN =  'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("      ,WORK_YN =  'N' ");
                            }

                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine(" and PLAN_CD = '" + txt_plan_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + p_item_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (p_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_half_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)p_half_dgv.Rows[i].Cells["H_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {

                            sb.AppendLine("declare @half_seq" + i + " int ");
                            sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                            sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine("and PLAN_CD =  '" + txt_plan_cd + "' ");

                            sb.AppendLine("insert into F_PLAN_DETAIL(");
                            sb.AppendLine("     PLAN_DATE ");
                            sb.AppendLine("     ,PLAN_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,WORK_YN ");
                            sb.AppendLine("     ,F_LEVEL ");
                            sb.AppendLine("     ,TOP_ITEM_CD ");
                            sb.AppendLine("     ,P_ITEM_CD ");
                            sb.AppendLine("     ,DEFAULT_AMT ");
                            sb.AppendLine("     ,INSTAFF");
                            sb.AppendLine("     ,INTIME");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("      '" + plan_date + "' ");
                            sb.AppendLine("     ,'" + txt_plan_cd + "' ");
                            sb.AppendLine("     ,@half_seq" + i + " ");
                            sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["H_UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,'N' ");
                            sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["F_LEVEL"].Value).Replace(",", "") + "'  ");
                            sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["TOP_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["P_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["DEFAULT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_PLAN_DETAIL set");
                            sb.AppendLine("      ITEM_CD =  '" + p_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");

                            if ((bool)p_half_dgv.Rows[i].Cells["H_WORK_YN"].Value == true)
                            {
                                sb.AppendLine("      ,WORK_YN =  'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("      ,WORK_YN =  'N' ");
                            }

                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine(" and PLAN_CD = '" + txt_plan_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + p_half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_PLAN_DETAIL ");
                        sb.AppendLine("    where PLAN_DATE = '" + del_dgv.Rows[i].Cells["PLAN_DATE"].Value + "' ");
                        sb.AppendLine("     and PLAN_CD = '" + del_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                if (del_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_PLAN_DETAIL ");
                        sb.AppendLine("    where PLAN_DATE = '" + del_half_dgv.Rows[i].Cells["PLAN_DATE"].Value + "' ");
                        sb.AppendLine("     and PLAN_CD = '" + del_half_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_half_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                if (jumun_date != null && !jumun_date.ToString().Equals(""))
                {
                    sb.AppendLine("update F_JUMUN set ");
                    sb.AppendLine("     PLAN_YN  = 'Y' ");
                    sb.AppendLine("     , PLAN_DATE  = CONVERT(date,GETDATE()) ");
                    sb.AppendLine("     , PLAN_CD  = @seq ");
                    sb.AppendLine("    where JUMUN_DATE = '" + jumun_date + "' AND JUMUN_CD = '" + jumun_cd + "'  ");
                }

                for (int i = 0; i < jumun_date_Array.Count; i++)
                {
                    sb.AppendLine("update F_JUMUN set ");
                    sb.AppendLine("     PLAN_YN  = 'Y' ");
                    sb.AppendLine("     , PLAN_DATE  = CONVERT(date,GETDATE()) ");
                    sb.AppendLine("     , PLAN_CD  = @seq ");
                    sb.AppendLine("    where JUMUN_DATE = '" + jumun_date_Array[i].ToString() + "' AND JUMUN_CD = '" + Jumun_cd_array[i].ToString() + "'  ");
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@DELIVER_REQ_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@ORDER_YN", order_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@PLAN_DATE", plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", txt_plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString()); Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateOrder(
              string order_date
            , string txt_order_cd
            , string txt_cust_cd
            , string in_req_date
            , string comment
            , string pur_yn
            , conDataGridView o_rm_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update F_ORDER set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,INPUT_REQ_DATE = @INPUT_REQ_DATE ");
                sb.AppendLine("     ,COMPLETE_YN = '" + pur_yn + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where ORDER_DATE = @ORDER_DATE and ORDER_CD= @ORDER_CD ");

                if (o_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < o_rm_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)o_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @order_seq" + i + " int ");
                            sb.AppendLine("select @order_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                            sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                            sb.AppendLine("and ORDER_CD = '" + txt_order_cd + "' ");

                            sb.AppendLine("insert into F_ORDER_DETAIL(");
                            sb.AppendLine("     ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + order_date + "' ");
                            sb.AppendLine("     ,'" + txt_order_cd + "' ");
                            sb.AppendLine("     ,@order_seq" + i + " ");
                            sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["비고"].Value + "' ");

                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_ORDER_DETAIL set");
                            sb.AppendLine("       RAW_MAT_CD =  '" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,COMMENT =   '" + o_rm_dgv.Rows[i].Cells["비고"].Value + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where ORDER_DATE = '" + order_date + "' ");
                            sb.AppendLine(" and ORDER_CD = '" + txt_order_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + o_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ORDER_DETAIL ");
                        sb.AppendLine("    where ORDER_DATE = '" + del_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("     and ORDER_CD = '" + del_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INPUT_REQ_DATE", in_req_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@ORDER_DATE", order_date);
                sCommand.Parameters.AddWithValue("@ORDER_CD", txt_order_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateRmInput(
              string input_date
            , string input_cd
            , string txt_cust_cd
            , string comment
            , string vat_cd
            , string all_supply_money
            , string all_tax_money
            , string all_total_money
            , bool is_give_inputed
            , string give_gubun
            , string give_money
            , string dc_money
            , string total_give_money
            , string input_yn
            , conDataGridView in_rm_dgv
            , DataGridView del_dgv
            , Hashtable hash)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                {
                    if ((string)in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value != null && (string)in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value != "")
                    {
                        sb.AppendLine(" select A.ORDER_DATE,A.ORDER_CD,B.SEQ,C.ORDER_AMT, C.INPUT_AMT");
                        sb.AppendLine(" FROM F_ORDER A ");
                        sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B  ");
                        sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
                        sb.AppendLine("     AND A.ORDER_CD = B.ORDER_CD ");
                        sb.AppendLine(" LEFT OUTER JOIN(	 ");
                        sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
                        sb.AppendLine("                           ,AA.ORDER_CD       ");
                        sb.AppendLine("                           ,AA.SEQ ");
                        sb.AppendLine("                           ,FLOOR(ISNULL(AA.TOTAL_AMT,0)) AS ORDER_AMT ");
                        sb.AppendLine("                           ,ISNULL(SUM(BB.TOTAL_AMT),0) AS INPUT_AMT ");
                        sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TOTAL_AMT),0) AS NO_INPUT_AMT ");
                        sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
                        sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
                        sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
                        sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
                        sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
                        sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
                        sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
                        sb.AppendLine("     AND A.ORDER_CD = C.ORDER_CD ");
                        sb.AppendLine("     AND B.SEQ = C.SEQ  ");
                        sb.AppendLine(" WHERE A.ORDER_DATE = '" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("      AND A.ORDER_CD = '" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("      AND B.SEQ = '" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");

                        sCommand = new SqlCommand(sb.ToString());
                        if (sCommand.CommandText.Equals(null))
                        {
                            wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                            return 2;
                        }
                        DataTable dt = wAdo.SqlCommandSelect(sCommand);

                        double order_amt = double.Parse(dt.Rows[0]["ORDER_AMT"].ToString());
                        double input_amt = double.Parse(dt.Rows[0]["INPUT_AMT"].ToString());
                        double grd_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", ""));
                        double grd_ord_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["OLD_TOTAL_AMT"].Value)); //백업은 콤마 정의 안함

                        // 발주수량 + 입력하기 전 수량백업 값 - 입고수량 - 입력한 수량 값 = 결과값

                        double rs_num = order_amt + grd_ord_total_amt - input_amt - grd_total_amt;
                        if (rs_num < 0)
                        {
                            StringBuilder alert_sb = new StringBuilder();
                            alert_sb.AppendLine(i + 1 + "번째 줄 원자재에 포함된 발주번호 \n ");
                            alert_sb.AppendLine(in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + " [" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "] 의 발주수량보다 더 많게 입력하셨습니다. \n");
                            alert_sb.AppendLine("그대로 저장하시겠습니까? (저장:예 / 취소:아니오)");

                            DialogResult msgOk = MessageBox.Show(alert_sb.ToString(), "삭제여부", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (msgOk == DialogResult.No)
                            {
                                return 3;
                            }
                        }
                    }
                }

                sb = new StringBuilder();

                sb.AppendLine("declare @buy_seq int ");
                sb.AppendLine("select @buy_seq = BUY_CD from F_BUY ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                sb.AppendLine("and INPUT_CD =  '" + input_cd + "' ");




                sb.AppendLine("update F_RAW_INPUT set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,COMPLETE_YN = '" + input_yn + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE and INPUT_CD= @INPUT_CD ");


                bool isCustDay = isCustDayTotal(input_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(input_date, txt_cust_cd));
                }

                if (is_give_inputed)
                {
                    if (give_gubun.Equals("-1"))
                    {//지급 삭제
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT ISNULL(TOTAL_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = '" + input_cd + "') ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  PAY_MONEY = PAY_MONEY - (SELECT ISNULL(GIVE_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY - (SELECT ISNULL(DC_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY - (SELECT ISNULL(TOTAL_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        input_date
                        , txt_cust_cd
                        , "(SELECT ISNULL(TOTAL_MONEY,0) AS TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) "
                        , "+"));

                        sb.AppendLine(" DELETE FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = '" + input_cd + "' ");

                    }
                    else
                    {//지급 수정
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT ISNULL(TOTAL_MONEY,0) AS TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = '" + input_cd + "') ");

                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE - " + total_give_money.Replace(",", "") + " ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = '" + input_cd + "') ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  PAY_MONEY = PAY_MONEY - (SELECT ISNULL(GIVE_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY - (SELECT ISNULL(DC_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY - (SELECT ISNULL(TOTAL_MONEY,0) FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  PAY_MONEY = PAY_MONEY + " + give_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY + " + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY + " + total_give_money.Replace(",", "") + " ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        input_date
                        , txt_cust_cd
                        , "(SELECT ISNULL(TOTAL_MONEY,0) AS TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) "
                        , "+"));

                        sb.AppendLine(CustDayTotal_Change_Balance(
                            input_date
                            , txt_cust_cd
                            , total_give_money.Replace(",", "")
                            , "-"));

                        //수금수정
                        sb.AppendLine("UPDATE F_GIVE SET ");
                        sb.AppendLine(" GIVE_GUBUN     = '" + give_gubun + "'                         ");
                        sb.AppendLine(" ,CUST_CD     =   '" + txt_cust_cd + "'                     ");
                        sb.AppendLine(" ,GIVE_MONEY     = " + give_money.Replace(",", "") + "          ");
                        sb.AppendLine(" ,DC_MONEY      = " + dc_money.Replace(",", "") + "           ");
                        sb.AppendLine(" ,TOTAL_MONEY   = " + total_give_money.Replace(",", "") + "    ");
                        sb.AppendLine(" ,UPSTAFF       = '" + Common.p_strStaffNo + "'                ");
                        sb.AppendLine(" ,UPTIME        = convert(varchar, getdate(), 120)            ");
                        sb.AppendLine(" WHERE ");
                        sb.AppendLine("  INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine(" AND INPUT_CD = '" + input_cd + "' ");
                        //수금수정
                    }

                }
                else
                {
                    if (!give_gubun.Equals("-1"))
                    {//지급 등록
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE - " + total_give_money.Replace(",", "") + " ");
                        sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  PAY_MONEY = PAY_MONEY + " + give_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY + " + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY + " + total_give_money.Replace(",", "") + " ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        input_date
                        , txt_cust_cd
                        , total_give_money.Replace(",", "")
                        , "-"));

                        sb.AppendLine("declare @give_seq int ");
                        sb.AppendLine("select @give_seq = ISNULL(convert(int,MAX(GIVE_CD)),0)+1 from F_GIVE ");
                        sb.AppendLine("where GIVE_DATE = '" + input_date + "'  ");

                        //지급등록
                        sb.AppendLine("insert into F_GIVE (");
                        sb.AppendLine(" GIVE_DATE ");
                        sb.AppendLine(" ,GIVE_CD ");
                        sb.AppendLine(" ,GIVE_GUBUN ");
                        sb.AppendLine(" ,CUST_CD ");
                        sb.AppendLine(" ,GIVE_MONEY ");
                        sb.AppendLine(" ,DC_MONEY ");
                        sb.AppendLine(" ,TOTAL_MONEY ");
                        sb.AppendLine(" ,COMMENT ");
                        sb.AppendLine(" ,INSTAFF ");
                        sb.AppendLine(" ,INTIME ");
                        sb.AppendLine(" ,INPUT_DATE ");
                        sb.AppendLine(" ,INPUT_CD ");
                        sb.AppendLine(" ) VALUES ( ");
                        sb.AppendLine(" '" + input_date + "' ");
                        sb.AppendLine(" ,@give_seq ");
                        sb.AppendLine(" ,'" + give_gubun + "' ");
                        sb.AppendLine(" ,'" + txt_cust_cd + "' ");
                        sb.AppendLine(" ," + give_money.Replace(",", "") + " ");
                        sb.AppendLine(" ," + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ," + total_give_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,'#매출 " + input_date + "/' + convert(nvarchar,@buy_seq) ");
                        sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ,'" + input_date + "' ");
                        sb.AppendLine(" ,'" + input_cd + "' ");
                        sb.AppendLine(" ) ");
                        //지급등록
                    }
                }

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE - (SELECT ISNULL(ALL_TOTAL_MONEY,0) FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                sb.AppendLine(" WHERE CUST_CD = (SELECT CUST_CD FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' )   ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY - (SELECT ISNULL(ALL_SUPPLY_MONEY,0) FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY - (SELECT ISNULL(ALL_TAX_MONEY,0) FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY - (SELECT ISNULL(ALL_TOTAL_MONEY,0) FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = (SELECT CUST_CD FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' )  ");

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE + " + all_total_money.Replace(",", "") + " ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY + " + all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(input_date, txt_cust_cd));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , "(SELECT CUST_CD FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) "
                    , "(SELECT ISNULL(ALL_TOTAL_MONEY,0) AS ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + input_cd + "' ) "
                    , "-"));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));

                // 구매 수정
                sb.AppendLine(" UPDATE F_BUY SET ");
                sb.AppendLine("     CUST_CD          =   '" + txt_cust_cd + "'      ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY  =   '" + all_total_money.Replace(",", "") + "'     ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY =   '" + all_supply_money.Replace(",", "") + "'    ");
                sb.AppendLine("     ,ALL_TAX_MONEY    =   '" + all_tax_money.Replace(",", "") + "'        ");
                sb.AppendLine("     ,UPSTAFF          =   '" + Common.p_strStaffNo + "'        ");
                sb.AppendLine("     ,UPTIME           =   convert(varchar, getdate(), 120)     ");
                sb.AppendLine("     ,VAT_CD           =   '" + vat_cd + "'      ");
                sb.AppendLine("  WHERE INPUT_DATE = '" + input_date + "' ");
                sb.AppendLine("  AND INPUT_CD = '" + input_cd + "' ");
                // 구매 수정




                if (in_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                    {
                        //<2020-05-08 이재원 LOC_CD 와 LOC_NM 추가>
                        string loc_cd = "";
                        string loc_nm = "";
                        string storage_cd = "";
                        if (in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Value != null && !in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Value.ToString().Equals(""))
                        {
                            storage_cd = in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Value.ToString();
                        }

                        if (in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag != null && !in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag.ToString().Equals(""))
                        {
                            loc_cd = in_rm_dgv.Rows[i].Cells["STORAGE_CD"].Tag.ToString();
                            loc_nm = in_rm_dgv.Rows[i].Cells["LOC_CD"].ToolTipText.ToString();
                        }

                        string txt_seq = (string)in_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                            sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                            sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine("and INPUT_CD = '" + input_cd + "' ");

                            sb.AppendLine("declare @buy_seq" + i + " int ");
                            sb.AppendLine("select @buy_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_BUY_DETAIL ");
                            sb.AppendLine("where BUY_DATE = '" + input_date + "' ");
                            sb.AppendLine("and BUY_CD =  @buy_seq ");

                            sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                            sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                            sb.AppendLine("IF @chk_gbn" + i + " = '1' BEGIN set @chk_yn" + i + " = 'S' set @final_amt" + i + " = '0' END "); //원자재 검사여부가 검사일 경우 'S' 대기 
                            sb.AppendLine("ELSE BEGIN set @chk_yn" + i + " = 'O' set @final_amt" + i + " = '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' END "); //원자재 검사여부가 생략일 경우 'O'

                            sb.AppendLine("insert into F_RAW_DETAIL(");
                            sb.AppendLine("     INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TEMP_AMT ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,CURR_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,HEAT_NO ");
                            sb.AppendLine("     ,HEAT_TIME ");
                            sb.AppendLine("     ,ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,ORDER_SEQ ");
                            sb.AppendLine("     ,COMPLETE_YN ");
                            sb.AppendLine("     ,CHECK_YN ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,STORAGE_CD ");
                            sb.AppendLine("     ,LOC_CD ");
                            sb.AppendLine("     ,LOC_NM ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + input_date + "' ");
                            sb.AppendLine("      ,'" + input_cd + "'  ");
                            sb.AppendLine("     ,@input_seq" + i + " ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,@final_amt" + i + " ");
                            sb.AppendLine("     ,@final_amt" + i + " ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");
                            sb.AppendLine("     ,'N' ");
                            sb.AppendLine("     ,@chk_yn" + i + " ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + (in_rm_dgv.Rows[i].Cells["비고"].Value == null ? "" : in_rm_dgv.Rows[i].Cells["비고"].Value.ToString()) + "' ");
                            sb.AppendLine("     ,'" + storage_cd + "' ");
                            sb.AppendLine("     ,'" + loc_cd + "' ");
                            sb.AppendLine("     ,'" + loc_nm + "' ");
                            sb.AppendLine("  )");


                            sb.AppendLine("insert into F_BUY_DETAIL(");
                            sb.AppendLine("      BUY_DATE   ");      //1
                            sb.AppendLine("     ,BUY_CD    ");       //2
                            sb.AppendLine("     ,SEQ    ");            //3
                            sb.AppendLine("     ,RAW_MAT_CD    ");        //4
                            sb.AppendLine("     ,INPUT_DATE    ");    //5
                            sb.AppendLine("     ,INPUT_CD    ");      //6
                            sb.AppendLine("     ,INPUT_SEQ    ");     //7
                            sb.AppendLine("     ,TOTAL_AMT    ");      //12
                            sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                            sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                            sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                            sb.AppendLine("     ,TAX_MONEY    ");      //16
                            sb.AppendLine("     ,INTIME    ");         //17
                            sb.AppendLine("     ,INSTAFF    ");        //18
                            sb.AppendLine("     ,TAX_CD    ");         //20
                            sb.AppendLine("  ) values ( ");
                            sb.AppendLine("     '" + input_date + "' ");                                                                               //1
                            sb.AppendLine("      ,@buy_seq ");                                                                                     //2
                            sb.AppendLine("     ,@buy_seq" + i + " ");                                                                             //3
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");                                         //4
                            sb.AppendLine("     ,'" + input_date + "' ");                                                                              //5
                            sb.AppendLine("     ,'" + input_cd + "'  ");                                                                                           //6
                            sb.AppendLine("     ,@input_seq" + i + "  ");                                                                              //7
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");             //12
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["TAX_CD"].Value + "' ");                                          //20
                            sb.AppendLine("  )");


                            sb.AppendLine(" declare @chk" + i + " int  ");
                            sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                            sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' and P_GUBUN = '1' ");

                            sb.AppendLine(" if @chk"+i+" > 0  ");
                            sb.AppendLine(" begin  ");
                            sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                            sb.AppendLine("      UNIT_PRICE = '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "'  ");
                            sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                            sb.AppendLine("      AND PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      AND P_GUBUN = '1' ");
                            sb.AppendLine(" end ");
                            sb.AppendLine(" else begin ");
                            sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                            sb.AppendLine("      CUST_CD ");
                            sb.AppendLine("      ,PROD_CD ");
                            sb.AppendLine("      ,B_BOX_PRICE ");
                            sb.AppendLine("      ,S_BOX_PRICE ");
                            sb.AppendLine("      ,UNIT_PRICE ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,P_GUBUN ");
                            sb.AppendLine("   )VALUES(  ");
                            sb.AppendLine("   '" + txt_cust_cd + "'  ");
                            sb.AppendLine("   ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'  ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   ,'1' ");
                            sb.AppendLine(" ) ");
                            sb.AppendLine(" end ");

                        }
                        else
                        {
                            sb.AppendLine("declare @final_amt" + i + " nvarchar(20) ");

                            //원자재 검사여부가 생략일 경우 'O'

                            sb.AppendLine("  select @final_amt"+i+" =  ");
                            sb.AppendLine("  case when TOTAL_AMT = TEMP_AMT then 'Y' else 'N' end  ");
                            sb.AppendLine("  from F_RAW_DETAIL  where INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                            sb.AppendLine("  if @final_amt"+i+" = 'Y' ");
                            sb.AppendLine("  begin  ");

                            sb.AppendLine("update F_RAW_DETAIL set");
                            sb.AppendLine("      TOTAL_AMT =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,CURR_AMT =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TEMP_AMT =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,HEAT_NO =  '" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                            sb.AppendLine("      ,HEAT_TIME =  '" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,COMMENT =  '" + (in_rm_dgv.Rows[i].Cells["비고"].Value == null ? "" : in_rm_dgv.Rows[i].Cells["비고"].Value.ToString()) + "' ");
                            sb.AppendLine("      ,STORAGE_CD =  '" + storage_cd + "' ");
                            sb.AppendLine("      ,LOC_CD =  '" + loc_cd + "' ");
                            sb.AppendLine("      ,LOC_NM =  '" + loc_nm + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + input_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");

                            sb.AppendLine("  end ");
                            sb.AppendLine("  else  ");
                            sb.AppendLine("  begin ");

                            sb.AppendLine("update F_RAW_DETAIL set");
                            sb.AppendLine("       TEMP_AMT =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,HEAT_NO =  '" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                            sb.AppendLine("      ,HEAT_TIME =  '" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,COMMENT =  '" + (in_rm_dgv.Rows[i].Cells["비고"].Value == null ? "" : in_rm_dgv.Rows[i].Cells["비고"].Value.ToString()) + "' ");
                            sb.AppendLine("      ,STORAGE_CD =  '" + storage_cd + "' ");
                            sb.AppendLine("      ,LOC_CD =  '" + loc_cd + "' ");
                            sb.AppendLine("      ,LOC_NM =  '" + loc_nm + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + input_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");

                            sb.AppendLine("  end ");


                            sb.AppendLine("UPDATE F_BUY_DETAIL SET ");
                            sb.AppendLine("      RAW_MAT_CD      =   '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'                                         ");        //4
                            sb.AppendLine("     ,TOTAL_AMT    =   '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "'               ");      //12
                            sb.AppendLine("     ,TOTAL_PRICE  =   '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "'                      ");    //13
                            sb.AppendLine("     ,TOTAL_MONEY  =   '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "'              ");    //14
                            sb.AppendLine("     ,SUPPLY_MONEY =   '" + ((string)in_rm_dgv.Rows[i].Cells["SUPPLY_MONEY"].Value).Replace(",", "") + "'              ");   //15
                            sb.AppendLine("     ,TAX_MONEY    =   '" + ((string)in_rm_dgv.Rows[i].Cells["TAX_MONEY"].Value).Replace(",", "") + "'              ");      //16
                            sb.AppendLine("     ,UPTIME       =   convert(varchar, getdate(), 120)                                                               ");         //17
                            sb.AppendLine("     ,UPSTAFF      =   '" + Common.p_strStaffNo + "'                                                                   ");        //18
                            sb.AppendLine("     ,TAX_CD       =   '" + in_rm_dgv.Rows[i].Cells["TAX_CD"].Value + "' ");                                        //20
                            sb.AppendLine(" WHERE INPUT_DATE  =   '" + input_date + "'    ");                                                                               //1
                            sb.AppendLine(" AND INPUT_CD    =   '" + input_cd + "'      ");                                                                                     //2
                            sb.AppendLine(" AND INPUT_SEQ   =   '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "'    ");                                                                             //3

                            sb.AppendLine(" declare @chk"+i+" int  ");
                            sb.AppendLine(" select @chk"+i+" = count(*) from N_PRICE_INFO  ");
                            sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' and P_GUBUN = '1' ");

                            sb.AppendLine(" if @chk"+i+" > 0  ");
                            sb.AppendLine(" begin  ");
                            sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                            sb.AppendLine("      UNIT_PRICE = '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "'  ");
                            sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                            sb.AppendLine("      AND PROD_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      AND P_GUBUN = '1' ");
                            sb.AppendLine(" end ");
                            sb.AppendLine(" else begin ");
                            sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                            sb.AppendLine("      CUST_CD ");
                            sb.AppendLine("      ,PROD_CD ");
                            sb.AppendLine("      ,B_BOX_PRICE ");
                            sb.AppendLine("      ,S_BOX_PRICE ");
                            sb.AppendLine("      ,UNIT_PRICE ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,P_GUBUN ");
                            sb.AppendLine("   )VALUES(  ");
                            sb.AppendLine("   '" + txt_cust_cd + "'  ");
                            sb.AppendLine("   ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'  ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   ,'1' ");
                            sb.AppendLine(" ) ");
                            sb.AppendLine(" end ");

                        }

                        if (input_yn == "Y")
                        {
                            sb.AppendLine(" update F_ORDER set ");
                            sb.AppendLine("   COMPLETE_YN='Y'");
                            sb.AppendLine("   where ORDER_DATE='" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' and ORDER_CD='" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_RAW_DETAIL ");
                        sb.AppendLine("    where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + input_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");

                        sb.AppendLine("delete from F_BUY_DETAIL ");
                        sb.AppendLine("    where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + input_cd + "' ");
                        sb.AppendLine("     and INPUT_SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value.ToString() + "' ");
                    }
                }

                /*원자재수입검사*/
                if (hash.Count > 0)
                {
                    foreach (int idx in hash.Keys)
                    {
                        frm원자재수입검사 frm = (frm원자재수입검사)hash[idx];

                        sb.AppendLine(" insert into f_raw_chk (   ");
                        sb.AppendLine(" input_date                  ");
                        sb.AppendLine(" ,input_cd                  ");
                        sb.AppendLine(" ,seq                  ");
                        sb.AppendLine(" ,raw_mat_cd                  ");
                        sb.AppendLine(" ,chk_date                  ");
                        sb.AppendLine(" ,chk_amt                  ");
                        sb.AppendLine(" ,pass_amt                 ");
                        sb.AppendLine(" ,non_pass_amt             ");
                        sb.AppendLine(" ,pass_yn                  ");
                        sb.AppendLine(" ,instaff                  ");
                        sb.AppendLine(" ,intime                   ");
                        sb.AppendLine(" ) values (      ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("  ,   '" + input_cd + "' ");
                        sb.AppendLine("  ,'" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "'");
                        sb.AppendLine(" ,'" + in_rm_dgv.Rows[idx].Cells["RAW_MAT_CD"].Value.ToString() + "'   ");
                        sb.AppendLine(" ,'" + input_date + "'   ");
                        sb.AppendLine(" ,'" + frm.txt_input_amt.Text + "'   ");
                        sb.AppendLine(" ,'" + frm.txt_pass_amt.Text.Replace(",", "") + "'   ");
                        sb.AppendLine(" ,'" + frm.txt_non_pass_amt.Text.Replace(",", "") + "'    ");
                        sb.AppendLine(" ,'" + frm.txt_pass_yn.Text + "'   ");
                        sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");


                        sb.AppendLine(" update f_raw_detail set ");
                        sb.AppendLine(" check_yn = 'Y' ");
                        sb.AppendLine(" ,total_amt = temp_amt ");
                        sb.AppendLine(" ,curr_amt = temp_amt ");
                        sb.AppendLine(" where input_date = '" + input_date + "' and input_cd = '" + input_cd + "' and seq = '" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "'     ");

                        sb.AppendLine(" update n_raw_code set ");
                        sb.AppendLine(" bal_stock = bal_stock + (select temp_amt from f_raw_detail where  ");
                        sb.AppendLine(" input_date = '" + input_date + "' and input_cd = '" + input_cd + "'and seq = '" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "'  )   ");
                        sb.AppendLine(" where raw_mat_cd = (select raw_mat_cd from f_raw_detail where   ");
                        sb.AppendLine(" input_date = '" + input_date + "' and input_cd =  '" + input_cd + "'and seq = '" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "'  )   ");

                        for (int i = 0; i < frm.dataChkGrid.Rows.Count; i++)
                        {
                            if (frm.dataChkGrid.Rows[i].Cells[1].Tag == null) continue;

                            sb.AppendLine(" declare @c_seq" + idx + i + " int ");
                            sb.AppendLine(" select @c_seq" + idx + i + " = isnull(max(seq),0)+1 from f_raw_chk_detail ");
                            sb.AppendLine(" where input_date = '" + input_date + "' and input_cd = '" + input_cd + "' and input_seq = '" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "'     ");

                            sb.AppendLine(" insert into f_raw_chk_detail ( ");
                            sb.AppendLine(" input_date ");
                            sb.AppendLine(" ,input_cd ");
                            sb.AppendLine(" ,input_seq ");
                            sb.AppendLine(" ,seq ");
                            sb.AppendLine(" ,chk_cd ");
                            sb.AppendLine(" ,chk_amt ");
                            sb.AppendLine(" ,pass_yn ");
                            sb.AppendLine(" ,add_print_yn ");
                            sb.AppendLine(" ,comment ");
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine(" '" + input_date + "' ");
                            sb.AppendLine(" ,'"+input_cd+"' ");
                            sb.AppendLine(" ,'" + in_rm_dgv.Rows[idx].Cells["SEQ"].Value + "' ");
                            sb.AppendLine(" ,@c_seq" + idx + i + " ");
                            sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells[1].Tag.ToString() + "' ");
                            sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells["CHK_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine(" ,'" + (frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == null || (bool)frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                            sb.AppendLine(" ,'" + (frm.dataChkGrid.Rows[i].Cells["ADD_PRINT"].Value == null || (bool)frm.dataChkGrid.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                            sb.AppendLine(" ,'" + frm.dataChkGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                            sb.AppendLine(" ) ");

                        }
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateStRaw(conDataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    sb.AppendLine("update N_RAW_CODE set ");
                    sb.AppendLine("      BAL_STOCK = (select	  ");
                    sb.AppendLine("                         ISNULL((");
                    sb.AppendLine("                             select SUM(ISNULL(TOTAL_AMT,0)) from F_RAW_DETAIL ");
                    sb.AppendLine("                             where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'  ");
                    sb.AppendLine("                                 and (CHECK_YN = 'Y' or CHECK_YN = 'O') ");
                    sb.AppendLine("                     group by RAW_MAT_CD),0)  ");
                    sb.AppendLine("                    -  ");
                    sb.AppendLine("                     ISNULL((  ");
                    sb.AppendLine("                     select SUM(ISNULL(TOTAL_AMT,0)) from F_RAW_OUTPUT ");
                    sb.AppendLine("                     where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'   ");
                    sb.AppendLine("                     group by RAW_MAT_CD),0))");
                    sb.AppendLine("where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_STOCK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateWork(
              string work_date
            , string txt_work_cd
            , string txt_lot_no
            , string txt_item_cd
            , string txt_cust_cd
            , string txt_inst_amt
            , string deliver_req_date
            , string cmb_line
            , string cmb_worker
            , string txt_plan_num
            , string txt_plan_item
            , string txt_inst_notice
            , conDataGridView w_rm_dgv
            , DataGridView w_half_dgv
            , DataGridView del_dgv
            , string rawchk)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select * ");
                //sb.AppendLine(" from F_PLAN A ");
                //sb.AppendLine(" left outer join F_PLAN_GROUP B  ");
                //sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
                //sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD  ");
                //sb.AppendLine(" where A.PLAN_NUM = '" + txt_plan_num + "' 	 ");
                //sb.AppendLine("     and B.ITEM_CD = '" + txt_plan_item + "' ");
                //sb.AppendLine("     and B.WORK_YN = 'Y'       ");

                sb.AppendLine(" select * ");
                sb.AppendLine(" from F_WORK_FLOW ");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt != null && dt.Rows.Count > 0)
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("      LOT_NO = @LOT_NO ");
                sb.AppendLine("      ,RAW_OUT_YN = '" + rawchk + "' ");
                sb.AppendLine("     ,ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,INST_AMT = @INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE = @DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,WORKER_CD = @WORKER_CD");
                sb.AppendLine("     ,INST_NOTICE = @INST_NOTICE ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' and W_INST_CD = '" + txt_work_cd + "' ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)w_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @work_seq" + i + " int ");
                            sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                            sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine("and W_INST_CD = '" + txt_work_cd + "' ");

                            sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                            sb.AppendLine("     W_INST_DATE ");
                            sb.AppendLine("     ,W_INST_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,SOYO_AMT ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,INSTAFF");
                            sb.AppendLine("     ,INTIME");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + work_date + "' ");
                            sb.AppendLine("     ,'" + txt_work_cd + "' ");
                            sb.AppendLine("     ,@work_seq" + i + " ");
                            sb.AppendLine("     ,'" + txt_lot_no + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_WORK_INST_DETAIL set");
                            sb.AppendLine("       SOYO_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + w_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("update F_WORK_INST_HALF_DETAIL set");
                        sb.AppendLine("       SOYO_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine(" and SEQ = '" + w_half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                        sb.AppendLine("    where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("     and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public int updateWork(
          string work_date
        , string txt_work_cd
        , string txt_lot_no
        , string txt_item_cd
        , string txt_cust_cd
        , string txt_inst_amt
        , string deliver_req_date
        , string cmb_line
        , string cmb_worker
        , string txt_plan_num
        , string txt_plan_item
        , string txt_inst_notice
        , conDataGridView w_rm_dgv
        , DataGridView w_half_dgv
        , DataGridView del_dgv
        , string rawchk
        , string mold)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select * ");
                //sb.AppendLine(" from F_PLAN A ");
                //sb.AppendLine(" left outer join F_PLAN_GROUP B  ");
                //sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
                //sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD  ");
                //sb.AppendLine(" where A.PLAN_NUM = '" + txt_plan_num + "' 	 ");
                //sb.AppendLine("     and B.ITEM_CD = '" + txt_plan_item + "' ");
                //sb.AppendLine("     and B.WORK_YN = 'Y'       ");

                sb.AppendLine(" select * ");
                sb.AppendLine(" from F_WORK_FLOW ");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt != null && dt.Rows.Count > 0)
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("      LOT_NO = @LOT_NO ");
                sb.AppendLine("      ,RAW_OUT_YN = '" + rawchk + "' ");
                sb.AppendLine("     ,ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,INST_AMT = @INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE = @DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,WORKER_CD = @WORKER_CD");
                sb.AppendLine("     ,INST_NOTICE = @INST_NOTICE ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,MOLD_CD = @MOLD_CD ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' and W_INST_CD = '" + txt_work_cd + "' ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)w_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @work_seq" + i + " int ");
                            sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                            sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine("and W_INST_CD = '" + txt_work_cd + "' ");

                            sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                            sb.AppendLine("     W_INST_DATE ");
                            sb.AppendLine("     ,W_INST_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,SOYO_AMT ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,INSTAFF");
                            sb.AppendLine("     ,INTIME");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + work_date + "' ");
                            sb.AppendLine("     ,'" + txt_work_cd + "' ");
                            sb.AppendLine("     ,@work_seq" + i + " ");
                            sb.AppendLine("     ,'" + txt_lot_no + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_WORK_INST_DETAIL set");
                            sb.AppendLine("       SOYO_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + w_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("update F_WORK_INST_HALF_DETAIL set");
                        sb.AppendLine("       SOYO_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine(" and SEQ = '" + w_half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                        sb.AppendLine("    where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("     and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt);
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                sCommand.Parameters.AddWithValue("@MOLD_CD", mold);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public int update_Work_Flow(
              string txt_lot_no
            , string txt_item_cd
            , conDataGridView[] dgv
            , Label[] lbl_flow_cd
            , Label[] lbl_flow_seq
            , Label[] lbl_item_iden
            , int flow_cnt
            )
        {


            /// 
            /// bool 공정완료 =  공정완료버튼을  눌렀을때   true
            ///

            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {

                        for (int j = 0; j < dgv[i].Rows.Count; j++)
                        {
                            string txt_f_step = (string)dgv[i].Rows[j].Cells[7].Value;
                            if (txt_f_step == "" || txt_f_step == null)
                            {
                                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                                sb.AppendLine("      LOT_NO ");
                                sb.AppendLine("      ,LOT_SUB ");
                                sb.AppendLine("      ,F_STEP ");
                                sb.AppendLine("      ,FLOW_CD ");
                                sb.AppendLine("      ,SEQ ");
                                sb.AppendLine("      ,F_SUB_DATE ");
                                sb.AppendLine("      ,F_SUB_AMT ");
                                sb.AppendLine("      ,INPUT_AMT ");
                                sb.AppendLine("      ,LOSS ");
                                sb.AppendLine("      ,POOR_CD ");
                                sb.AppendLine("      ,POOR_AMT ");
                                sb.AppendLine("      ,COMPLETE_YN ");
                                sb.AppendLine("      ,CHECK_YN ");
                                sb.AppendLine("      ,ITEM_CHECK_YN ");
                                sb.AppendLine("      ,INSTAFF ");
                                sb.AppendLine("      ,INTIME ");
                                sb.AppendLine("      ,COMMENT ");
                                sb.AppendLine("      ,INPUT_YN ");
                                sb.AppendLine(" ) values ( ");
                                sb.AppendLine("      '" + (string)dgv[i].Rows[j].Cells[0].Value + "' ");
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");
                                sb.AppendLine("      , '" + lbl_flow_seq[i].Text.ToString() + "' ");//step
                                sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");
                                sb.AppendLine("      , '" + (j + 1) + "' ");//seq
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[2].Value + "' ");
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "") + "' ");
                                int real_AMT = Int32.Parse(((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "")) - Int32.Parse(((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "")) - Int32.Parse(((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", ""));
                                // 투입량에서 loss 빼고 불량빼고
                                sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //F_SUB_AMT 13
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' ");
                                if (dgv[i].Rows[j].Cells[5].Value == null)
                                {
                                    dgv[i].Rows[j].Cells[5].Value = "";
                                }

                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[5].Value + "' "); //POOR_CD
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT
                                sb.AppendLine("      , 'N' ");
                                sb.AppendLine("      , 'S' "); //S-> 대기 
                                sb.AppendLine("      , 'S' "); //S-> 대기 
                                //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '" + lbl_flow_cd[i].Text.ToString() + "') ");
                                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                                sb.AppendLine("      ,'' ");
                                if ((bool)dgv[i].Rows[j].Cells[8].Value)
                                {
                                    sb.AppendLine("      ,'Y' ");//20
                                }
                                else
                                {
                                    sb.AppendLine("      ,'N' ");//20
                                }
                                sb.AppendLine("      ) ");
                            }
                            else
                            {
                                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                                sb.AppendLine("       F_SUB_DATE = '" + (string)dgv[i].Rows[j].Cells[2].Value + "' ");
                                int real_AMT = Int32.Parse(((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "")) - Int32.Parse(((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "")) - Int32.Parse(((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", ""));
                                // 투입량에서 loss 빼고 불량빼고
                                sb.AppendLine("      , '" + real_AMT.ToString() + "' "); //F_SUB_AMT 13
                                sb.AppendLine("      ,LOSS = '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' ");
                                if (dgv[i].Rows[j].Cells[5].Value == null)
                                {
                                    dgv[i].Rows[j].Cells[5].Value = "";
                                }
                                sb.AppendLine("      ,POOR_CD = '" + (string)dgv[i].Rows[j].Cells[5].Value + "' ");
                                sb.AppendLine("      ,POOR_AMT = '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT
                                //sb.AppendLine("      ,CHECK_YN = (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '" + lbl_flow_cd[i].Text.ToString() + "') ");
                                sb.AppendLine("      ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                                sb.AppendLine(" and LOT_SUB = '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");
                                sb.AppendLine(" and F_STEP = '" + (i + 1) + "' ");

                                if ((bool)dgv[i].Rows[j].Cells[8].Value)
                                {
                                    sb.AppendLine("      and INPUT_YN='Y' ");//20
                                }
                                else
                                {
                                    sb.AppendLine("      and INPUT_YN='Y' ");//20
                                }
                            }
                        }
                    }
                }

                bool chk = false;
                int input_amt = 0;
                for (int i = 0; i < flow_cnt; i++)
                {
                    if (lbl_item_iden[i].Text.ToString().Equals("Y"))
                    {
                        chk = true;
                        break;
                    }

                }

                if (chk)  //제품식별표가 Y
                {
                    string item_date = flow_date;
                    for (int i = 0; i < dgv[flow_cnt - 1].Rows.Count; i++)
                    {
                        int item_sum = int.Parse(dgv[flow_cnt - 1].Rows[i].Cells[3].Value.ToString().Replace(",", "")) - int.Parse(dgv[flow_cnt - 1].Rows[i].Cells[6].Value.ToString().Replace(",", ""));

                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                        sb.AppendLine("where INPUT_DATE = '" + item_date + "' ");

                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " =count(*) from F_ITEM_INPUT ");
                        sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                        sb.AppendLine("     and LOT_SUB = '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " = 0)");
                        sb.AppendLine("     insert into F_ITEM_INPUT(");
                        sb.AppendLine("         INPUT_DATE ");
                        sb.AppendLine("         ,INPUT_CD ");
                        sb.AppendLine("         ,ITEM_CD ");
                        sb.AppendLine("         ,LOT_NO ");
                        sb.AppendLine("         ,LOT_SUB ");
                        sb.AppendLine("         ,F_STEP ");
                        sb.AppendLine("         ,FLOW_CD ");
                        sb.AppendLine("         ,INPUT_AMT ");
                        sb.AppendLine("         ,INSTAFF ");
                        sb.AppendLine("         ,INTIME ");
                        sb.AppendLine("         ,CURR_AMT ");
                        sb.AppendLine("         ,COMPLETE_YN ");
                        sb.AppendLine("     ) values ( ");
                        sb.AppendLine("         '" + item_date + "' ");
                        sb.AppendLine("         ,@seq" + i + " ");
                        sb.AppendLine("         , '" + txt_item_cd + "' ");
                        sb.AppendLine("         , '" + txt_lot_no + "' ");
                        sb.AppendLine("         , '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");
                        sb.AppendLine("         , '" + (flow_cnt).ToString() + "' "); //f_step
                        sb.AppendLine("         , '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' "); //flow_cd
                        sb.AppendLine("      , '" + item_sum.ToString() + "' ");
                        //sb.AppendLine("         ," + input_amt + " ");
                        sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                        sb.AppendLine("         , '" + item_sum.ToString() + "' ");
                        sb.AppendLine("         , 'N'");
                        sb.AppendLine("      ) ");
                        sb.AppendLine("ELSE ");
                        sb.AppendLine("     update F_ITEM_INPUT ");
                        sb.AppendLine("     set INPUT_AMT = '" + ((string)dgv[0].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("         ,F_STEP = '" + (flow_cnt).ToString() + "', FLOW_CD = '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' ");
                        sb.AppendLine("         ,CURR_AMT = '" + item_sum.ToString() + "' ");
                        sb.AppendLine("     where LOT_NO = '" + txt_lot_no + "' ");
                        sb.AppendLine("     and LOT_SUB = '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");

                        //input_amt += int.Parse(((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", ""));
                    }

                    //string item_date = flow_date;

                    //sb.AppendLine("declare @seq int ");
                    //sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                    //sb.AppendLine("where INPUT_DATE = '" + item_date + "' ");

                    //sb.AppendLine("declare @chk int ");
                    //sb.AppendLine("select @chk =count(*) from F_ITEM_INPUT ");
                    //sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                    //sb.AppendLine("IF(@chk = 0)");
                    //sb.AppendLine("     insert into F_ITEM_INPUT(");
                    //sb.AppendLine("         INPUT_DATE ");
                    //sb.AppendLine("         ,INPUT_CD ");
                    //sb.AppendLine("         ,ITEM_CD ");
                    //sb.AppendLine("         ,LOT_NO ");
                    //sb.AppendLine("         ,INPUT_AMT ");
                    //sb.AppendLine("         ,INSTAFF ");
                    //sb.AppendLine("         ,INTIME ");
                    //sb.AppendLine("     ) values ( ");
                    //sb.AppendLine("         '" + item_date + "' ");
                    //sb.AppendLine("         ,@seq ");
                    //sb.AppendLine("         ,'" + txt_item_cd + "' ");
                    //sb.AppendLine("         ,'" + txt_lot_no + "' ");
                    //sb.AppendLine("         ," + input_amt + " ");
                    //sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    //sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    //sb.AppendLine("      ) ");
                    //sb.AppendLine("ELSE ");
                    //sb.AppendLine("     update F_ITEM_INPUT ");
                    //sb.AppendLine("     set INPUT_AMT = " + input_amt + " ");
                    //sb.AppendLine("     where LOT_NO = '" + txt_lot_no +"' ");

                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int update_Work_Flow2(
              string txt_lot_no
            )
        {


            /// 
            /// bool 공정완료 =  공정완료버튼을  눌렀을때   true
            ///

            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("      , complete_YN= 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("      , complete_YN= 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");


                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int update_Work_Flow_Complete(string txt_lot_no, double poor_cnt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                //불량 작업지시서 
                if (poor_cnt > 0)
                {
                    string curr_lot_no = flow_date.ToString().Replace("-", "");
                    curr_lot_no = curr_lot_no.Substring(2).ToString();


                    sb.AppendLine(" declare @seq int ");
                    sb.AppendLine(" select @seq = ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                    sb.AppendLine(" where W_INST_DATE = '" + flow_date + "' ");

                    sb.AppendLine(" insert into F_WORK_INST(");
                    sb.AppendLine("         W_INST_DATE ");
                    sb.AppendLine("        ,W_INST_CD ");
                    sb.AppendLine("        ,LOT_NO ");
                    sb.AppendLine("        ,ITEM_CD ");
                    sb.AppendLine("        ,CUST_CD ");
                    sb.AppendLine("        ,INST_AMT ");
                    sb.AppendLine("        ,COMPLETE_YN ");
                    sb.AppendLine("        ,DELIVERY_DATE ");
                    sb.AppendLine("        ,PLAN_NUM ");
                    sb.AppendLine("        ,PLAN_ITEM ");
                    sb.AppendLine("        ,CHARGE_AMT ");
                    sb.AppendLine("        ,PACK_AMT ");
                    sb.AppendLine("        ,RAW_OUT_YN ");
                    sb.AppendLine("        ,POOR_WORK_YN ");
                    sb.AppendLine("        ,TOP_LOT_NO ");
                    sb.AppendLine("        ,INSTAFF ");
                    sb.AppendLine("        ,INTIME ");
                    sb.AppendLine("        )");

                    sb.AppendLine(" select '" + flow_date + "' ");

                    sb.AppendLine("        ,@seq      ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,ITEM_CD      ");
                    sb.AppendLine("        ,CUST_CD ");
                    sb.AppendLine("        ," + poor_cnt + " ");
                    sb.AppendLine("        ,'N' ");
                    sb.AppendLine("        ,DELIVERY_DATE ");
                    sb.AppendLine("        ,PLAN_NUM ");
                    sb.AppendLine("        ,PLAN_ITEM ");
                    sb.AppendLine("        ,CHARGE_AMT ");
                    sb.AppendLine("        ,PACK_AMT ");
                    sb.AppendLine("        ,'Y' ");
                    sb.AppendLine("        ,'Y' ");
                    sb.AppendLine("        ,'" + txt_lot_no + "' ");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    //작업지시 상세 내역 

                    sb.AppendLine(" insert into F_WORK_INST_DETAIL(");
                    sb.AppendLine("         W_INST_DATE ");
                    sb.AppendLine("        ,W_INST_CD ");
                    sb.AppendLine("        ,SEQ ");
                    sb.AppendLine("        ,LOT_NO ");
                    sb.AppendLine("        ,RAW_MAT_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ,TOTAL_AMT ");
                    sb.AppendLine("        ,INSTAFF ");
                    sb.AppendLine("        ,INTIME ");
                    sb.AppendLine("        ) ");

                    sb.AppendLine(" select '" + flow_date + "' ");
                    sb.AppendLine("        ,@seq      ");
                    sb.AppendLine("        ,SEQ      ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,RAW_MAT_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ," + poor_cnt + " * SOYO_AMT");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST_DETAIL ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    sb.AppendLine(" declare @chk int ");
                    sb.AppendLine(" select @chk =count(*) from F_WORK_INST_HALF_DETAIL  ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    sb.AppendLine(" IF(@chk > 0) ");
                    sb.AppendLine(" insert into F_WORK_INST_HALF_DETAIL(W_INST_DATE,W_INST_CD,SEQ,LOT_NO,HALF_ITEM_CD,SOYO_AMT,TOTAL_AMT,INSTAFF,INTIME) ");
                    sb.AppendLine(" select '" + flow_date + "' ");
                    sb.AppendLine("        ,@seq ");
                    sb.AppendLine("        ,SEQ ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,HALF_ITEM_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ," + poor_cnt + " * SOYO_AMT");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST_HALF_DETAIL ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_COMPLETE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        public int update_Work_Flow_Complete(string txt_lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_COMPLETE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        public int update_Work_Raw_Out_Yn(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("       RAW_OUT_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_WORK_INST_RAW_OUT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        /*
        public int updateItemOut(
              string out_date
            , string out_cd
            , string jang_cd
            , conDataGridView item_out_dgv
            , DataTable del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("update F_ITEM_OUT set");
                sb.AppendLine("      UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' and OUTPUT_CD= '" + out_cd + "' ");

                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)item_out_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {

                            sb.AppendLine("declare @out_seq" + i + " int ");
                            sb.AppendLine("select @out_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT_DETAIL ");
                            sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine("and OUTPUT_CD = '" + out_cd + "' ");

                            sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                            sb.AppendLine("     OUTPUT_DATE ");
                            sb.AppendLine("     ,OUTPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,LOT_SUB ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,OUTPUT_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,TAX_CD ");
                            sb.AppendLine("     ,CUST_CD ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + out_date + "' ");
                            sb.AppendLine("     ,'" + out_cd + "' ");
                            sb.AppendLine("     ,@out_seq" + i + " ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_ITEM_OUT_DETAIL set");
                            sb.AppendLine("       OUTPUT_AMT =  '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + item_out_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("     and OUTPUT_CD = '" + out_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i]["SEQ"].ToString() + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());


                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@OUTPUT_CD", out_cd);

                if (Common.sp_pack_gubun.Equals("1"))
                {
                    StringBuilder sb2 = new StringBuilder();

                    sb2.AppendLine(" UPDATE T_매출 SET ");
                    sb2.AppendLine(" 수정사원번호 = '100' ");
                    sb2.AppendLine(" ,수정일시 =  convert(varchar, getdate(), 120) ");
                    sb2.AppendLine(" WHERE 사업자번호 = '" + Common.p_saupNo + "' ");
                    sb2.AppendLine(" and 지점코드 = '0' ");
                    sb2.AppendLine(" and 매출일자 = '" + out_date + "' ");
                    sb2.AppendLine(" and 전표번호 = '" + jang_cd + "' ");

                    if (item_out_dgv.Rows.Count > 0)
                    {
                        for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                        {
                            string txt_seq = (string)item_out_dgv.Rows[i].Cells["SEQ"].Value;
                            if (txt_seq == "" || txt_seq == null)
                            {
                                sb2.AppendLine("declare @out_seq" + i + " int ");
                                sb2.AppendLine("select @out_seq" + i + " =ISNULL(MAX(항목순번),0)+1 from T_매출항목 ");
                                sb2.AppendLine("where 사업자번호 = '" + Common.p_saupNo + "' ");
                                sb2.AppendLine("and 매출일자 = '" + out_date + "' ");
                                sb2.AppendLine("and 전표번호 =  '" + jang_cd + "' ");

                                sb2.AppendLine("INSERT INTO T_매출항목 ( ");
                                sb2.AppendLine(" 사업자번호 ");
                                sb2.AppendLine(" ,지점코드 ");
                                sb2.AppendLine(" ,매출일자 ");
                                sb2.AppendLine(" ,전표번호 ");
                                sb2.AppendLine(" ,항목순번 ");
                                sb2.AppendLine(" ,상품코드 ");
                                sb2.AppendLine(" ,박스수량 ");
                                sb2.AppendLine(" ,중간수량 ");
                                sb2.AppendLine(" ,낱개수량 ");
                                sb2.AppendLine(" ,총수량 ");
                                sb2.AppendLine(" ,박스단가 ");
                                sb2.AppendLine(" ,낱개단가 ");
                                sb2.AppendLine(" ,금액 ");
                                sb2.AppendLine(" ,서비스박스 ");
                                sb2.AppendLine(" ,서비스낱개 ");
                                sb2.AppendLine(" ,서비스총수량 ");
                                sb2.AppendLine(" ,최종매출일 ");
                                sb2.AppendLine(" ,매출구분 ");
                                sb2.AppendLine(" ,비고 ");
                                sb2.AppendLine(" ,과세구분 ");
                                sb2.AppendLine(" ,박스입고단가 ");
                                sb2.AppendLine(" ,낱개입고단가 ");
                                sb2.AppendLine(" ,매출일자와번호 ");
                                sb2.AppendLine(" ) VALUES ( ");
                                sb2.AppendLine(" '" + Common.p_saupNo + "' ");
                                sb2.AppendLine(" ,'0' ");
                                sb2.AppendLine(" ,'" + out_date + "' ");
                                sb2.AppendLine(" ,'" + jang_cd + "' ");
                                sb2.AppendLine(" ,@out_seq" + i + "  ");
                                sb2.AppendLine(" ,'" + item_out_dgv.Rows[i].Cells["O_LINK_CD"].Value.ToString() + "' ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ," + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + " ");
                                sb2.AppendLine(" ," + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + " ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ," + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + " ");
                                sb2.AppendLine(" ," + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + " ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,'' ");
                                sb2.AppendLine(" ,'1' ");
                                sb2.AppendLine(" ,'' ");
                                sb2.AppendLine(" ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value.ToString() + "' ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,0 ");
                                sb2.AppendLine(" ,'" + out_date + "'+'_'+'" + out_cd + "' ");
                                sb2.AppendLine(" ) ");
                            }
                            else
                            {
                                sb2.AppendLine("update T_매출항목 set");
                                sb2.AppendLine("       낱개수량 =  '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                                sb2.AppendLine("      ,총수량 =  '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                                sb2.AppendLine("      ,낱개단가 =  '" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                                sb2.AppendLine("      ,금액 =  '" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                                sb2.AppendLine(" WHERE 사업자번호 = '" + Common.p_saupNo + "' ");
                                sb2.AppendLine(" and 지점코드 = '0' ");
                                sb2.AppendLine(" and 매출일자 = '" + out_date + "' ");
                                sb2.AppendLine(" and 전표번호 = '" + jang_cd + "' ");
                                sb2.AppendLine(" and 항목순번 = '" + item_out_dgv.Rows[i].Cells["J_INPUT_SEQ"].Value.ToString() + "' ");
                            }
                        }
                    }

                    if (del_dgv.Rows.Count > 0)
                    {
                        for (int i = 0; i < del_dgv.Rows.Count; i++)
                        {
                            sb2.AppendLine("delete from T_매출항목 ");
                            sb2.AppendLine(" WHERE 사업자번호 = '" + Common.p_saupNo + "' ");
                            sb2.AppendLine(" and 지점코드 = '0' ");
                            sb2.AppendLine(" and 매출일자 = '" + out_date + "' ");
                            sb2.AppendLine(" and 전표번호 = '" + jang_cd + "' ");
                            sb2.AppendLine(" and 항목순번 = '" + del_dgv.Rows[i]["J_SEQ"].ToString() + "' ");
                        }
                    }

                    SqlCommand sCommand2 = new SqlCommand(sb2.ToString());

                    int qResult = wAdo.SqlCommandEtc_Jang(sCommand2, "update_ITEM_OUTPUT_JANG_TB");
                    if (qResult > 0)
                    {

                        sb2.Clear();
                        for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                        {
                            sb2.AppendLine("SELECT 항목순번 FROM T_매출항목 WHERE 사업자번호 = '" + Common.p_saupNo + "' and 지점코드 = '0' and 매출일자 ='" + out_date + "' and 전표번호 = '" + jang_cd + "' ");
                        }

                        SqlCommand sCommandTemp2 = new SqlCommand(sb2.ToString());
                        if (sCommand.CommandText.Equals(null))
                        {
                            wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                            return -1;
                        }
                        DataTable dtTempSeq = wAdo.SqlCommandSelect_Jang(sCommandTemp2);

                        if (dtTempSeq != null && dtTempSeq.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtTempSeq.Rows.Count; i++)
                            {
                                string txt_seq = (string)item_out_dgv.Rows[i].Cells["SEQ"].Value;
                                if (txt_seq == "" || txt_seq == null)
                                {
                                    sb.AppendLine(" UPDATE F_ITEM_OUT_DETAIL SET J_INPUT_DATE = '" + out_date + "' , J_INPUT_CD = '" + jang_cd + "' , J_INPUT_SEQ = '" + dtTempSeq.Rows[i]["항목순번"].ToString() + "' ");
                                    sb.AppendLine(" WHERE OUTPUT_DATE = '" + out_date + "' and  OUTPUT_CD = '" + out_cd + "' and SEQ = @out_seq" + i + " ");
                                }
                            }

                            sCommand = new SqlCommand(sb.ToString());
                        }
                        else
                        {
                            return -1;
                        }


                        int qResult2 = wAdo.SqlCommandEtc(sCommand, "update_ITEM_OUTPUT_TB");
                        if (qResult2 > 0)
                        {
                            return 0;  // 0 true, 1 false
                        }
                        else return 1;
                    }
                    else return 1;

                }
                else
                {
                    int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_OUTPUT_TB");
                    if (qResult > 0)
                    {
                        return 0;  // 0 true, 1 false
                    }
                    else return 1;
                }

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
         */

        //공정검사 항목 수정 

        //공정검사 항목 
        public int updateFlowChk(
              string txt_item_cd
            , string txt_flow_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView flow_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_FLOW_CHK ");
                sb.AppendLine("set MEASURE_CNT = " + txt_measure_cnt + "  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (flow_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_FLOW_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_METHOD = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_FLOW_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_METHOD ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + txt_flow_cd + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //제품검사기준 항목 
        public int updateItemChk(
              string txt_item_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView item_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_ITEM_CHK ");
                sb.AppendLine("set MEASURE_CNT = " + txt_measure_cnt + "  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (item_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_ITEM_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_INTERVAL = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_ITEM_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_INTERVAL ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //수입검사 항목 
        public int updateRawChk(
              string txt_raw_mat_cd
            , string txt_control_no
            , conDataGridView raw_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_RAW_CHK ");
                sb.AppendLine("set CONTROL_NO = '" + txt_control_no + "'  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_RAW_CHK_STAN ");
                        sb.AppendLine("    where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (raw_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < raw_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_RAW_CHK_STAN ");
                        sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_RAW_CHK_STAN ");
                        sb.AppendLine("set CHK_STAN_VALUE = '" + (string)raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_RAW_CHK_STAN(");
                        sb.AppendLine("     RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_STAN_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //공정검사성적서 수정
        public int updateFlowChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView flow_chk_dgv
            , string path)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                if (img_size > 0)
                {
                    sb.AppendLine(" update F_FLOW_CHK ");
                    sb.AppendLine(" set MAP = @MAP , MAP_SIZE = @MAP_SIZE ,EXTERIOR = @EXTERIOR ");
                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                }
                //else 
                //{
                //    sb.AppendLine(" set MAP = null , MAP_SIZE = 0 ");
                //}

                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }

                    sb.AppendLine("update F_FLOW_CHK_RST ");
                    sb.AppendLine("set GRADE = '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                    sb.AppendLine("     and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                    int k = 1;
                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("update F_FLOW_CHK_DETAIL");
                        sb.AppendLine("set   CHK_VALUE = '" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where LOT_NO = @LOT_NO ");
                        sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                        sb.AppendLine("     and F_STEP = @F_STEP ");
                        sb.AppendLine("     and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = " + k + " ");
                        k++;
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@EXTERIOR", path);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //제품검사성적서 수정
        public int updateItemChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView item_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                if (img_size > 0)
                {
                    sb.AppendLine(" update F_ITEM_CHK ");
                    sb.AppendLine(" set MAP = @MAP , MAP_SIZE = @MAP_SIZE ");
                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                }
                //else
                //{
                //    sb.AppendLine(" set MAP = null , MAP_SIZE = 0 ");
                //}

                for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                {
                    if (item_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        item_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }

                    sb.AppendLine("update F_ITEM_CHK_RST ");
                    sb.AppendLine("set GRADE = '" + (string)item_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                    sb.AppendLine("     and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                    int k = 1;
                    for (int j = startIdx; j < item_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("update F_ITEM_CHK_DETAIL");
                        sb.AppendLine("set   CHK_VALUE = '" + item_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where LOT_NO = @LOT_NO ");
                        sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                        sb.AppendLine("     and F_STEP = @F_STEP ");
                        sb.AppendLine("     and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = " + k + " ");
                        k++;
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //공정검사성적서 합격여부
        public int updateFlowChkPass(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string pass_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_FLOW_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'Y' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //제품검사성적서 합격여부
        public int updateItemChkPass(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string pass_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_ITEM_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set ITEM_CHECK_YN = 'Y' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //수입검사 합격여부
        public int updateRawChkPass(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string pass_yn
            , decimal final_amt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_RAW_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN  ");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                sb.AppendLine(" update F_RAW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'Y' , TOTAL_AMT = " + final_amt + ", CURR_AMT = " + final_amt + "");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //공정검사성적서 수정
        public int updateRawChkExam(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string txt_raw_mat_cd
            , string txt_control_cd
            , string txt_part_no
            , string txt_chk_total_amt
            , string txt_pass_amt
            , string pri_non_pass_amt
            , string upd_com_amt
            , string final_non_pass_amt
            , string final_pass_amt
            , string comment
            , DataGridView rawStanGrid
            , DataGridView rawPoorGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("update F_RAW_CHK ");
                sb.AppendLine("set CONTROL_NO = @CONTROL_NO ");
                sb.AppendLine("     ,PART_NO = @PART_NO ");
                sb.AppendLine("     ,CHK_TOTAL_AMT = @CHK_TOTAL_AMT ");
                sb.AppendLine("     ,PASS_AMT = @PASS_AMT ");
                sb.AppendLine("     ,PRI_NON_PASS_AMT = @PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,UPD_COM_AMT = @UPD_COM_AMT ");
                sb.AppendLine("     ,FINAL_NON_PASS_AMT = @FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,FINAL_PASS_AMT = @FINAL_PASS_AMT ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine(" and INPUT_CD = @INPUT_CD ");
                sb.AppendLine(" and SEQ = @SEQ ");

                if (rawStanGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawStanGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("update F_RAW_CHK_RST ");
                        sb.AppendLine("set CHK_VALUE =  '" + rawStanGrid.Rows[i].Cells["CHK_VALUE"].Value.ToString() + "' ");
                        sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                        sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine(" and SEQ = '" + txt_seq + "' ");
                        sb.AppendLine(" and CHK_CD = '" + rawStanGrid.Rows[i].Cells["CHK_CD"].Value.ToString() + "' ");
                    }
                }

                if (rawPoorGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawPoorGrid.Rows.Count; i++)
                    {
                        if (rawPoorGrid.Rows[i].Cells["POOR_SEQ"] == null) Console.WriteLine(rawPoorGrid.Rows[i].Cells["POOR_SEQ"]);
                        if (rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value != null && (string)rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value != "")
                        {
                            sb.AppendLine("update F_RAW_CHK_POOR");
                            sb.AppendLine(" set  ");
                            if (rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value == null)
                            {
                                rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value = "";
                            }
                            if (rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() == null)
                            {
                                rawPoorGrid.Rows[i].Cells["POOR_NM"].Value = "";
                            }
                            sb.AppendLine("     TYPE_CD = '" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                            sb.AppendLine("     ,POOR_NM = '" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                            sb.AppendLine("     ,PRI_NON_PASS_AMT = '" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "'");
                            sb.AppendLine("     ,UPD_DETAIL = '" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                            sb.AppendLine("     ,UPD_PASS_AMT = '" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                            //sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + txt_seq + "' ");
                            sb.AppendLine(" and POOR_SEQ = '" + rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value.ToString() + "' ");
                        }
                        else  //신규일 경우
                        {
                            sb.AppendLine("declare @p_seq" + i + " int ");
                            sb.AppendLine("select @p_seq" + i + " =ISNULL(MAX(POOR_SEQ),0)+1 from F_RAW_CHK_POOR ");
                            sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                            sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                            sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                            sb.AppendLine("insert into F_RAW_CHK_POOR(");
                            sb.AppendLine("     INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,POOR_SEQ ");
                            sb.AppendLine("     ,TYPE_CD ");
                            sb.AppendLine("     ,POOR_NM ");
                            sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                            sb.AppendLine("     ,UPD_DETAIL ");
                            sb.AppendLine("     ,UPD_PASS_AMT ");
                            //sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("      '" + txt_input_date + "' ");
                            sb.AppendLine("      ," + txt_input_cd + " ");
                            sb.AppendLine("      ," + txt_seq + " ");
                            sb.AppendLine("      ,@p_seq" + i + " ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                            // sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" ) ");
                        }
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_cd);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);
                sCommand.Parameters.AddWithValue("@CHK_TOTAL_AMT", txt_chk_total_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PASS_AMT", txt_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PRI_NON_PASS_AMT", pri_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@UPD_COM_AMT", upd_com_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_NON_PASS_AMT", final_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_PASS_AMT", final_pass_amt.Replace(",", ""));


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateChkOmit(StringBuilder sb)  //condition = 현황 , dt = detail
        {
            try
            {
                wnAdo wAdo = new wnAdo();


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_CHK_OMIT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        #endregion update
        public int deleteStaff(string txt_user_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_STAFF_CODE ");
                sb.AppendLine("    where STAFF_CD =@STAFF_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteDept(string txtDeptCd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_DEPT_CODE ");
                sb.AppendLine("    where DEPT_CD =@DEPT_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deletePos(string txt_pos_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_POS_CODE ");
                sb.AppendLine("    where POS_CD =@POS_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteStor(string txt_stor_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_STORAGE_CODE ");
                sb.AppendLine("    where STORAGE_CD =@STORAGE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteType(string txt_type_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_TYPE_CODE ");
                sb.AppendLine("    where TYPE_CD =@TYPE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteUnit(string txt_unit_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_UNIT_CODE ");
                sb.AppendLine("    where UNIT_CD =@UNIT_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteLine(string txt_line_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_LINE_CODE ");
                sb.AppendLine("    where LINE_CD =@LINE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deletePoor(string txt_poor_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_POOR_CODE ");
                sb.AppendLine("    where POOR_CD = @POOR_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public void deleteCHK(string txt_chkCD)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CHK_CODE ");
                sb.AppendLine("    where CHK_CD = '" + txt_chkCD + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POOR_TB");

                Debug.WriteLine(sb);
                return;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return;
            }
        }
        public int deleteFlow(string txt_flow_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FLOW_CODE ");
                sb.AppendLine("    where FLOW_CD = @FLOW_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteRaw(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_RAW_CODE ");
                sb.AppendLine("    where RAW_MAT_CD = @RAW_MAT_CD  ");

                sb.AppendLine("delete from N_RAW_CUST ");
                sb.AppendLine("    where RAW_MAT_CD = @RAW_MAT_CD  ");

                sb.AppendLine("delete from N_PRICE_INFO ");
                sb.AppendLine("    where PROD_CD = @RAW_MAT_CD  ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteCust(string txt_cust_cd, string cust_gbn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CUST_CODE ");
                sb.AppendLine("    where CUST_CD = @CUST_CD ");
                sb.AppendLine("    and CUST_GUBUN = @CUST_GUBUN ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                
                //cd랑 gubun이 주키 // 여기선 완전 삭제
                int qResult2 = wAdo.SqlCommandEtc(sCommand, "delete_CUST_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
                
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteChk(string txt_chk_cd, string chk_gbn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CHK_CODE ");
                sb.AppendLine("    where CHK_CD = @CHK_CD ");
                sb.AppendLine("    and CHK_GUBUN = @CHK_GUBUN ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);
                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteItem(string txt_item_cd, string txt_link_cd, string condition)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_ITEM_CODE ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_COMP "); //제품구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_FLOW "); //공정구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_COMP_HALF "); //반제품구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine(condition);

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult2 = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_TB");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteFac(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FAC_CODE ");
                sb.AppendLine("    where FAC_CD = @FAC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int deletePlan(string txt_plan_date, string plan_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_PLAN ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                sb.AppendLine("delete from F_PLAN_DETAIL ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                sb.AppendLine("delete from F_PLAN_GROUP ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@PLAN_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteOrder(string txt_plan_date, string plan_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ORDER ");
                sb.AppendLine("    where ORDER_DATE = @ORDER_DATE ");
                sb.AppendLine("    and ORDER_CD = @ORDER_CD ");

                sb.AppendLine("delete from F_ORDER_DETAIL ");
                sb.AppendLine("    where ORDER_DATE = @ORDER_DATE ");
                sb.AppendLine("    and ORDER_CD = @ORDER_CD ");

                //sb.AppendLine("delete from F_PLAN_DETAIL ");
                //sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                //sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ORDER_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@ORDER_CD", plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteInput(string txt_input_date, string txt_input_cd, bool is_give_inserted)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_RAW_INPUT ");
                sb.AppendLine("    where INPUT_DATE = '" + txt_input_date + "' ");
                sb.AppendLine("    and INPUT_CD = '" + txt_input_cd + "' ");


                sb.AppendLine("delete from F_RAW_DETAIL ");
                sb.AppendLine("    where INPUT_DATE = '" + txt_input_date + "' ");
                sb.AppendLine("    and INPUT_CD = '" + txt_input_cd + "' ");

                DataTable dt = fn_Rm_Input_List("WHERE A.INPUT_DATE = '" + txt_input_date + "' AND A.INPUT_CD ='" + txt_input_cd + "'  ");
                bool isCustDay = isCustDayTotal(txt_input_date, dt.Rows[0]["CUST_CD"].ToString()); //일별집계가 있는지 검사
                if (isCustDay)// 있으면
                {

                    sb.AppendLine("UPDATE N_CUST_CODE ");
                    sb.AppendLine("      SET BALANCE = BALANCE - (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");


                    sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                    sb.AppendLine("  P_SUPPLY_MONEY = P_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" ,P_TAX_MONEY =    P_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" ,P_TOTAL_MONEY =  P_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" WHERE INPUT_DATE ='" + txt_input_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_BUY WHERE INPUT_DATE ='" + txt_input_date + "'  AND INPUT_CD ='" + txt_input_cd + "'  )  ");

                    sb.AppendLine(CustDayTotal_Change_Balance(
                        txt_input_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) "
                        , "-"));


                    if (is_give_inserted)
                    {
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  PAY_MONEY = PAY_MONEY - (SELECT GIVE_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_DC_MONEY =    PAY_DC_MONEY - (SELECT DC_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                        sb.AppendLine(" ,PAY_TOTAL_MONEY =  PAY_TOTAL_MONEY - (SELECT TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + txt_input_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_GIVE WHERE INPUT_DATE ='" + txt_input_date + "'  AND INPUT_CD ='" + txt_input_cd + "'  )  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        txt_input_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT TOTAL_MONEY FROM F_GIVE WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) "
                        , "+"));

                        sb.AppendLine("delete from F_GIVE ");
                        sb.AppendLine(" where INPUT_DATE = '" + txt_input_date + "' ");
                        sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");

                        sb.AppendLine(CustDayTotal_Change_Balance_Today(txt_input_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }
                    else
                    {
                        sb.AppendLine(CustDayTotal_Change_Balance_Today(txt_input_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }

                }
                sb.AppendLine("delete from F_BUY ");
                sb.AppendLine(" where INPUT_DATE = '" + txt_input_date + "' ");
                sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");

                sb.AppendLine("delete from F_BUY_DETAIL ");
                sb.AppendLine(" where INPUT_DATE = '" + txt_input_date + "' ");
                sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex){
wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public DataTable isRawOut(string txt_input_date, string txt_input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT * FROM F_RAW_OUTPUT ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }


                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);


                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception ex){
wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return null;
            }
        }

        public int deleteWork(string txt_work_date, string txt_work_cd, string lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_WORK_INST ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                sb.AppendLine("delete from F_WORK_INST_HALF_DETAIL ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                sb.AppendLine("delete from F_WORK_FLOW ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");

                sb.AppendLine("delete from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");

                sb.AppendLine("delete from F_ITEM_INPUT ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", txt_work_date);
                sCommand.Parameters.AddWithValue("@W_INST_CD", txt_work_cd);
                sCommand.Parameters.AddWithValue("@LOT_NO", lot_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteWork(string txt_work_date, string txt_work_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_WORK_INST ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                sb.AppendLine("delete from F_WORK_INST_HALF_DETAIL ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", txt_work_date);
                sCommand.Parameters.AddWithValue("@W_INST_CD", txt_work_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteWorkFlow(string txt_lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_WORK_FLOW ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");


                sb.AppendLine("delete from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");

                sb.AppendLine("delete from F_ITEM_INPUT ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteItemOut(string out_date, string out_cd, string jang_cd, bool is_soo_inserted)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ITEM_OUT ");
                sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("    and OUTPUT_CD = '" + out_cd + "' ");


                sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("    and OUTPUT_CD = '" + out_cd + "' ");

                DataTable dt = fn_Item_Output_List("WHERE A.OUTPUT_DATE = '" + out_date + "' AND A.OUTPUT_CD ='" + out_cd + "'  ");
                bool isCustDay = isCustDayTotal(out_date, dt.Rows[0]["CUST_CD"].ToString()); //일별집계가 있는지 검사
                if (isCustDay)// 있으면
                {

                    sb.AppendLine("UPDATE N_CUST_CODE ");
                    sb.AppendLine("      SET BALANCE = BALANCE - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");


                    sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                    sb.AppendLine("  S_SUPPLY_MONEY = S_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" ,S_TAX_MONEY =    S_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" ,S_TOTAL_MONEY =  S_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_SALES WHERE OUTPUT_DATE ='" + out_date + "'  AND OUTPUT_CD ='" + out_cd + "'  )  ");

                    sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "-"));


                    if (is_soo_inserted)
                    {
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY - (SELECT SOO_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_DC_MONEY =    COL_DC_MONEY - (SELECT DC_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY =  COL_TOTAL_MONEY - (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_COLLECT WHERE OUTPUT_DATE ='" + out_date + "'  AND OUTPUT_CD ='" + out_cd + "'  )  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "+"));

                        sb.AppendLine("delete from F_COLLECT ");
                        sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");

                        sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }
                    else
                    {
                        sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }

                }


                sb.AppendLine("delete from F_SALES ");
                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");

                sb.AppendLine("delete from F_SALES_DETAIL ");
                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteItemOut(string out_date, string out_cd, string jang_cd, string jumun_date, string jumun_cd, bool is_soo_inserted)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ITEM_OUT ");
                sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("    and OUTPUT_CD = '" + out_cd + "' ");


                sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("    and OUTPUT_CD = '" + out_cd + "' ");

                DataTable dt = fn_Item_Output_List("WHERE A.OUTPUT_DATE = '" + out_date + "' AND A.OUTPUT_CD ='" + out_cd + "'  ");
                bool isCustDay = isCustDayTotal(out_date, dt.Rows[0]["CUST_CD"].ToString()); //일별집계가 있는지 검사
                if (isCustDay)// 있으면
                {

                    sb.AppendLine("UPDATE N_CUST_CODE ");
                    sb.AppendLine("      SET BALANCE = BALANCE - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");


                    sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                    sb.AppendLine("  S_SUPPLY_MONEY = S_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" ,S_TAX_MONEY =    S_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" ,S_TOTAL_MONEY =  S_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                    sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_SALES WHERE OUTPUT_DATE ='" + out_date + "'  AND OUTPUT_CD ='" + out_cd + "'  )  ");



                    sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "-"));

                    if (is_soo_inserted)
                    {
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY - (SELECT SOO_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_DC_MONEY =    COL_DC_MONEY - (SELECT DC_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY =  COL_TOTAL_MONEY - (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_COLLECT WHERE OUTPUT_DATE ='" + out_date + "'  AND OUTPUT_CD ='" + out_cd + "'  )  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "+"));

                        sb.AppendLine("delete from F_COLLECT ");
                        sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");

                        sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }
                    else
                    {
                        sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, dt.Rows[0]["CUST_CD"].ToString()));
                    }
                }


                sb.AppendLine("delete from F_SALES ");
                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");

                sb.AppendLine("delete from F_SALES_DETAIL ");
                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");



                sb.AppendLine(" update F_JUMUN set COMPLETE_YN = 'N' WHERE JUMUN_DATE = '" + jumun_date + "' AND JUMUN_CD = '" + jumun_cd + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int deleteFlowChk(string txt_item_cd, string txt_flow_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FLOW_CHK ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     and FLOW_CD = @FLOW_CD ");

                sb.AppendLine("delete from N_FLOW_CHK_STAN "); //공정항목 상세
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     and FLOW_CD = @FLOW_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteItemChk(string txt_item_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_ITEM_CHK ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_CHK_STAN "); //제품항목 상세
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #region haccp
        public int haccp_flow(
              string cmb_cd
            , string txt_nm
            , string txt_cd
            , string haccp_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(CHK_ORD),0)+1 from N_HACCP_CHK ");
                sb.AppendLine("WHERE FLOW_CD = @FLOW_CD ");

                sb.AppendLine("insert into N_HACCP_CHK(");
                sb.AppendLine("     FLOW_CD ");
                sb.AppendLine("     ,CHK_CD ");
                sb.AppendLine("     ,CHK_ORD ");
                sb.AppendLine("     ,CHK_NM ");
                sb.AppendLine("     ,USE_YN ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @FLOW_CD ");
                sb.AppendLine("     ,@CHK_CD ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine("     ,@CHK_NM ");
                sb.AppendLine("     ,@USE_YN ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", cmb_cd);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_cd);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_nm);
                sCommand.Parameters.AddWithValue("@USE_YN", haccp_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_HACCP_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int haccp_update(
        string cmb_cd
    , string txt_nm
    , string txt_cd
    , string haccp_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb.AppendLine(" update N_HACCP_CHK ");
                sb.AppendLine(" set ");
                sb.AppendLine(" CHK_NM = @CHK_NM ");
                sb.AppendLine(" , USE_YN = @USE_YN ");
                sb.AppendLine(" WHERE FLOW_CD = @FLOW_CD AND CHK_CD = @CHK_CD ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", cmb_cd);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_cd);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_nm);
                sCommand.Parameters.AddWithValue("@USE_YN", haccp_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_HACCP_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable haccp_Grid_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select FLOW_CD");
            sb.AppendLine("     ,CHK_CD ");
            sb.AppendLine("     ,CHK_ORD ");
            sb.AppendLine("     ,CHK_NM ");
            sb.AppendLine("     ,USE_YN ");
            sb.AppendLine("     ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE FLOW_CD = A.FLOW_CD) AS FLOW_NM  ");
            sb.AppendLine(" from N_HACCP_CHK A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by FLOW_CD");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable cust_Grid_List(string condition, string condition2)
        //구매처원장 검색
        {

            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select A.ORDER_DATE, A.ORDER_CD, A.SEQ, A.RAW_MAT_CD, A.SPEC, A.UNIT_CD, A.TOTAL_AMT, A.PRICE, B.COMPLETE_YN ");
            //sb.AppendLine("from F_ORDER_DETAIL A ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER B  ON A.ORDER_DATE = B.ORDER_DATE ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER C ON C.CUST_CD = B.CUST_CD  ");
            //sb.AppendLine("WHERE B.COMPLETE_YN = 'Y' ");
            //sb.AppendLine(condition);
            //sb.AppendLine(condition2);
            //sb.AppendLine("order by ORDER_DATE ");

            sb.AppendLine(" select  (CASE WHEN ORDER_DATE='' THEN '미발주' ELSE ORDER_DATE end) as ORDER_DATE,    ");
            sb.AppendLine(" 		c.INPUT_DATE, ");
            sb.AppendLine(" 		D.RAW_MAT_NM,   ");
            sb.AppendLine("		C.SEQ, ");
            sb.AppendLine("		C.SPEC, ");
            sb.AppendLine(" 		C.RAW_MAT_CD,  ");
            sb.AppendLine(" 	CONVERT(INT,c.TOTAL_AMT) as TOTAL_AMT,  ");
            sb.AppendLine(" 	 	CONVERT(INT,c.PRICE) as PRICE,  ");
            sb.AppendLine(" 		CONVERT(INT,c.TOTAL_MONEY) as TOTAL_MONEY,  ");
            sb.AppendLine(" 		G.CUST_NM,  ");
            sb.AppendLine(" 		g.cust_CD, ");
            sb.AppendLine("c.COMPLETE_YN ");
            sb.AppendLine(" from F_RAW_DETAIL C  ");
            sb.AppendLine(" inner join N_RAW_CODE D on D.RAW_MAT_CD=C.RAW_MAT_CD  ");
            sb.AppendLine(" left join F_RAW_INPUT as F on f.INPUT_CD=C.INPUT_CD and f.INPUT_DATE=C.INPUT_DATE ");
            sb.AppendLine("  inner join N_CUST_CODE as G on G.CUST_CD=F.CUST_CD ");
            sb.Append("where ");
            sb.AppendLine(condition2);

            sb.AppendLine(condition);
            sb.AppendLine("    union all  ");
            sb.AppendLine("   select '9999-99-99' as ORDER_DATE ,'9999-99-99' as INPUT_DATE,'','','','',sum(C.TOTAL_AMT) as TOTAL_AMT ,'',SUM(C.TOTAL_MONEY) as TOTAL_MONEY ,G.CUST_NM,g.cust_CD,''  ");
            sb.AppendLine("  from F_RAW_DETAIL as C  ");
            sb.AppendLine("   left join F_RAW_INPUT as F on f.INPUT_CD=C.INPUT_CD and f.INPUT_DATE=C.INPUT_DATE ");
            sb.AppendLine("    inner join N_CUST_CODE as G on G.CUST_CD=F.CUST_CD  ");
            sb.Append("where ");

            sb.AppendLine(condition2);

            sb.AppendLine(condition);
            sb.AppendLine("   group by G.cust_CD ,G.CUST_NM ");

            sb.AppendLine("    order by G.CUST_CD,ORDER_DATE   ");




            //sb.AppendLine("select A.ORDER_DATE, A.ORDER_CD, A.SEQ, c.RAW_MAT_NM,A.RAW_MAT_CD, c.SPEC, A.UNIT_CD, A.TOTAL_AMT, A.PRICE, B.COMPLETE_YN    ");
            //sb.AppendLine("from F_ORDER_DETAIL A    ");
            //sb.AppendLine("inner JOIN F_ORDER B  ON A.ORDER_DATE = B.ORDER_DATE  and A.ORDER_CD=B.ORDER_CD   ");
            //sb.AppendLine("inner join N_RAW_CODE c on c.RAW_MAT_CD=A.RAW_MAT_CD   ");
            //sb.AppendLine("WHERE B.COMPLETE_YN = 'Y'    ");
            //sb.AppendLine("order by ORDER_DATE    ");
            //sb.AppendLine(condition);
            //sb.AppendLine(condition2);


            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable noticeList(string condition)
        //공지사항 검색
        {

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select * ");
            sb.AppendLine("from N_NOTICE ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER B  ON A.ORDER_DATE = B.ORDER_DATE ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER C ON C.CUST_CD = sCode ");
            //sb.AppendLine("WHERE B.COMPLETE_YN = 'Y' ");                    
            sb.AppendLine(condition);
            sb.AppendLine("    order by intime DESC ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertNotice(string textBox2, string textBox3)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_NOTICE");
                // sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                //if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                //{
                //    return 3;
                //}

                sb = new StringBuilder();

                sb.AppendLine("declare @SEQ int ");
                sb.AppendLine("select @SEQ = ISNULL(MAX(SEQ),0)+1 from N_NOTICE ");
                //sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                sb.AppendLine("insert into N_NOTICE(");
                sb.AppendLine("     SEQ ");
                sb.AppendLine("     ,TITLE ");
                sb.AppendLine("     ,CONTENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @SEQ ");
                sb.AppendLine(" ,@TITLE ");
                sb.AppendLine(" ,@CONTENT ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                //sb.AppendLine(" ,@INTIME ");
                //sb.AppendLine(" ,@INSTAFF ");
                sb.AppendLine(" ) ");




                sCommand = new SqlCommand(sb.ToString());

                //sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                sCommand.Parameters.AddWithValue("@TITLE", textBox2);
                sCommand.Parameters.AddWithValue("@CONTENT", textBox3);
                //sCommand.Parameters.AddWithValue("@INTIME", dTP1);
                //sCommand.Parameters.AddWithValue("@INSTAFF", textBox5);                

                int qResult = wAdo.SqlCommandEtc(sCommand, "insertNOTICE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public int deleteNotice(string textBox1)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM N_NOTICE  ");
                sb.AppendLine("WHERE SEQ = @SEQ ");
                //sb.AppendLine("AND INSTAFF = @INSTAFF");              

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                //sCommand.Parameters.AddWithValue("@INSTAFF", input_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "deleteNotice");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateNotice(string textBox1, string textBox2, string textBox3)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select *");
                //sb.AppendLine(" from N_NOTICE");
                //sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);


                sb = new StringBuilder();
                sb.AppendLine("update N_NOTICE SET ");
                // sb.AppendLine("     SEQ = @SEQ ");
                sb.AppendLine("     TITLE = @sTITLE ");
                sb.AppendLine("     ,CONTENT = @sCONTENT ");

                sb.AppendLine("    where SEQ = @SEQ  ");

                sb.AppendLine("  ");

                //sb.AppendLine("Update F_HACCP_CHK SET ");
                //sb.AppendLine("     COMMENT = @COMMENT ");
                //sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                //sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                //sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                sCommand.Parameters.AddWithValue("@sTITLE", textBox2);
                sCommand.Parameters.AddWithValue("@sCONTENT", textBox3);

                int qResult = wAdo.SqlCommandEtc(sCommand, "updateNotice");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int getStaffName(string staff_cd, TextBox staff_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT STAFF_NM FROM N_STAFF_CODE ");
                sb.AppendLine("WHERE STAFF_CD = @STAFF_CD");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", staff_cd);

                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt.Rows.Count == 1)
                {

                    staff_nm.Text = dt.Rows[0][0].ToString();

                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable getHaccpGrid()
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT *  ");
                sb.AppendLine("  ,  (SELECT FLOW_NM FROM N_FLOW_CODE where FLOW_CD = A.FLOW_CD) AS FLOW_NM  ");
                sb.AppendLine(" FROM N_HACCP_CHK A ");
                sb.AppendLine("WHERE USE_YN = 'Y' ");
                sb.AppendLine("ORDER BY FLOW_CD, CHK_ORD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt.Rows.Count > 0)
                {
                    return wAdo.SqlCommandSelect(sCommand);
                }
                else return null;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return null;
            }
        }


        public int Insert_Haccp_Input(
              string input_date
            , string comment
            , DataGridView ccpChkGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_CHK ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                Console.WriteLine(sb.ToString());

                sb.AppendLine("insert into F_HACCP_CHK(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (ccpChkGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < ccpChkGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @item_seq" + (i) + " int ");
                        sb.AppendLine("select @item_seq" + (i) + " =ISNULL(MAX(SEQ),0)+1 from F_HACCP_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");


                        sb.AppendLine("insert into F_HACCP_DETAIL(  ");
                        sb.AppendLine("     INPUT_DATE  ");
                        sb.AppendLine("     ,INPUT_CD  ");
                        sb.AppendLine("     ,SEQ  ");
                        sb.AppendLine("     ,FLOW_CD  ");
                        sb.AppendLine("     ,CHK_CD  ");
                        sb.AppendLine("     ,CHK_ORD  ");
                        sb.AppendLine("     ,CHK_NM  ");
                        sb.AppendLine("     ,CHK_VALUE  ");
                        sb.AppendLine("     ,INSTAFF  ");
                        sb.AppendLine("     ,INTIME  ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @INPUT_DATE ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("      ,@item_seq" + (i) + "   ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["FLOW_CD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_CD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_ORD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_NM"].Value + "'    ");
                        sb.AppendLine("      ,'" + (ccpChkGrid.Rows[i].Cells["YES"].Value.ToString().Equals("True") ? "Y" : "N") + "'    ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");




                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_Haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int Update_Haccp_Input(
              string input_date
            , string input_cd
            , string comment
            , DataGridView ccpChkGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();



                Console.WriteLine(sb.ToString());


                sb.AppendLine("Update F_HACCP_CHK SET ");
                sb.AppendLine("     COMMENT = @COMMENT ");
                sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq");


                if (ccpChkGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < ccpChkGrid.Rows.Count; i++)
                    {

                        sb.AppendLine("Update F_HACCP_DETAIL SET ");
                        sb.AppendLine("      CHK_VALUE = '" + (ccpChkGrid.Rows[i].Cells["YES"].Value.ToString().Equals("True") ? "Y" : "N") + "'    ");
                        sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                        sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq and CHK_CD = '" + ccpChkGrid.Rows[i].Cells["CHK_CD"].Value + "'");

                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@seq", input_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_Haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable fn_Haccp_input_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE");
            sb.AppendLine("     ,INPUT_CD ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM  ");
            sb.AppendLine("     ,INSTAFF AS STAFF_CD ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from F_HACCP_CHK A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by INPUT_DATE desc, INPUT_CD desc ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Haccp_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD");
            sb.AppendLine("     ,A.FLOW_CD ");
            sb.AppendLine("     ,(SELECT FLOW_NM FROM N_FLOW_CODE where FLOW_CD = A.FLOW_CD) AS FLOW_NM ");
            sb.AppendLine("     ,A.CHK_CD");
            sb.AppendLine("     ,A.CHK_NM ");
            sb.AppendLine("     ,A.CHK_ORD ");
            sb.AppendLine("     ,A.CHK_VALUE ");
            sb.AppendLine("     ,CASE WHEN A.CHK_VALUE = 'Y' THEN 'V' ELSE ' ' end AS YES ");
            sb.AppendLine("     ,CASE WHEN A.CHK_VALUE = 'N' THEN 'V' ELSE ' ' end AS NO ");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM");
            sb.AppendLine(" from F_HACCP_DETAIL A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");



            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int Delete_Haccp_Input(
           string input_date
           , string input_cd
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_HACCP_CHK  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                sb.AppendLine("DELETE FROM F_HACCP_DETAIL  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion haccp

        #region 사업자관리
        // 사업자정보 조회

        public DataTable fn_Saup_List(string saup_no)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.SAUP_NO");
            sb.AppendLine("     ,B.COMPANY_NM ");
            sb.AppendLine("     ,A.CORPORATE_NO");
            sb.AppendLine("     ,A.UPTAE ");
            sb.AppendLine("     ,A.JONGMOK ");
            sb.AppendLine("     ,A.POST_NO ");
            sb.AppendLine("     ,A.ADDR ");
            sb.AppendLine("     ,A.ADDR2 ");
            sb.AppendLine("     ,A.OPEN_DATE ");
            sb.AppendLine("     ,A.COMP_PHONE ");
            sb.AppendLine("     ,A.FAX ");
            sb.AppendLine("     ,A.MANAGER_EMAIL ");
            sb.AppendLine("     ,A.MANAGER_PHONE ");
            sb.AppendLine("     ,A.HOMEPAGE ");
            sb.AppendLine("     ,A.SAUP_LOGO ");
            sb.AppendLine("     ,ISNULL(A.LOGO_SIZE,0) AS LOGO_SIZE ");
            sb.AppendLine("     ,A.SAUP_BANNER ");
            sb.AppendLine("     ,A.SAUP_SEAL ");
            sb.AppendLine("     ,ISNULL(A.BANNER_SIZE,0) AS BANNER_SIZE ");
            sb.AppendLine("     ,ISNULL(A.SEAL_SIZE,0) AS SEAL_SIZE ");
            sb.AppendLine("     ,A.CEO_NAME ");
            sb.AppendLine("     ,A.FLAGSHIP ");
            sb.AppendLine("     ,A.ACCOUNT ");
            sb.AppendLine("     ,A.ACCOUNT2 ");
            sb.AppendLine(" from [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] A");
            sb.AppendLine(" inner join [SM_FACTORY_COM].[dbo].[T_COMP_LOGIN] B ");
            sb.AppendLine(" on A.SAUP_NO = B.COM_SAUP_NO ");
            sb.AppendLine("where A.SAUP_NO = '" + saup_no + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int updateSaup(string saup_no
                , string saup_nm
                , string corporate_no
                , string uptae
                , string jongmok
                , string open_date
                , string post_no
                , string addr
                , string addr2
                , string comp_phone
                , string fax
                , string mg_email
                , string mg_phone
                , string homepage
                , byte[] img
                , int img_size
                , byte[] Bimg
                , int Bimg_size
                , byte[] Simg
                , int Simg_size
                , string ori_saup_nm
            , string owerNM
            , string account
            , string account2
            , string flagship
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @chk int  ");
                sb.AppendLine("select @chk = COUNT(*) from [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ");
                sb.AppendLine("where SAUP_NO = '" + saup_no + "' ");

                sb.AppendLine("IF(@chk > 0)"); //공정항목 상세
                sb.AppendLine(" update [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ");
                sb.AppendLine(" set CORPORATE_NO = @CORPORATE_NO");
                sb.AppendLine("    ,UPTAE = @UPTAE ");
                sb.AppendLine("    ,JONGMOK = @JONGMOK ");
                sb.AppendLine("    ,POST_NO = @POST_NO ");
                sb.AppendLine("    ,ADDR = @ADDR ");
                sb.AppendLine("    ,ADDR2 = @ADDR2 ");
                sb.AppendLine("    ,OPEN_DATE = @OPEN_DATE ");
                sb.AppendLine("    ,COMP_PHONE = @COMP_PHONE ");
                sb.AppendLine("    ,FAX = @FAX ");
                sb.AppendLine("    ,MANAGER_EMAIL = @MANAGER_EMAIL ");
                sb.AppendLine("    ,MANAGER_PHONE = @MANAGER_PHONE ");
                sb.AppendLine("    ,HOMEPAGE = @HOMEPAGE ");
                sb.AppendLine("    ,CEO_NAME = '" + owerNM + "' ");
                sb.AppendLine("    ,ACCOUNT = @ACCOUNT ");
                sb.AppendLine("    ,ACCOUNT2 = @ACCOUNT2 ");
                sb.AppendLine("    ,FLAGSHIP = @FLAGSHIP ");
                if (img_size > 0)
                {
                    sb.AppendLine("    ,SAUP_LOGO = @SAUP_LOGO ");
                    sb.AppendLine("    ,LOGO_SIZE = @LOGO_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,SAUP_LOGO=null ");
                    sb.AppendLine("     ,LOGO_SIZE=0 ");
                }
                if (Bimg_size > 0)
                {
                    sb.AppendLine("    ,SAUP_BANNER = @SAUP_BANNER ");
                    sb.AppendLine("    ,BANNER_SIZE = @BANNER_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,SAUP_BANNER=null ");
                    sb.AppendLine("     ,BANNER_SIZE=0 ");
                }
                if (Simg_size > 0)
                {
                    sb.AppendLine("    ,SAUP_SEAL = @SAUP_SEAL ");
                    sb.AppendLine("    ,SEAL_SIZE = @SEAL_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,SAUP_SEAL=null ");
                    sb.AppendLine("     ,SEAL_SIZE=0 ");
                }

                sb.AppendLine("where SAUP_NO = '" + saup_no + "' ");

                sb.AppendLine("ELSE ");
                sb.AppendLine(" insert into [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ( ");
                sb.AppendLine("      SAUP_NO ");
                sb.AppendLine("     ,CORPORATE_NO ");
                sb.AppendLine("     ,UPTAE ");
                sb.AppendLine("     ,JONGMOK ");
                sb.AppendLine("     ,POST_NO ");
                sb.AppendLine("     ,ADDR ");
                sb.AppendLine("     ,ADDR2 ");
                sb.AppendLine("     ,OPEN_DATE ");
                sb.AppendLine("     ,COMP_PHONE ");
                sb.AppendLine("     ,FAX ");
                sb.AppendLine("     ,MANAGER_EMAIL ");
                sb.AppendLine("     ,MANAGER_PHONE ");
                sb.AppendLine("     ,HOMEPAGE ");
                sb.AppendLine("     ,SAUP_LOGO ");
                sb.AppendLine("     ,LOGO_SIZE ");
                sb.AppendLine("     ,SAUP_BANNER ");
                sb.AppendLine("     ,BANNER_SIZE ");
                sb.AppendLine("     ,SAUP_SEAL ");
                sb.AppendLine("     ,SEAL_SIZE ");
                sb.AppendLine("     ,CEO_NAME ");
                sb.AppendLine("     ,ACCOUNT ");
                sb.AppendLine("     ,ACCOUNT2 ");
                sb.AppendLine("     ,FLAGSHIP ");
                sb.AppendLine(" )VALUES( ");
                sb.AppendLine("      @SAUP_NO ");
                sb.AppendLine("     ,@CORPORATE_NO ");
                sb.AppendLine("     ,@UPTAE ");
                sb.AppendLine("     ,@JONGMOK ");
                sb.AppendLine("     ,@POST_NO ");
                sb.AppendLine("     ,@ADDR ");
                sb.AppendLine("     ,@ADDR2 ");
                sb.AppendLine("     ,@OPEN_DATE ");
                sb.AppendLine("     ,@COMP_PHONE ");
                sb.AppendLine("     ,@FAX ");
                sb.AppendLine("     ,@MANAGER_EMAIL ");
                sb.AppendLine("     ,@MANAGER_PHONE ");
                sb.AppendLine("     ,@HOMEPAGE ");
                if (img_size > 0)
                {
                    sb.AppendLine("     ,@SAUP_LOGO ");
                    sb.AppendLine("     ,@LOGO_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }
                if (Bimg_size > 0)
                {
                    sb.AppendLine("     ,@SAUP_BANNER ");
                    sb.AppendLine("     ,@BANNER_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }
                if (Simg_size > 0)
                {
                    sb.AppendLine("     ,@SAUP_SEAL ");
                    sb.AppendLine("     ,@SEAL_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }
                sb.AppendLine("     ,'" + owerNM + "' ");
                sb.AppendLine("     ,@ACCOUNT ");
                sb.AppendLine("     ,@ACCOUNT2 ");
                sb.AppendLine("     ,@FLAGSHIP ");

                sb.AppendLine("  )  ");

                if (!saup_nm.Trim().ToString().Equals(ori_saup_nm.Trim().ToString()))
                {
                    sb.AppendLine(" update [SM_FACTORY_COM].[dbo].[T_COMP_LOGIN] ");
                    sb.AppendLine(" set COMPANY_NM = '" + saup_nm.Trim().ToString() + "' ");
                    sb.AppendLine("where COM_SAUP_NO = '" + saup_no + "' ");

                    Common.p_strCompNm = saup_no.Trim().ToString();
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SAUP_NO", saup_no);
                //sCommand.Parameters.AddWithValue("@SAUP_NM", saup_nm);
                sCommand.Parameters.AddWithValue("@CORPORATE_NO", corporate_no);
                sCommand.Parameters.AddWithValue("@UPTAE", uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", jongmok);
                sCommand.Parameters.AddWithValue("@POST_NO", post_no);
                sCommand.Parameters.AddWithValue("@ADDR", addr);
                sCommand.Parameters.AddWithValue("@ADDR2", addr2);
                sCommand.Parameters.AddWithValue("@OPEN_DATE", open_date);
                sCommand.Parameters.AddWithValue("@COMP_PHONE", comp_phone);
                sCommand.Parameters.AddWithValue("@FAX", fax);
                sCommand.Parameters.AddWithValue("@MANAGER_EMAIL", mg_email);
                sCommand.Parameters.AddWithValue("@MANAGER_PHONE", mg_phone);
                sCommand.Parameters.AddWithValue("@HOMEPAGE", homepage);
                sCommand.Parameters.AddWithValue("@ACCOUNT", account);
                sCommand.Parameters.AddWithValue("@ACCOUNT2", account2);
                sCommand.Parameters.AddWithValue("@FLAGSHIP", flagship);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@SAUP_LOGO", img);
                    sCommand.Parameters.AddWithValue("@LOGO_SIZE", img_size);
                }
                if (Bimg_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@SAUP_BANNER", Bimg);
                    sCommand.Parameters.AddWithValue("@BANNER_SIZE", Bimg_size);
                }
                if (Simg_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@SAUP_SEAL", Simg);
                    sCommand.Parameters.AddWithValue("@SEAL_SIZE", Simg_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_Saup_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        #endregion 사업자관리

        #region 생산보고서


        //2019-10-31 이재원 생산보고서 Group by Query 
        public DataTable fn_GroupByPlanList(string condition)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select ITEM_CD  ");
            sb.AppendLine("     ,(select ITEM_NM from N_ITEM_CODE where ITEM_CD = A.ITEM_CD) as ITEM_NM  ");
            sb.AppendLine("     ,(select SPEC from N_ITEM_CODE where ITEM_CD = A.ITEM_CD) as SPEC ");
            sb.AppendLine("     ,UNIT_CD   ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) as UNIT_NM ");
            sb.AppendLine("     ,SUM(total_amt) as SUM_AMT ");
            sb.AppendLine("     from F_PLAN_DETAIL A ");
            sb.AppendLine(condition);
            sb.AppendLine("     group by item_cd , UNIT_CD");
            sb.AppendLine(" order by item_cd");



            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        //2019-10-31 이재원 생산보고서 Group by Query 
        public DataTable fn_GroupByFlowList(string condition)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.ITEM_CD  ");
            sb.AppendLine("      ,(select ITEM_NM from N_ITEM_CODE where A.ITEM_CD = ITEM_CD) as ITEM_NM   ");
            sb.AppendLine("      ,(select SPEC from N_ITEM_CODE where A.ITEM_CD = ITEM_CD) as SPEC   ");
            sb.AppendLine("      , SUM(INST_AMT) AS TOTAL_INST_AMT   ");
            sb.AppendLine("      , SUM(LOSS) AS LOSS   ");
            sb.AppendLine("      ,SUM(POOR_AMT) AS POOR_AMT   ");
            sb.AppendLine("      ,SUM(INST_AMT)-SUM(LOSS)-SUM(POOR_AMT) AS SUM_AMT   ");
            sb.AppendLine("      from F_WORK_INST A    ");
            sb.AppendLine("      join (select LOT_NO, sum(LOSS) as LOSS   ");
            sb.AppendLine("      , sum(POOR_AMT) as POOR_AMT    ");
            sb.AppendLine("      from F_WORK_FLOW_DETAIL group by LOT_NO) B    ");
            sb.AppendLine("      on A.LOT_NO = B.LOT_NO    ");
            sb.AppendLine(condition);
            sb.AppendLine("      and (A.POOR_WORK_YN is null or A.POOR_WORK_YN = 'N')  ");
            sb.AppendLine("      group by A.ITEM_CD   ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT A.PLAN_DATE,  ");
            sb.AppendLine("B.UNIT_NM,   ");
            sb.AppendLine("A.WORK_YN   ");
            sb.AppendLine("FROM F_PLAN_DETAIL A   ");
            sb.AppendLine("LEFT OUTER JOIN N_UNIT_CODE B ON A.UNIT_CD = B.UNIT_CD   ");
            sb.AppendLine(condition);

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        #endregion 생산보고서

        #region 원산지등록
        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 조회 
        public DataTable fn_Country_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select COUNTRY_CD");
            sb.AppendLine(" , COUNTRY_NM  ");
            sb.AppendLine(" , COMMENT  ");
            sb.AppendLine(" , USED_CD  ");
            sb.AppendLine(" , (select S_CODE_NM  ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '500' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine(" from N_RAW_COUNTRY_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by COUNTRY_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 등록 
        public int insertCountryCode(
              string txt_country_cd
            , string txt_country_nm
            , string comment
            , string used_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();


                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_COUNTRY_CODE");
                sb.AppendLine(" where COUNTRY_CD = '" + txt_country_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();


                sb.AppendLine("insert into N_RAW_COUNTRY_CODE(");
                sb.AppendLine("     COUNTRY_CD ");
                sb.AppendLine("     ,COUNTRY_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("  )values ( ");
                sb.AppendLine("     @COUNTRY_CD ");
                sb.AppendLine("     ,@COUNTRY_NM ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@USED_CD ");

                sb.AppendLine("  )");



                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@USED_CD", used_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 수정
        public int UpdateCountryCode(
              string txt_country_cd
            , string txt_country_nm
            , string comment
            , string used_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Update N_RAW_COUNTRY_CODE SET");
                sb.AppendLine("     COUNTRY_NM = @COUNTRY_NM ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     WHERE COUNTRY_CD = @COUNTRY_CD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@USED_CD", used_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 삭제
        public int DeleteCountryCode(
              string txt_country_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Delete from N_RAW_COUNTRY_CODE ");
                sb.AppendLine("     WHERE COUNTRY_CD = @COUNTRY_CD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        #endregion 원산지등록


        public DataTable fn_Jang_Item_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select * ");
            sb.AppendLine(" from T_상품정보 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by 상품코드 ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect_Jang(sCommand);
        }



        public int fn_Item_Update_Complete(string sLotno, string sLotsub)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("Update F_ITEM_INPUT SET ");
                sb.AppendLine("     COMPLETE_YN =  'Y'   ");
                sb.AppendLine("     WHERE LOT_NO = @LOT_NO and LOT_SUB = @LOT_SUB   ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", sLotno);
                sCommand.Parameters.AddWithValue("@LOT_SUB", sLotsub);


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_Item_Complete");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }

        public DataTable ITEM_LINK(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select LINK_CD from N_ITEM_CODE where ITEM_CD='" + condition + "' ");


            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public int fn_Insert_Item_To_Jang(DataGridView InputTabGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();




                for (int i = 0; i < InputTabGrid.Rows.Count; i++)
                {
                    if (InputTabGrid.Rows[i].Cells["CHK"].Value != null && (bool)InputTabGrid.Rows[i].Cells["CHK"].Value == true)
                    {
                        DataTable strLink = ITEM_LINK(InputTabGrid.Rows[i].Cells["제품코드"].Value.ToString());

                        sb.AppendLine("declare @seq" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value + " int ");
                        sb.AppendLine("select @seq" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value + " =ISNULL(MAX(전표번호),0)+1 from T_매입 ");
                        sb.AppendLine("where 매입일자 = '" + DateTime.Now.ToString("yyyy-MM-dd") + "' ");
                        sb.AppendLine("and 사업자번호 = '" + Common.p_saupNo + "' ");

                        sb.AppendLine("insert into  T_매입 (사업자번호, 지점코드, 매입일자, 전표번호, 입력방법, 거래처코드, 담당사원, 부가세코드, 등록사원번호, 등록일시, 창고코드 )");
                        sb.AppendLine(" values ( '" + Common.p_saupNo + "' ");
                        sb.AppendLine(" ,'0'  ");
                        sb.AppendLine(" ,'" + DateTime.Now.ToString("yyyy-MM-dd") + "'  ");
                        sb.AppendLine(" ,@seq" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value + "");
                        sb.AppendLine(" ,'C'  ");
                        sb.AppendLine(" ,'" + InputTabGrid.Rows[i].Cells["업체코드"].Value + "' ");
                        sb.AppendLine(" ,(select 사원번호 from T_사용자정보 where 사업자번호 ='" + Common.p_saupNo + "' and uid = '" + Common.p_strUserID + "'  )  ");
                        sb.AppendLine(" ,'1'  ");
                        sb.AppendLine(" ,(select 사원번호 from T_사용자정보 where 사업자번호 ='" + Common.p_saupNo + "' and uid = '" + Common.p_strUserID + "'  )  ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine(" ,'000'");
                        sb.AppendLine(" )");
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + "  =ISNULL(MAX(항목순번),0)+1 from T_매입항목 ");
                        sb.AppendLine("where 매입일자 = '" + DateTime.Now.ToString("yyyy-MM-dd") + "' ");
                        sb.AppendLine("and 사업자번호 = '" + Common.p_saupNo + "' ");
                        sb.AppendLine("and 전표번호 =  @seq" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value);

                        sb.AppendLine("insert into  T_매입항목 (사업자번호, 지점코드, 매입일자, 전표번호, 항목순번, 상품코드, 박스수량, 중간수량, 낱개수량, 총수량, 박스단가, 낱개단가, 금액");
                        sb.AppendLine(",서비스박스,서비스낱개,서비스총수량, 매입구분, 비고, 과세구분 )");
                        sb.AppendLine(" values ( '" + Common.p_saupNo + "' ");
                        sb.AppendLine(" ,   '0'  ");
                        sb.AppendLine(" ,   '" + DateTime.Now.ToString("yyyy-MM-dd") + "'  ");
                        sb.AppendLine(" ,   @seq" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value + "");
                        sb.AppendLine(" ,   @seq" + i + "  ");
                        sb.AppendLine(" ,'" + strLink.Rows[0][0].ToString() + "' ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "") + " ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "") + " ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["입고가격"].Value.ToString() + " ");
                        sb.AppendLine(" ,   " + double.Parse(InputTabGrid.Rows[i].Cells["입고가격"].Value.ToString()) * double.Parse(InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "")) + " ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   '1' ");
                        sb.AppendLine(" ,   '' ");
                        sb.AppendLine(" ,   '1'  ");
                        sb.AppendLine(" )");
                        Debug.WriteLine(i);

                        Debug.WriteLine(sb);
                    }

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);


                int qResult = wAdo.SqlCommandEtc_Jang(sCommand, "Update_Item_Complete");
                if (qResult > 0)
                {
                    StringBuilder sb2 = new StringBuilder();
                    for (int i = 0; i < InputTabGrid.RowCount; i++)
                    {
                        if (InputTabGrid.Rows[i].Cells["CHK"].Value != null && (bool)InputTabGrid.Rows[i].Cells["CHK"].Value == true)
                        {
                            sb2.AppendLine("Update F_ITEM_INPUT SET ");
                            sb2.AppendLine("     COMPLETE_YN =  'Y'   ");
                            sb2.AppendLine("     WHERE LOT_NO = '" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value.ToString() + "' and LOT_SUB = '" + InputTabGrid.Rows[i].Cells["LOT_SUB"].Value.ToString() + "'   ");

                        }

                    }

                    sCommand = new SqlCommand(sb2.ToString());
                    Debug.WriteLine(sb2);

                    qResult = wAdo.SqlCommandEtc(sCommand, "Update_Item_Complete2");


                    if (qResult > 0)
                    {
                        return 0;
                    }
                    else return 1;


                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_tscode_list()
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select * ");
            sb.AppendLine(" from SM_FACTORY_COM.dbo.T_S_CODE ");


            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //2019-11-05 이재원 HACCP문서 관리 페이지를 만들기 위한 메소드

        public int insert_Haccp_Doc_Root(string rootPath, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from N_HACCP_DOCPATH ");
                sb.AppendLine("     WHERE STAFF_CD = '" + staff_cd + "' ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 1;
                }
                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    sb = new StringBuilder();
                    sb.AppendLine("update N_HACCP_DOCPATH ");
                    sb.AppendLine("SET DOCPATH = '" + rootPath + "'  ");
                    sb.AppendLine("   where  STAFF_CD ='" + staff_cd + "' ");

                }
                else
                {
                    sb = new StringBuilder();
                    sb.AppendLine("insert into N_HACCP_DOCPATH(STAFF_CD,DOCPATH) ");
                    sb.AppendLine("   values ('" + staff_cd + "' , '" + rootPath + "') ");

                }

                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert or update HACCP root path");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public string select_Haccp_Doc_Root(string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from N_HACCP_DOCPATH ");
                sb.AppendLine("     WHERE STAFF_CD = '" + staff_cd + "' ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return "failed";
                }

                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    String[] strArrTemp = dtTemp.Rows[0]["DOCPATH"].ToString().Split('/');
                    string ReturnTemp = "";
                    for (int i = 0; i < strArrTemp.Length - 2; i++)
                    {
                        ReturnTemp += strArrTemp[i];
                    }
                    return ReturnTemp;

                }
                else
                {
                    return "미등록";

                }
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return "failed";
            }
        }

        public int insert_Haccp_Doc_File(string destFile, string fileName, string staff_cd, string input_date, string txt_comment, string gubun)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from F_HACCP_DOCS ");
                sb.AppendLine("     WHERE DOCPATH = '" + destFile + "' and STAFF_CD = '" + staff_cd + "'  ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 1;
                }

                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    return 7;
                }

                sb = new StringBuilder();



                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_DOCS ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' and STAFF_CD = '" + staff_cd + "'  ");

                sb.AppendLine("INSERT INTO F_HACCP_DOCS ( ");
                sb.AppendLine("  INPUT_DATE  ");
                sb.AppendLine("  ,INPUT_CD  ");
                sb.AppendLine("  ,DOC_GUBUN  ");
                sb.AppendLine("  ,STAFF_CD  ");
                sb.AppendLine("  ,DOCPATH  ");
                sb.AppendLine("  ,FNAME  ");
                sb.AppendLine("  ,COMMENT  ");
                sb.AppendLine("  ,INTIME  ");
                sb.AppendLine("  ,INSTAFF  ");
                sb.AppendLine("  ) VALUES (  ");
                sb.AppendLine("  @INPUT_DATE  ");
                sb.AppendLine("  ,@seq  ");
                sb.AppendLine("  ,@DOC_GUBUN  ");
                sb.AppendLine("  ,@STAFF_CD  ");
                sb.AppendLine("  ,@DOCPATH  ");
                sb.AppendLine("  ,@FNAME  ");
                sb.AppendLine("  ,@COMMENT  ");
                sb.AppendLine("  ,convert(varchar, getdate(), 120)");
                sb.AppendLine("  ,'" + Common.p_strStaffNo + "'  ");
                sb.AppendLine("  )  ");




                sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@DOC_GUBUN", gubun);
                sCommand.Parameters.AddWithValue("@STAFF_CD", staff_cd);
                sCommand.Parameters.AddWithValue("@DOCPATH", destFile);
                sCommand.Parameters.AddWithValue("@FNAME", fileName);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable select_Haccp_Docs(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE ");
            sb.AppendLine("  ,INPUT_CD ");
            sb.AppendLine("  ,DOC_GUBUN ");
            sb.AppendLine("  ,STAFF_CD ");
            sb.AppendLine("  ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE A.STAFF_CD = STAFF_CD) AS STAFF_NM ");
            sb.AppendLine("  ,DOCPATH ");
            sb.AppendLine("  ,FNAME ");
            sb.AppendLine("  ,COMMENT ");
            sb.AppendLine(" from F_HACCP_DOCS A");
            sb.AppendLine(condition);


            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int Delete_Haccp_Doc(string path, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_HACCP_DOCS  ");
                sb.AppendLine("WHERE DOCPATH = @DOCPATH AND STAFF_CD = '" + staff_cd + "'  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DOCPATH", path);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Update_Haccp_Docs(string columnName, string changeValue, string docPath, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                if (columnName.Equals("INPUT_DATE"))
                {
                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_DOCS ");
                    sb.AppendLine("where INPUT_DATE = '" + changeValue + "' and STAFF_CD = '" + staff_cd + "'   ");

                    sb.AppendLine("UPDATE F_HACCP_DOCS  ");
                    sb.AppendLine("SET " + columnName + " = '" + changeValue + "'  ");
                    sb.AppendLine(", INPUT_CD = @seq ");
                    sb.AppendLine(", UPTIME = convert(varchar, getdate(), 120)  ");
                    sb.AppendLine(", UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("  WHERE DOCPATH = @DOCPATH ");
                    sb.AppendLine("  and STAFF_CD = '" + staff_cd + "'   ");

                }
                else
                {
                    sb.AppendLine("UPDATE F_HACCP_DOCS  ");
                    sb.AppendLine("SET " + columnName + " = '" + changeValue + "'  ");
                    sb.AppendLine(", UPTIME = convert(varchar, getdate(), 120)  ");
                    sb.AppendLine(", UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("WHERE DOCPATH = @DOCPATH ");
                    sb.AppendLine("  and STAFF_CD = '" + staff_cd + "'   ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DOCPATH", docPath);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_cust_list()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT A.CUST_NM ");
            sb.AppendLine(",COUNT(F.ITEM_NM) AS ITEM_CNT ");
            sb.AppendLine(",SUM(D.INPUT_AMT) AS INPUT_AMT ");
            sb.AppendLine(",SUM(E.OUTPUT_AMT) AS OUTPUT_AMT ");
            sb.AppendLine("FROM N_CUST_CODE A ");
            sb.AppendLine("LEFT OUTER JOIN F_PLAN B ON A.CUST_CD = B.CUST_CD ");
            sb.AppendLine("LEFT OUTER JOIN F_PLAN_DETAIL C ON B.PLAN_DATE = C.PLAN_DATE AND B.PLAN_CD = C.PLAN_CD ");
            sb.AppendLine("LEFT OUTER JOIN F_ITEM_INPUT D ON C.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN F_ITEM_OUT_DETAIL E ON B.CUST_CD = E.CUST_CD ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE F ON C.ITEM_CD = F.ITEM_CD ");
            sb.AppendLine("GROUP BY CUST_NM ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable Plan_List(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine("A.PLAN_DATE  ");
            sb.AppendLine(",A.PLAN_CD  ");
            sb.AppendLine(",B.CUST_NM  ");
            sb.AppendLine(",COUNT(D.ITEM_NM) AS ITEM_CNT  ");
            sb.AppendLine("FROM F_PLAN A  ");
            sb.AppendLine("LEFT OUTER JOIN N_CUST_CODE B ON A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("LEFT OUTER JOIN F_PLAN_DETAIL C ON A.PLAN_DATE = C.PLAN_DATE AND A.PLAN_CD = C.PLAN_CD  ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE D ON C.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("WHERE 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine(condition2);
            sb.AppendLine("GROUP BY A.PLAN_DATE,A.PLAN_CD,B.CUST_NM  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //품질 추적현황 리스트
        public DataTable fn_item_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT ");
            sb.AppendLine(",F.CUST_NM ");
            sb.AppendLine("C.ITEM_NM ");
            sb.AppendLine(",SUM(D.INPUT_AMT) AS INPUT_AMT ");
            sb.AppendLine(",SUM(E.OUTPUT_AMT) AS OUTPUT_AMT ");
            sb.AppendLine("FROM F_PLAN A ");
            sb.AppendLine("LEFT OUTER JOIN F_PLAN_DETAIL B ON A.PLAN_DATE = B.PLAN_DATE AND A.PLAN_CD = B.PLAN_CD ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE C ON B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN F_ITEM_INPUT D ON C.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN F_ITEM_OUT_DETAIL E ON A.CUST_CD = E.CUST_CD ");
            sb.AppendLine("LEFT OUTER JOIN N_CUST_CODE F ON F.CUST_CD = C.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("GROUP BY ITEM_NM, CUST_NM ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_mipgo_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT ");
            sb.AppendLine("A.RAW_MAT_CD, B.RAW_MAT_NM, B.SPEC,  TEMP_AMT, TOTAL_AMT, CURR_AMT ");
            sb.AppendLine("FROM F_RAW_DETAIL A ");
            sb.AppendLine("LEFT OUTER JOIN N_RAW_CODE B ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Flow_Iden_Cnt(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select COUNT(*)as cnt from N_ITEM_FLOW A ");
            sb.AppendLine(" inner join N_FLOW_CODE B ");
            sb.AppendLine(" on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable Item_Grid_List(string condition)
        //제품불량내역 검색
        {

            StringBuilder sb = new StringBuilder();

            //sb.AppendLine(" select  item.ITEM_NM as 제품명, item.SPEC as 규격 ,convert(int,isnull(z.총수량,0)) as 총수량,isnull(z.LOSS량,0) as LOSS량, isnull(convert(decimal(18,2),z.LOSS율),0.00) as LOSS율,convert(int,isnull(z.불량수,0)) as 불량수 ,isnull(convert(decimal(18,2),z.불량율),0.00) as 불량율  from N_ITEM_CODE as item    ");
            //sb.AppendLine(" left outer join(  ");

            //sb.AppendLine("select cv.ITEM_NM as 제품명 ,cv.SPEC as 규격 ,isnull(z.F_SUB_AMT,0) 총수량 ,isnull(z.POOR_AMT,0) 불량수 ,CASE WHEN ISNULL(Z.F_SUB_AMT,'0') = 0 THEN 0 ELSE (ISNULL(Z.POOR_AMT,'0')/ ISNULL(Z.F_SUB_AMT,'0')) END 불량율,ISNULL(z.loss,0) as LOSS량,CASE WHEN ISNULL(Z.F_SUB_AMT,'0') = 0 THEN 0 ELSE (ISNULL(Z.loss,'0')/ ISNULL(Z.F_SUB_AMT,'0')) END LOSS율 from N_ITEM_CODE cv left join (");
            //sb.AppendLine("      SELECT b.ITEM_NM,max(b.SPEC) as spec ,SUM(LOSS) as loss,sum(F_SUB_AMT) F_SUB_AMT ,SUM(POOR_AMT)  as POOR_AMT FROM F_WORK_FLOW_DETAIL  A  ");
            //sb.AppendLine("       left join N_ITEM_CODE b on b.ITEM_CD=A.ITEM_CD ");
            //sb.AppendLine(condition);
            //sb.AppendLine("      group by b.ITEM_NM");
            //sb.AppendLine("       )z on z.ITEM_NM= cv.ITEM_NM ");
            //sb.AppendLine("       where loss>0 or POOR_AMT>0 ");
            //sb.AppendLine("          ) z on z.제품명=item.ITEM_NM and z.규격=item.SPEC ");

            // sb.AppendLine("                              select LOT_NO,LOT_SUB,seq,SUM(POOR_AMT) as poor_amt, SUM(LOSS) as loss,MAX(F_SUB_AMT) as sub_AMT ,MAX(b.ITEM_NM) as item_NM,MAX(b.ITEM_CD) as item_CD ,SUM( POOR_AMT)/SUM(F_SUB_AMT) *100 As 불량율   ,SUM( LOSS)/SUM(F_SUB_AMT) *100 As LOSS율 into #불량율1  from F_WORK_FLOW_DETAIL as a  ");
            // sb.AppendLine("                inner join N_ITEM_CODE b on b.ITEM_CD=A.ITEM_CD  ");

            //sb.AppendLine(condition);

            //sb.AppendLine("         group by LOT_NO ,LOT_SUB ,SEQ ");
            // sb.AppendLine("                      select * from #불량율1 ");
            // sb.AppendLine("           union all   ");
            // sb.AppendLine("            select '99','99' ,99, SUM(POOR_AMT) as poor_amt, SUM(LOSS) as loss,SUM(sub_AMT) as sub_AMT ,MAX(item_NM) as item_NM,MAX(ITEM_CD) as item_cd ,SUM(불량율) as 불량율, SUM(LOSS율)   ");
            // sb.AppendLine("            from #불량율1 group by item_cd ");
            // sb.AppendLine("            order by item_NM,LOT_SUB    ");


            sb.AppendLine(" select A.ITEM_CD,A.ITEM_NM, B.LOT_NO,B.LOT_SUB,B.SEQ, B.INPUT_AMT ,max(isnull(C.POOR_AMT,0))as POOR_AMT  ,max(isnull(C.LOSS,0))   as LOSS ");
            sb.AppendLine("FROM N_ITEM_CODE A   ");
            sb.AppendLine("RIGHT OUTER JOIN F_ITEM_INPUT B ON A.ITEM_CD = B.ITEM_CD  ");
            sb.AppendLine("LEFT OUTER JOIN F_WORK_FLOW_DETAIL C ON B.LOT_NO = C.LOT_NO  and B.SEQ=C.SEQ  ");
            sb.AppendLine("WHERE 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine("GROUP BY A.ITEM_CD, A.ITEM_NM, B.LOT_NO, B.LOT_SUB, B.SEQ, B.INPUT_AMT");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable Item_Grid_List_Detail(string condition)
        //제품불량내역 검색
        {

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select A.ITEM_CD,A.ITEM_NM, B.LOT_NO,B.LOT_SUB,B.SEQ, B.INPUT_AMT ,C.POOR_AMT ,C.LOSS  ");
            sb.AppendLine("FROM N_ITEM_CODE A   ");
            sb.AppendLine("RIGHT OUTER JOIN F_ITEM_INPUT B ON A.ITEM_CD = B.ITEM_CD  ");
            sb.AppendLine("LEFT OUTER JOIN F_WORK_FLOW_DETAIL C ON B.LOT_NO = C.LOT_NO  ");
            sb.AppendLine("WHERE 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine("GROUP BY A.ITEM_CD, A.ITEM_NM, B.LOT_NO, B.LOT_SUB, B.SEQ, B.INPUT_AMT, C.POOR_AMT,C.LOSS  ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //2019-12-24 계획관리에서 제품에 대한 원자재 리스트
        public DataTable Items_Raw_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT A.ITEM_CD, B.RAW_MAT_NM, B.SPEC  ");
            sb.AppendLine("FROM N_ITEM_COMP A  ");
            sb.AppendLine("LEFT OUTER JOIN N_RAW_CODE B ON A.RAW_MAT_CD = B.RAW_MAT_CD  ");
            sb.AppendLine("WHERE 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("ORDER BY A.ITEM_CD  ");

            //Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        //메탈카드등록        
        public int Insert_Metal(
              string txt_metalcd
            , string txt_modelnm
            , string dtp_makedate
            , string txt_spec
            , string txt_ordercust
            , string txt_makecust
            , string dtp_inputdate
            , string txt_comment
            , string lot_no
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_METAL_CODE");
                sb.AppendLine(" where METAL_CD = '" + txt_metalcd + "'");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(METAL_LOTNO,4)),0)+1 from N_METAL_CODE "); //0001 이면 1+1 = 2로 SEQ에 저장
                // sb.AppendLine("where METAL_LOTNO LIKE '" + dtp_inputdate.Substring(0, 7).ToString() + "%'"); //2019-05

                //sb.AppendLine("declare @seq1 int ");
                //sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                //sb.AppendLine("where W_INST_DATE = '" + work_date + "' "); //일별 체크 


                sb.AppendLine("INSERT INTO N_METAL_CODE(  ");
                sb.AppendLine("METAL_CD, METAL_MODEL, METAL_MAKE_DATE, METAL_SPEC,   ");
                sb.AppendLine("METAL_ORDERCUST, METAL_MAKECUST, METAL_INPUT_DATE, METAL_LOTNO, COMMENT)  ");
                sb.AppendLine("VALUES (  ");
                sb.AppendLine("'" + txt_metalcd + "', '" + txt_modelnm + "', '" + dtp_makedate + "', '" + txt_spec + "',   ");
                sb.AppendLine("'" + txt_ordercust + "', '" + txt_makecust + "', '" + dtp_inputdate + "', ");
                sb.AppendLine(" '" + lot_no + "'+ RIGHT('000'+ convert(varchar, @seq), 4)   ");
                sb.AppendLine(" , '" + txt_comment + "'  )    ");

                sCommand = new SqlCommand(sb.ToString());

                //sCommand.Parameters.AddWithValue("@FAC_CD", txt_metal_cd);
                //sCommand.Parameters.AddWithValue("@FAC_MM", txt_metal_nm);
                //sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                //sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                //sCommand.Parameters.AddWithValue("@MANU_COMPANY", txt_cust_nm);
                //sCommand.Parameters.AddWithValue("@ACQ_DATE", dtp_input_date);
                //sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_price);
                //sCommand.Parameters.AddWithValue("@IMG", img);

                Debug.WriteLine(sb);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //메탈카드 수정
        public int Update_Metal(
              string txt_metalcd
            , string txt_modelnm
            , string dtp_makedate
            , string txt_spec
            , string txt_ordercust
            , string txt_makecust
            , string dtp_inputdate
            , string txt_comment

            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_METAL_CODE set");
                sb.AppendLine("      METAL_MODEL = @METAL_MODEL ");
                sb.AppendLine("     ,METAL_MAKE_DATE = @METAL_MAKE_DATE ");
                sb.AppendLine("     ,METAL_SPEC = @METAL_SPEC ");
                sb.AppendLine("     ,METAL_ORDERCUST = @METAL_ORDERCUST ");
                sb.AppendLine("     ,METAL_MAKECUST = @METAL_MAKECUST ");
                sb.AppendLine("     ,METAL_INPUT_DATE = @METAL_INPUT_DATE ");
                sb.AppendLine("     ,METAL_LOTNO = @METAL_LOTNO ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" WHERE METAL_CD = @METAL_CD ");
                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@METAL_CD", txt_metalcd);
                sCommand.Parameters.AddWithValue("@METAL_MODEL", txt_modelnm);
                sCommand.Parameters.AddWithValue("@METAL_MAKE_DATE", dtp_makedate);
                sCommand.Parameters.AddWithValue("@METAL_SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@METAL_ORDERCUST", txt_ordercust);
                sCommand.Parameters.AddWithValue("@METAL_MAKECUST", txt_makecust);
                sCommand.Parameters.AddWithValue("@METAL_INPUT_DATE", dtp_inputdate);

                sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);
                // sCommand.Parameters.AddWithValue("@IMG", img);                             

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //메탈카드 삭제
        public int Delete_Metal(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_METAL_CODE ");
                sb.AppendLine("    where METAL_CD = @METAL_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@METAL_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        //메탈카드 로드
        public DataTable Metal_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT *  ");
            sb.AppendLine("FROM N_METAL_CODE ");
            sb.AppendLine("ORDER BY METAL_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int InsertFac(
              string txt_faccd
            , string txt_facnm
            , string txt_sn
            , string txt_spec
            , int txt_amount
            , string dtp_makedate
            , string dtp_buydate
            , int txt_price
            , string txt_makecust
            , string txt_comment
            , string 생산능력
            , string 유지등급
             , byte[] img
                , int img_size
            , string 마력
            , string 점검주기
            , String 사용부서
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_FAC_CODE");
                sb.AppendLine(" where fac_cd = '" + txt_faccd + "'");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("INSERT INTO N_FAC_CODE(  ");
                sb.AppendLine("FAC_CD");//1
                sb.AppendLine(",FAC_NM");//2
                sb.AppendLine(",MODEL_NM");
                sb.AppendLine(",SPEC");//4
                sb.AppendLine(",MANU_COMPANY");
                sb.AppendLine(",ACQ_DATE");//6
                sb.AppendLine(",ACQ_PRICE");
                sb.AppendLine(",DEPT_CD");//8
                sb.AppendLine(",USED");

                sb.AppendLine(",POWER_NUMBER");
                sb.AppendLine(",MAINTEN_CLASS"); //유지등급 10
                sb.AppendLine(",IMG");
                sb.AppendLine(",COMMENT");//12
                sb.AppendLine(",CHECK_CYCLE");
                sb.AppendLine(",AMOUNT");//14
                sb.AppendLine(",PRODUCE_AMT");
                sb.AppendLine(")");

                sb.AppendLine("VALUES(");

                sb.AppendLine(" '" + txt_faccd + "'");
                sb.AppendLine(" ,'" + txt_facnm + "'");
                sb.AppendLine(" ,'" + txt_sn + "'");
                sb.AppendLine(" ,'" + txt_spec + "'");
                sb.AppendLine(" ,'" + txt_makecust + "'");
                sb.AppendLine(" ,'" + dtp_buydate + "'");
                sb.AppendLine(" ,'" + txt_price + "'");
                sb.AppendLine(" ,'" + 사용부서 + "'");

                sb.AppendLine(" ,'Y' ");

                sb.AppendLine(" ,'" + 마력 + "'");
                sb.AppendLine(" ,'" + 유지등급 + "'");



                if (img_size > 0)
                {
                    sb.AppendLine("    ,@IMG");

                }
                else
                {
                    sb.AppendLine("    ,null");

                }
                sb.AppendLine(" ,'" + txt_comment + "'");
                sb.AppendLine(" ,'" + 점검주기 + "'");
                sb.AppendLine(" ,'" + txt_amount + "'");
                sb.AppendLine(" ," + 생산능력 + "");


                sb.AppendLine(" )");

                //sb.AppendLine("  ");


                sCommand = new SqlCommand(sb.ToString());
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@IMG", img);
                }
                Debug.WriteLine(sb);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int UpdateFac(
              string txt_faccd
            , string txt_facnm
            , string txt_sn
            , string txt_spec
            , int txt_amount
            , string dtp_makedate
            , string dtp_buydate
            , int txt_price
            , string txt_makecust
            , string txt_comment
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("UPDATE N_FAC_CODE SET");
                sb.AppendLine("      FAC_NM = @FAC_NM ");
                sb.AppendLine("     ,MODEL_NM = @MODEL_NM ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     ,BUY_DATE = @BUY_DATE ");
                sb.AppendLine("     ,ACQ_PRICE = @ACQ_PRICE ");
                sb.AppendLine("     ,AMOUNT = @AMOUNT ");
                sb.AppendLine("     ,MAKE_CUST = @MAKE_CUST ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" WHERE FAC_CD = @FAC_CD ");
                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_faccd);
                sCommand.Parameters.AddWithValue("@FAC_NM", txt_facnm);
                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_sn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@ACQ_DATE", dtp_makedate);
                sCommand.Parameters.AddWithValue("@BUY_DATE", dtp_buydate);
                sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_price);
                sCommand.Parameters.AddWithValue("@AMOUNT", txt_amount);
                sCommand.Parameters.AddWithValue("@MAKE_CUST", txt_makecust);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);
                // sCommand.Parameters.AddWithValue("@IMG", img);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int DeleteFac(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("DELETE FROM N_FAC_CODE ");
                sb.AppendLine("    WHERE FAC_CD = @FAC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int InsertFacFix(

             string txt_model_nm
            , string txt_staffcd
            , string txt_FixTime
            , string gubun
            , string txt_faccd
            , string txt_FixCust
            , string txt_FixCost
            , string txt_FixReport
            , string dtp_FixDate
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select count(*) as cnt");
                //sb.AppendLine(" from N_FAC_CODE");
                //sb.AppendLine(" where fac_cd = '" + txt_faccd + "'");
                //Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                //if (sCommand.CommandText.Equals(null))
                //{
                //    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                //    return 2;
                //}
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                // sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq = ISNULL(MAX(FIX_SEQ),0)+1 from N_FAC_FIX ");
                sb.AppendLine("where FAC_CD = '" + txt_faccd + "' ");

                sb.AppendLine("INSERT INTO N_FAC_FIX (FAC_CD, MODEL_NM, STAFF_CD, FIX_TIME, FIX_GUBUN, FIX_CUST, FIX_COST, FIX_REPORT, FIX_DATE, FIX_SEQ) ");
                sb.AppendLine("VALUES(");

                sb.AppendLine(" '" + txt_faccd + "', '" + txt_model_nm + "','" + txt_staffcd + "', '" + txt_FixTime + "', ");
                sb.AppendLine(" '" + gubun + "','" + txt_FixCust + "', ");
                sb.AppendLine(" '" + txt_FixCost + "',  '" + txt_FixReport + "', '" + dtp_FixDate + "', @seq  ) ");

                sCommand = new SqlCommand(sb.ToString());

                Debug.WriteLine(sb);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int UpdateFacFix(
             string txt_model_nm
            , string txt_staffcd
            , string txt_FixTime
            , string gubun
            , string txt_faccd
            , string txt_FixCust
            , string txt_FixCost
            , string txt_FixReport
            , string dtp_FixDate
            , int seq
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("UPDATE N_FAC_FIX SET");

                sb.AppendLine("     MODEL_NM = @MODEL_NM ");
                sb.AppendLine("     ,STAFF_CD = @STAFF_CD ");
                sb.AppendLine("     ,FIX_TIME = @FIX_TIME ");
                sb.AppendLine("     ,FIX_GUBUN = @FIX_GUBUN ");
                sb.AppendLine("     ,FIX_CUST = @FIX_CUST ");
                sb.AppendLine("     ,FIX_COST = @FIX_COST ");
                sb.AppendLine("     ,FIX_REPORT = @FIX_REPORT ");
                sb.AppendLine("     ,FIX_DATE = @FIX_DATE ");

                sb.AppendLine(" WHERE FAC_CD = @FAC_CD ");
                sb.AppendLine(" AND FIX_SEQ = '" + seq + "' ");
                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_faccd);

                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_staffcd);
                sCommand.Parameters.AddWithValue("@FIX_TIME", txt_FixTime);
                sCommand.Parameters.AddWithValue("@FIX_GUBUN", gubun);
                sCommand.Parameters.AddWithValue("@FIX_CUST", txt_FixCust);
                sCommand.Parameters.AddWithValue("@FIX_COST", txt_FixCost);
                sCommand.Parameters.AddWithValue("@FIX_REPORT", txt_FixReport);
                sCommand.Parameters.AddWithValue("@FIX_DATE", dtp_FixDate);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int DeleteFacFix(string txt_faccd, int txt_seq)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("DELETE FROM N_FAC_FIX ");
                sb.AppendLine("    WHERE FAC_CD = @FAC_CD  ");
                sb.AppendLine("    AND FIX_SEQ = @FIX_SEQ  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_faccd);
                sCommand.Parameters.AddWithValue("@FIX_SEQ", txt_seq);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable Fac_Grid_List()
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("SELECT FAC_CD, FAC_NM, MODEL_NM, SPEC, MANU_COMPANY, ACQ_DATE, ACQ_PRICE,  ");
            //sb.AppendLine(" PRO_CAPA, MAINTEN_CLASS, COMMENT  ");
            sb.AppendLine("SELECT FAC_CD, FAC_NM, MODEL_NM, SPEC, MANU_COMPANY,DEPT_CD,USED, ACQ_DATE, ACQ_PRICE, AMOUNT,  COMMENT ");
            sb.AppendLine(",POWER_NUMBER ");
            sb.AppendLine(",MAINTEN_CLASS ");
            sb.AppendLine(",CHECK_CYCLE ");
            sb.AppendLine(",IMG ");
            sb.AppendLine(",PRODUCE_AMT ");

            sb.AppendLine("FROM N_FAC_CODE ");
            sb.AppendLine("ORDER BY FAC_CD");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //설비점검이력
        public DataTable Fac_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT A.FAC_CD, B.FAC_NM, A.MODEL_NM, C.STAFF_NM, A.FIX_TIME, A.FIX_DATE,   ");
            sb.AppendLine("A.FIX_GUBUN, A.FIX_CUST, FIX_COST, FIX_REPORT ,C.STAFF_CD, A.FIX_SEQ  ");
            sb.AppendLine("FROM N_FAC_FIX A   ");
            sb.AppendLine("LEFT OUTER JOIN N_FAC_CODE B ON A.FAC_CD = B.FAC_CD   ");
            sb.AppendLine("LEFT OUTER JOIN N_STAFF_CODE C ON A.STAFF_CD = C.STAFF_CD   ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품재고업데이트
        public int UpdateStock(string item_cd, string bal_stock, string input, string output)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("  BEGIN TRAN ");
                sb.AppendLine("  UPDATE N_ITEM_CODE SET ");
                sb.AppendLine("  BAL_STOCK = '" + bal_stock + "'     ");
                sb.AppendLine("  WHERE ITEM_CD = '" + item_cd + "'    ");
                sb.AppendLine("  COMMIT TRAN   ");

                sb.AppendLine("  BEGIN TRAN ");
                sb.AppendLine("  UPDATE F_ITEM_INPUT SET ");
                sb.AppendLine("  INPUT_AMT = '" + input + "' , ");
                sb.AppendLine("  WHERE ITEM_CD = '" + item_cd + "'    ");
                sb.AppendLine("  COMMIT TRAN   ");

                sb.AppendLine("  BEGIN TRAN ");
                sb.AppendLine("  UPDATE F_ITEM_OUT_DETAIL SET ");
                sb.AppendLine("  OUTPUT_AMT = '" + output + "' , ");
                sb.AppendLine("  WHERE ITEM_CD = '" + item_cd + "'    ");
                sb.AppendLine("  COMMIT TRAN   ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable Fac_Grid_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT FAC_CD, FAC_NM, MODEL_NM, SPEC, MANU_COMPANY,  ACQ_PRICE, AMOUNT, ACQ_DATE, COMMENT , USED");
            sb.AppendLine(",MAINTEN_CLASS ");
            sb.AppendLine(",case when CHECK_CYCLE IS null then '0' else CHECK_CYCLE end CHECK_CYCLE ");
            sb.AppendLine(",isnull(substring(convert(varchar, getdate(), 120),0,11),dateInspc) as dateInspc");
            sb.AppendLine("FROM N_FAC_CODE ");
            sb.AppendLine("WHERE 1=1  ");
            sb.AppendLine("AND FAC_NM LIKE '%" + condition + "%'  ");
            sb.AppendLine("ORDER BY FAC_CD  ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public int update_FAC_USED(string FAC_CD, String USED)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("  UPDATE N_FAC_CODE SET ");
                sb.AppendLine("  USED = '" + USED + "'     ");
                sb.AppendLine("WHERE 1=1  ");
                sb.AppendLine("and FAC_CD='" + FAC_CD + "' ");


                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_설비");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public DataTable Metal_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT *  ");
            sb.AppendLine("FROM N_METAL_CODE ");
            sb.AppendLine("WHERE 1=1 ");
            sb.AppendLine("AND METAL_MODEL LIKE '%" + condition + "%'  ");
            sb.AppendLine("ORDER BY METAL_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }


        public DataTable fn_AuthTopCodeUser(string tCode, string staff_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TopID ");
            sb.AppendLine("     , STAFF_CD ");
            sb.AppendLine("     , AUTH_YN ");
            sb.AppendLine("from N_AUTH_TOP ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine("and TopID = '" + tCode + "'  ");
            sb.AppendLine("and STAFF_CD = '" + staff_cd + "' ");
            Debug.WriteLine("fn_AuthTopCodeUser");
            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_AuthSubCodeUser(string tCode, string staff_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT A.TopID ");
            sb.AppendLine("     , B.SubID ");
            sb.AppendLine("     , B.SubName ");
            sb.AppendLine("     , C.AUTH_YN ");
            sb.AppendLine("     , C.rgstr_yn ");
            sb.AppendLine("     , C.del_yn ");
            sb.AppendLine("from T_TopMenu A ");
            sb.AppendLine("inner join T_SubMenu B ");
            sb.AppendLine("on A.TopID = B.TopID ");
            sb.AppendLine(" and B.VIEW_YN = 'Y'");
            sb.AppendLine("left outer join N_AUTH_SUB C  ");
            sb.AppendLine("on A.TopID = C.TopID ");
            sb.AppendLine(" and B.SubID = C.SubID ");
            sb.AppendLine("where 1=1  ");
            sb.AppendLine(" and A.TopID = '" + tCode + "'  ");
            sb.AppendLine(" and C.STAFF_CD = '" + staff_cd + "' ");
            sb.AppendLine("order by A.TopID,B.SubID ,B.SortNo ");
            Debug.WriteLine("fn_AuthSubCodeUser");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }



        public DataTable fn_AuthSubCode(string tCode)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TopID ");
            sb.AppendLine("     , SubID ");
            sb.AppendLine("     , SubName ");
            sb.AppendLine("     , SortNo ");
            sb.AppendLine("from T_SubMenu ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine("and TopID = '" + tCode + "'  ");
            sb.AppendLine("and VIEW_YN = 'Y' ");
            sb.AppendLine("order by SortNo  ");
            Debug.WriteLine("fn_AuthSubCode");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int inAndUpAuth(string staff_cd, DataGridView[] dgv, CheckBox[] chk, string[] topCd, int max_cnt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                for (int i = 0; i < max_cnt; i++)
                {
                    sb.AppendLine("declare @chk" + i + " int ");
                    sb.AppendLine("select @chk" + i + " = count(*) from N_AUTH_TOP ");
                    sb.AppendLine("where TopID = '" + topCd[i] + "' and STAFF_CD = '" + staff_cd + "' ");
                    sb.AppendLine("IF(@chk" + i + " > 0)");
                    sb.AppendLine(" update N_AUTH_TOP  ");
                    sb.AppendLine(" set AUTH_YN = '" + (chk[i].Checked.ToString().Equals("True") ? "Y" : "N") + "' ");

                    sb.AppendLine("    ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("    ,UPTIME = convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" where TopID = '" + topCd[i].ToString() + "' ");
                    sb.AppendLine("     and STAFF_CD = '" + staff_cd + "' ");
                    sb.AppendLine("ELSE ");
                    sb.AppendLine(" insert into N_AUTH_TOP( ");
                    sb.AppendLine("      TopID ");
                    sb.AppendLine("     ,STAFF_CD ");
                    sb.AppendLine("     ,AUTH_YN ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine("     ) ");
                    sb.AppendLine(" VALUES( ");
                    sb.AppendLine("     '" + topCd[i].ToString() + "' ");
                    sb.AppendLine("     ,'" + staff_cd + "' ");
                    sb.AppendLine("     , '" + (chk[i].Checked.ToString().Equals("True") ? "Y" : "N") + "' ");
                    sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");
                    Debug.WriteLine("권한관리탑" + i);
                    Debug.WriteLine(sb);
                    for (int j = 0; j < dgv[i].Rows.Count; j++)
                    {
                        sb.AppendLine("declare @chk_sub" + i + "_" + j + " int ");
                        sb.AppendLine("select @chk_sub" + i + "_" + j + " = count(*) from N_AUTH_SUB ");
                        sb.AppendLine("where TopID = '" + topCd[i] + "' and SubID = '" + dgv[i].Rows[j].Cells["SubID"].Value.ToString() + "'  and STAFF_CD = '" + staff_cd + "' ");

                        sb.AppendLine("IF(@chk_sub" + i + "_" + j + " > 0)");
                        sb.AppendLine(" update N_AUTH_SUB  ");
                        sb.AppendLine(" set AUTH_YN = '" + (dgv[i].Rows[j].Cells["CHK"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("  ,rgstr_yn = '" + (dgv[i].Rows[j].Cells["CHK1"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("  ,del_yn = '" + (dgv[i].Rows[j].Cells["CHK2"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("    ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("    ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where TopID = '" + topCd[i].ToString() + "' ");
                        sb.AppendLine("     and SubID = '" + dgv[i].Rows[j].Cells["SubID"].Value + "' ");
                        sb.AppendLine("     and STAFF_CD = '" + staff_cd + "' ");
                        sb.AppendLine("ELSE ");
                        sb.AppendLine(" insert into N_AUTH_SUB( ");
                        sb.AppendLine("      TopID ");
                        sb.AppendLine("     ,SubID ");
                        sb.AppendLine("     ,STAFF_CD ");
                        sb.AppendLine("     ,AUTH_YN ");
                        sb.AppendLine("     ,rgstr_yn ");
                        sb.AppendLine("     ,del_yn ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ) ");
                        sb.AppendLine(" VALUES( ");
                        sb.AppendLine("     '" + topCd[i].ToString() + "' ");
                        sb.AppendLine("     ,'" + dgv[i].Rows[j].Cells["SubID"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + staff_cd + "' ");
                        sb.AppendLine("     , '" + (dgv[i].Rows[j].Cells["CHK"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("     , '" + (dgv[i].Rows[j].Cells["CHK1"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("     , '" + (dgv[i].Rows[j].Cells["CHK2"].Value.ToString().Equals("True") ? "Y" : "N") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                        Debug.WriteLine("권한관리서브");
                        Debug.WriteLine(sb);
                    }
                }

                Debug.WriteLine("권한관리");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public static string fn_TitleName(string sName)
        {
            string tName = "";

            wnAdo wAdo = new wnAdo();

            DataTable dt = new DataTable();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TopID ");
            sb.AppendLine("     , SubID ");
            sb.AppendLine("     , SubName ");
            sb.AppendLine("     , SortNo ");
            sb.AppendLine("from T_SubMenu ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(" and VIEW_YN = 'Y'");
            sb.AppendLine(" and AsmName LIKE'%" + sName + "' ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            dt = wAdo.SqlCommandSelect(sCommand);

            if (dt != null && dt.Rows.Count > 0)
            {
                tName = dt.Rows[0]["TopID"].ToString() + "$" + dt.Rows[0]["SubID"].ToString() + "$" + dt.Rows[0]["SubName"].ToString();
                ;
            }
            else tName = "";

            return tName;
        }

        public DataTable fn_auth_check(string topid, string subid)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select auth_yn,rgstr_yn,del_yn from n_auth_sub");
            sb.AppendLine("where staff_cd='" + Common.p_strStaffNo + "' and topid='" + topid + "' and subid='" + subid + "'");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        //유정훈 시작 

        // 제품 출고 조회

        public DataTable fn_Item_Output_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       C.CUST_CD, ");
            sb.AppendLine("       C.CUST_NM, ");
            sb.AppendLine("       C.TAX_CD AS VAT_CD, ");
            sb.AppendLine("       A.STORAGE_CD, ");
            sb.AppendLine("       D.STORAGE_NM, ");
            sb.AppendLine("       B.ITEM_CNT, ");
            sb.AppendLine("       A.SELF_YN, ");
            //2020-05-20 이재원 주문서와 연결된 것을 불러오기 위해 컬럼 3개 추가 
            sb.AppendLine("       A.JUMUN_DATE, ");
            sb.AppendLine("       A.JUMUN_CD, ");
            sb.AppendLine("       (SELECT COMMENT FROM F_JUMUN WHERE JUMUN_DATE = A.JUMUN_DATE and JUMUN_CD = A.JUMUN_CD) AS J_COMMENT, ");
            // -- 
            //이재원 수금액 불러오도록 수정 
            sb.AppendLine("       K.SOO_GUBUN, ");
            sb.AppendLine("       K.SOO_MONEY, ");
            sb.AppendLine("       K.DC_MONEY, ");
            sb.AppendLine("       K.TOTAL_MONEY AS TOTAL_SOO_MONEY, ");
            // --
            //이재원 전일 잔고, 당일 매출, 당일 수금, 당일잔고 불러오도록 T_CUST_DAY_TOTAL과 join함
            sb.AppendLine("  isnull(T.S_RS_SUPPLY_MONEY,0) AS  S_RS_SUPPLY_MONEY,   ");
            sb.AppendLine("  isnull(T.S_RS_TAX_MONEY ,0) AS S_RS_TAX_MONEY,   ");
            sb.AppendLine("  isnull(T.S_RS_TOTAL_MONEY ,0) AS S_RS_TOTAL_MONEY,   ");
            sb.AppendLine("  isnull(T.COL_TOTAL_MONEY,0) AS COL_TOTAL_MONEY,     ");
            sb.AppendLine("  isnull(T.BALANCE_DAY,0) AS BALANCE_DAY,     ");
            sb.AppendLine("  isnull((SELECT top 1 BALANCE_DAY from T_CUST_DAY_TOTAL WHERE CUST_CD = A.CUST_CD AND INPUT_DATE < A.OUTPUT_DATE order by INPUT_DATE DESC),0) AS BALANCE_BEFORE     ");

            sb.AppendLine(" from F_ITEM_OUT A ");
            sb.AppendLine(" left outer join(  ");
            sb.AppendLine("                 select OUTPUT_DATE,OUTPUT_CD,COUNT(*) AS ITEM_CNT ");
            sb.AppendLine("                 from F_ITEM_OUT_DETAIL A ");
            sb.AppendLine(condition);
            sb.AppendLine("                 group by OUTPUT_DATE,OUTPUT_CD)B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine(" left outer join N_STORAGE_CODE D ");
            sb.AppendLine(" on A.STORAGE_CD = D.STORAGE_CD ");

            sb.AppendLine(" left outer join F_COLLECT K ");
            sb.AppendLine(" on K.OUTPUT_DATE = A.OUTPUT_DATE ");
            sb.AppendLine(" and K.OUTPUT_CD = A.OUTPUT_CD ");

            sb.AppendLine("  left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine("  on T.INPUT_DATE = A.OUTPUT_DATE ");
            sb.AppendLine("  and T.CUST_CD = A.CUST_CD     ");

            sb.AppendLine("   inner join F_SALES S  ");
            sb.AppendLine("   on S.OUTPUT_DATE = A.OUTPUT_DATE  ");
            sb.AppendLine("   and S.OUTPUT_CD = A.OUTPUT_CD   ");

            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE desc, A.OUTPUT_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }



        public DataTable fn_item_out_plan(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE,A.W_INST_CD,A.LOT_NO,E.ITEM_NM,G.CUST_NM");
            sb.AppendLine("       ,A.SPEC ,A.INST_AMT ,A.COMPLETE_YN,A.PLAN_NUM,A.PLAN_ITEM ");
            sb.AppendLine("        from F_WORK_INST as A ");
            sb.AppendLine("       left join F_ITEM_OUT_DETAIL as B on A.LOT_NO=B.LOT_NO  ");
            sb.AppendLine("      inner join F_WORK_FLOW as C on C.LOT_NO=A.LOT_NO and C.COMPLETE_YN='Y' ");
            sb.AppendLine("     inner join F_ITEM_INPUT as D on D.LOT_NO=A.LOT_NO and D.COMPLETE_YN='Y'");
            sb.AppendLine("     inner join N_ITEM_CODE as E on E.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("   inner join N_CUST_CODE as G on G.CUST_CD=A.CUST_CD");
            sb.AppendLine("     where a.PLAN_NUM<>''");


            Debug.WriteLine(sb);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }


        public DataTable bookmarkList()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select a.TopID,a.SubID,STAFF_CD,a.bookmark ,b.SubName,B.AsmName from  N_AUTH_SUB as A ");
            sb.AppendLine("inner join T_SubMenu as B on a.topid=b.topid and a.subID=b.subid ");
            sb.AppendLine("where A.bookmark='Y'");
            sb.AppendLine("   and STAFF_CD='" + Common.p_strStaffNo + "'");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public void updatebookmark(CheckedListBox chk)
        {
            try
            {
                SqlConnection dbConn = new SqlConnection(Common.p_strConn);

                StringBuilder sb = new StringBuilder();
                //sb.AppendLine("   update N_AUTH_SUB set bookmark='N' where STAFF_CD='"+Common.p_strStaffNo+"' ");
                //sb.AppendLine("   update N_AUTH_SUB set bookmark='N' where STAFF_CD='"+Common.p_strStaffNo+"' and SubName in (");
                // sb.Append("'"+chk.Items[0].ToString()+"'");
                //for (int i = 1; i < chk.Items.Count; i++)
                //{
                //    sb.Append(",'" + chk.Items[i].ToString() + "'");
                //}
                //sb.Append(")");
                sb.AppendLine("   update N_AUTH_SUB set bookmark='N' where STAFF_CD='" + Common.p_strStaffNo + "' ");
                for (int i = 1; i < chk.Items.Count; i++)
                {
                    sb.AppendLine("  update N_AUTH_SUB set bookmark='Y' where STAFF_CD='" + Common.p_strStaffNo + "' and (select SubID from T_SubMenu where SubName='" + chk.Items[i].ToString() + "') =SubID");
                    sb.AppendLine("  and (select TopID from T_SubMenu where SubName='" + chk.Items[i].ToString() + "') =TopID");
                }


                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString(), dbConn);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_meat_INPUT");

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();

            }
        }

        public DataTable fn_Item_List_검사용(string condition) //솔빈추가  frm공정검사기준등록 에 제품 list 가져옴
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,ITEM_NM ");
            sb.AppendLine("     ,ITEM_GUBUN ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,OUTPUT_PRICE ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            sb.AppendLine("      ,c.FLOW_NM ");
            sb.AppendLine("      ,c.FLOW_CD as 공정코드 ");

            sb.AppendLine("    ,case when   D.FLOW_CD IS NULL then '미등록' else '등록' end 등록 ");

            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(" left join n_item_flow as B on B.ITEM_CD=A.ITEM_CD ");
            sb.AppendLine(" inner join N_FLOW_CODE as c on c.FLOW_CD=B.FLOW_CD and c.FLOW_CHK_YN='Y'");
            sb.AppendLine("  left join N_FLOW_CHK as D on D.ITEM_CD=A.ITEM_CD and  D.FLOW_CD =c.FLOW_CD");

            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,A.ITEM_CD");

            Debug.WriteLine("frm공정검사기준등록 에 제품 list 가져옴");

            Debug.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable 납품추적_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT   A.OUTPUT_DATE,   B.ITEM_CD,  B.ITEM_NM,  B.SPEC, ");
            sb.AppendLine("C.CUST_NM,    A.OUTPUT_AMT,  A.PRICE,  A.TOTAL_MONEY,  A.LOT_NO ,A.LOT_SUB");
            sb.AppendLine("FROM F_ITEM_OUT_DETAIL A ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE B ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN N_CUST_CODE C ON A.CUST_CD = C.CUST_CD ");
            sb.AppendLine(condition);
            //sb.AppendLine(" order by A.OUTPUT_DATE, A.OUTPUT_CD, B.SEQ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable flowTracking(string condition)
        {






            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select   ");
            sb.AppendLine("    B.F_SUB_DATE  ");
            sb.AppendLine("    ,A.ITEM_CD  ");
            sb.AppendLine("    ,C.ITEM_NM  ");
            sb.AppendLine("    ,B.FLOW_CD  ");
            sb.AppendLine("    ,D.FLOW_NM  ");
            sb.AppendLine("    ,A.LOT_NO  ");
            sb.AppendLine("from F_WORK_FLOW A");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL B ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("inner join N_ITEM_CODE C ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("inner join N_FLOW_CODE D  ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD  ");
            sb.AppendLine(condition);
            //sb.AppendLine(" order by A.OUTPUT_DATE, A.OUTPUT_CD, B.SEQ");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable 납품추적_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT   A.LOT_NO,  A.FLOW_DATE,  A.ITEM_CD,  B.F_STEP,  B.SEQ,    ");
            sb.AppendLine("D.ITEM_NM,  D.ITEM_WEIGHT,  C.FLOW_NM,  E.UNIT_NM,   ");
            sb.AppendLine("ISNULL(F.OUTPUT_AMT, 0) AS OUTPUT_AMT  ");
            sb.AppendLine("FROM F_WORK_FLOW A  ");
            sb.AppendLine("INNER JOIN F_WORK_FLOW_DETAIL B ON A.LOT_NO = B.LOT_NO  ");
            sb.AppendLine("LEFT OUTER JOIN N_FLOW_CODE C ON B.FLOW_CD = C.FLOW_CD  ");
            sb.AppendLine("LEFT OUTER JOIN N_ITEM_CODE D ON A.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("LEFT OUTER JOIN N_UNIT_CODE E ON D.UNIT_CD = E.UNIT_CD  ");
            sb.AppendLine("LEFT OUTER JOIN F_ITEM_OUT_DETAIL F ON A.LOT_NO = F.LOT_NO and B.SEQ=f.INP_SEQ    ");

            sb.AppendLine(condition);
            sb.AppendLine("order  by B.SEQ ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int updateItemOut(
              string out_date
            , string out_cd
            , string txt_cust_cd
            , string all_supply_money
            , string all_tax_money
            , string all_total_money
            , string vat_cd
            , bool is_soo_update
            , string soo_gubun
            , string soo_money
            , string dc_money
            , string total_soo_money
            , conDataGridView item_out_dgv
            , DataTable del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();


                sb.AppendLine("declare @sales_seq int ");
                sb.AppendLine("select @sales_seq = SALES_CD from F_SALES ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("and OUTPUT_CD =  '" + out_cd + "' ");


                sb.AppendLine("update F_ITEM_OUT set");
                sb.AppendLine("      UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' and OUTPUT_CD= '" + out_cd + "' ");


                bool isCustDay = isCustDayTotal(out_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(out_date, txt_cust_cd));
                }


                if (is_soo_update)
                {
                    if (soo_gubun.Equals("-1"))
                    {//수금 삭제
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "' AND OUTPUT_CD = '" + out_cd + "') ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY - (SELECT SOO_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY - (SELECT DC_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY - (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , txt_cust_cd
                        , "(SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "+"));

                        sb.AppendLine(" DELETE FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "' AND OUTPUT_CD = '" + out_cd + "' ");

                    }
                    else
                    {//수금 수정
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE + (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "' AND OUTPUT_CD = '" + out_cd + "') ");

                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE - " + total_soo_money.Replace(",", "") + " ");
                        sb.AppendLine("    WHERE CUST_CD = (SELECT CUST_CD FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "' AND OUTPUT_CD = '" + out_cd + "') ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY - (SELECT SOO_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY - (SELECT DC_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY - (SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY + " + soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + total_soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , txt_cust_cd
                        , "(SELECT TOTAL_MONEY FROM F_COLLECT WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                        , "+"));

                        sb.AppendLine(CustDayTotal_Change_Balance(
                            out_date
                            , txt_cust_cd
                            , total_soo_money.Replace(",", "")
                            , "-"));

                        //수금수정
                        sb.AppendLine("UPDATE F_COLLECT SET ");
                        sb.AppendLine(" SOO_GUBUN     = '" + soo_gubun + "'                         ");
                        sb.AppendLine(" ,CUST_CD     =   '" + txt_cust_cd + "'                     ");
                        sb.AppendLine(" ,SOO_MONEY     = " + soo_money.Replace(",", "") + "          ");
                        sb.AppendLine(" ,DC_MONEY      = " + dc_money.Replace(",", "") + "           ");
                        sb.AppendLine(" ,TOTAL_MONEY   = " + total_soo_money.Replace(",", "") + "    ");
                        sb.AppendLine(" ,UPSTAFF       = '" + Common.p_strStaffNo + "'                ");
                        sb.AppendLine(" ,UPTIME        = convert(varchar, getdate(), 120)            ");
                        sb.AppendLine(" WHERE ");
                        sb.AppendLine("  OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine(" AND OUTPUT_CD = '" + out_cd + "' ");
                        //수금수정
                    }

                }
                else
                {
                    if (!soo_gubun.Equals("-1"))
                    {//수금등록
                        sb.AppendLine("UPDATE N_CUST_CODE ");
                        sb.AppendLine("      SET BALANCE = BALANCE - " + total_soo_money.Replace(",", "") + " ");
                        sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                        sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                        sb.AppendLine("  COL_MONEY = COL_MONEY + " + soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + total_soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                        sb.AppendLine(CustDayTotal_Change_Balance(
                        out_date
                        , txt_cust_cd
                        , total_soo_money.Replace(",", "")
                        , "-"));

                        sb.AppendLine("declare @soo_seq int ");
                        sb.AppendLine("select @soo_seq = ISNULL(convert(int,MAX(SOO_CD)),0)+1 from F_COLLECT ");
                        sb.AppendLine("where SOO_DATE = '" + out_date + "'  ");

                        //수금등록
                        sb.AppendLine("insert into F_COLLECT(");
                        sb.AppendLine(" SOO_DATE ");
                        sb.AppendLine(" ,SOO_CD ");
                        sb.AppendLine(" ,SOO_GUBUN ");
                        sb.AppendLine(" ,CUST_CD ");
                        sb.AppendLine(" ,SOO_MONEY ");
                        sb.AppendLine(" ,DC_MONEY ");
                        sb.AppendLine(" ,TOTAL_MONEY ");
                        sb.AppendLine(" ,COMMENT ");
                        sb.AppendLine(" ,INSTAFF ");
                        sb.AppendLine(" ,INTIME ");
                        sb.AppendLine(" ,OUTPUT_DATE ");
                        sb.AppendLine(" ,OUTPUT_CD ");
                        sb.AppendLine(" ) VALUES ( ");
                        sb.AppendLine(" '" + out_date + "' ");
                        sb.AppendLine(" ,@soo_seq ");
                        sb.AppendLine(" ,'" + soo_gubun + "' ");
                        sb.AppendLine(" ,'" + txt_cust_cd + "' ");
                        sb.AppendLine(" ," + soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" ," + dc_money.Replace(",", "") + " ");
                        sb.AppendLine(" ," + total_soo_money.Replace(",", "") + " ");
                        sb.AppendLine(" ,'#매출 " + out_date + "/' + convert(nvarchar,@sales_seq) ");
                        sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ,'" + out_date + "' ");
                        sb.AppendLine(" ,'" + out_cd + "' ");
                        sb.AppendLine(" ) ");
                        //수금등록
                    }
                }

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                sb.AppendLine(" WHERE CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE + " + all_total_money.Replace(",", "") + " ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + " + all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, txt_cust_cd));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , "(SELECT ALL_TOTAL_MONEY FROM F_SALES WHERE OUTPUT_DATE = '" + out_date + "'  AND OUTPUT_CD = '" + out_cd + "' ) "
                    , "-"));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));

                // 매출 수정
                sb.AppendLine(" UPDATE F_SALES SET ");
                sb.AppendLine("     CUST_CD          =   '" + txt_cust_cd + "'      ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY  =   '" + all_total_money.Replace(",", "") + "'     ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY =   '" + all_supply_money.Replace(",", "") + "'    ");
                sb.AppendLine("     ,ALL_TAX_MONEY    =   '" + all_tax_money.Replace(",", "") + "'        ");
                sb.AppendLine("     ,UPSTAFF          =   '" + Common.p_strStaffNo + "'        ");
                sb.AppendLine("     ,UPTIME           =   convert(varchar, getdate(), 120)     ");
                sb.AppendLine("     ,TAX_CD           =   '" + vat_cd + "'      ");
                sb.AppendLine("  WHERE OUTPUT_DATE = '" + out_date + "' ");
                sb.AppendLine("  AND OUTPUT_CD = '" + out_cd + "' ");
                // 매출 수정




                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)item_out_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @out_seq" + i + " int ");
                            sb.AppendLine("select @out_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT_DETAIL ");
                            sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine("and OUTPUT_CD = '" + out_cd + "' ");

                            sb.AppendLine("declare @sales_seq" + i + " int ");
                            sb.AppendLine("select @sales_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_SALES_DETAIL ");
                            sb.AppendLine("where SALES_DATE = '" + out_date + "' ");
                            sb.AppendLine("and SALES_CD =  @sales_seq ");

                            sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                            sb.AppendLine("     OUTPUT_DATE ");
                            sb.AppendLine("     ,OUTPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,LOT_SUB ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,OUTPUT_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,CUST_CD ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + out_date + "' ");
                            sb.AppendLine("     ,'" + out_cd + "' ");
                            sb.AppendLine("     ,@out_seq" + i + " ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("  )");


                            sb.AppendLine("insert into F_SALES_DETAIL(");
                            sb.AppendLine("      SALES_DATE   ");      //1
                            sb.AppendLine("     ,SALES_CD    ");       //2
                            sb.AppendLine("     ,SEQ    ");            //3
                            sb.AppendLine("     ,ITEM_CD    ");        //4
                            sb.AppendLine("     ,OUTPUT_DATE    ");    //5
                            sb.AppendLine("     ,OUTPUT_CD    ");      //6
                            sb.AppendLine("     ,OUTPUT_SEQ    ");     //7
                            sb.AppendLine("     ,INPUT_DATE    ");     //8
                            sb.AppendLine("     ,INPUT_CD    ");       //9
                            sb.AppendLine("     ,LOT_NO    ");         //10
                            sb.AppendLine("     ,LOT_SUB    ");        //11
                            sb.AppendLine("     ,TOTAL_AMT    ");      //12
                            sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                            sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                            sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                            sb.AppendLine("     ,TAX_MONEY    ");      //16
                            sb.AppendLine("     ,INTIME    ");         //17
                            sb.AppendLine("     ,INSTAFF    ");        //18
                            sb.AppendLine("     ,PRINT_YN    ");       //19
                            sb.AppendLine("     ,TAX_CD    ");         //20
                            sb.AppendLine("  ) values ( ");
                            sb.AppendLine("     '" + out_date + "' ");                                                                               //1
                            sb.AppendLine("      ,@sales_seq ");                                                                                     //2
                            sb.AppendLine("     ,@sales_seq" + i + " ");                                                                             //3
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                         //4
                            sb.AppendLine("     ,'" + out_date + "' ");                                                                              //5
                            sb.AppendLine("     ,'" + out_cd + "'  ");                                                                                           //6
                            sb.AppendLine("     ,@out_seq" + i + "  ");                                                                              //7
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                                      //8
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                                        //9
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                          //10
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                         //11
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");             //12
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                            sb.AppendLine("     ,'N' ");                                                                                             //19
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                          //20
                            sb.AppendLine("  )");

                            sb.AppendLine(" declare @chk" + i + " int  ");
                            sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                            sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                            sb.AppendLine(" if @chk" + i + " > 0  ");
                            sb.AppendLine(" begin  ");
                            sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                            sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                            sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                            sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                            sb.AppendLine("      AND P_GUBUN = '2' ");
                            sb.AppendLine(" end ");
                            sb.AppendLine(" else begin ");
                            sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                            sb.AppendLine("      CUST_CD ");
                            sb.AppendLine("      ,PROD_CD ");
                            sb.AppendLine("      ,B_BOX_PRICE ");
                            sb.AppendLine("      ,S_BOX_PRICE ");
                            sb.AppendLine("      ,UNIT_PRICE ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,P_GUBUN ");
                            sb.AppendLine("   )VALUES(  ");
                            sb.AppendLine("   '" + txt_cust_cd + "'  ");
                            sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   ,'2' ");
                            sb.AppendLine(" ) ");
                            sb.AppendLine(" end ");

                        }
                        else
                        {
                            sb.AppendLine("update F_ITEM_OUT_DETAIL set");
                            sb.AppendLine("       OUTPUT_AMT =  '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + item_out_dgv.Rows[i].Cells["SEQ"].Value + "'");

                            //이거 수정하며됨 
                            sb.AppendLine("UPDATE F_SALES_DETAIL SET ");
                            sb.AppendLine("     ITEM_CD      =   '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'                                         ");        //4
                            sb.AppendLine("     ,INPUT_DATE   =   '" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "'                                         ");     //8
                            sb.AppendLine("     ,INPUT_CD     =   '" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "'                                         ");       //9
                            sb.AppendLine("     ,LOT_NO       =   '" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "'                                         ");         //10
                            sb.AppendLine("     ,LOT_SUB      =   '" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "'                                         ");        //11
                            sb.AppendLine("     ,TOTAL_AMT    =   '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "'               ");      //12
                            sb.AppendLine("     ,TOTAL_PRICE  =   '" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "'                      ");    //13
                            sb.AppendLine("     ,TOTAL_MONEY  =   '" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "'              ");    //14
                            sb.AppendLine("     ,SUPPLY_MONEY =   '" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "'              ");   //15
                            sb.AppendLine("     ,TAX_MONEY    =   '" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "'              ");      //16
                            sb.AppendLine("     ,UPTIME       =   convert(varchar, getdate(), 120)                                                               ");         //17
                            sb.AppendLine("     ,UPSTAFF      =   '" + Common.p_strStaffNo + "'                                                                   ");        //18
                            sb.AppendLine("     ,PRINT_YN     =   'N' ");                                                                                           //19
                            sb.AppendLine("     ,TAX_CD       =   '" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                        //20
                            sb.AppendLine(" WHERE OUTPUT_DATE  =   '" + out_date + "'    ");                                                                               //1
                            sb.AppendLine(" AND OUTPUT_CD    =   '" + out_cd + "'      ");                                                                                     //2
                            sb.AppendLine(" AND OUTPUT_SEQ   =   '" + item_out_dgv.Rows[i].Cells["SEQ"].Value + "'    ");                                                                             //3

                            sb.AppendLine(" declare @chk" + i + " int  ");
                            sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                            sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                            sb.AppendLine(" if @chk" + i + " > 0  ");
                            sb.AppendLine(" begin  ");
                            sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                            sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                            sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                            sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                            sb.AppendLine("      AND P_GUBUN = '2' ");
                            sb.AppendLine(" end ");
                            sb.AppendLine(" else begin ");
                            sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                            sb.AppendLine("      CUST_CD ");
                            sb.AppendLine("      ,PROD_CD ");
                            sb.AppendLine("      ,B_BOX_PRICE ");
                            sb.AppendLine("      ,S_BOX_PRICE ");
                            sb.AppendLine("      ,UNIT_PRICE ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,P_GUBUN ");
                            sb.AppendLine("   )VALUES(  ");
                            sb.AppendLine("   '" + txt_cust_cd + "'  ");
                            sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,0 ");
                            sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   ,'2' ");
                            sb.AppendLine(" ) ");
                            sb.AppendLine(" end ");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("     and OUTPUT_CD = '" + out_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i]["SEQ"].ToString() + "' ");

                        sb.AppendLine("delete from F_SALES_DETAIL ");
                        sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("     and OUTPUT_CD = '" + out_cd + "' ");
                        sb.AppendLine("     and OUTPUT_SEQ = '" + del_dgv.Rows[i]["SEQ"].ToString() + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertItemOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                //for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                //{
                //    sb.AppendLine(" select A.ORDER_DATE,A.ORDER_CD,B.SEQ,C.ORDER_AMT, C.INPUT_AMT");
                //    sb.AppendLine(" FROM F_ORDER A ");
                //    sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B  ");
                //    sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
                //    sb.AppendLine("     AND A.ORDER_CD = B.ORDER_CD ");
                //    sb.AppendLine(" LEFT OUTER JOIN(	 ");
                //    sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
                //    sb.AppendLine("                           ,AA.ORDER_CD       ");
                //    sb.AppendLine("                           ,AA.SEQ ");
                //    sb.AppendLine("                           ,FLOOR(ISNULL(AA.TOTAL_AMT,0)) AS ORDER_AMT ");
                //    sb.AppendLine("                           ,ISNULL(SUM(BB.TOTAL_AMT),0) AS INPUT_AMT ");
                //    sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TOTAL_AMT),0) AS NO_INPUT_AMT ");
                //    sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
                //    sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
                //    sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
                //    sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
                //    sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
                //    sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
                //    sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
                //    sb.AppendLine("     AND A.ORDER_CD = C.ORDER_CD ");
                //    sb.AppendLine("     AND B.SEQ = C.SEQ  ");
                //    sb.AppendLine(" WHERE A.ORDER_DATE = '" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                //    sb.AppendLine("      AND A.ORDER_CD = '" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                //    sb.AppendLine("      AND B.SEQ = '" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");

                //    sCommand = new SqlCommand(sb.ToString());
                //    if (sCommand.CommandText.Equals(null))
                //    {
                //        wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                //        return 2;
                //    }

                //    DataTable dt = wAdo.SqlCommandSelect(sCommand);

                //    double order_amt = double.Parse(dt.Rows[0]["ORDER_AMT"].ToString());
                //    double input_amt = double.Parse(dt.Rows[0]["INPUT_AMT"].ToString());
                //    double grd_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", ""));
                //    double grd_ord_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["OLD_TOTAL_AMT"].Value)); //백업은 콤마 정의 안함

                //    // 발주수량 - 입고수량 - 입력한 수량 값 = 결과값

                //    double rs_num = order_amt - input_amt - grd_total_amt;
                //    if (rs_num < 0)
                //    {
                //        StringBuilder alert_sb = new StringBuilder();
                //        alert_sb.AppendLine(i + 1 + "번째 줄 원자재에 포함된 발주번호 \n ");
                //        alert_sb.AppendLine(in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + " [" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "] 의 발주수량보다 더 많게 입력하셨습니다. \n");
                //        alert_sb.AppendLine("그대로 저장하시겠습니까? (저장:예 / 취소:아니오)");

                //        DialogResult msgOk = MessageBox.Show(alert_sb.ToString(), "삭제여부", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                //        if (msgOk == DialogResult.No)
                //        {
                //            return 3;
                //        }
                //    }
                //}

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @OUTPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");

                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@out_seq" + i + " ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("  )");

                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_OUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteItemOut(string out_date, string out_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ITEM_OUT ");
                sb.AppendLine("    where OUTPUT_DATE = @OUTPUT_DATE ");
                sb.AppendLine("    and OUTPUT_CD = @OUTPUT_CD ");


                sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                sb.AppendLine("    where OUTPUT_DATE = @OUTPUT_DATE ");
                sb.AppendLine("    and OUTPUT_CD = @OUTPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@OUTPUT_CD", out_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable cucust(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select b.cust_nm from f_order a   ");
            sb.AppendLine(" left outer join N_CUST_CODE b on a.CUST_CD = b.CUST_CD   ");
            sb.AppendLine("group by b.cust_nm   ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }





        #region 화인
        //화인 제품이력관리
        public DataTable hwa_item_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine("A.ORD_DATE as 주문일자");
            sb.AppendLine(",A.ORD_NUM as 주문번호");
            sb.AppendLine(",A.STAFF_CD as 주문사원코드");
            sb.AppendLine(",AX.STAFF_NM as 주문사원");
            sb.AppendLine(",AD.ORD_AMT as 주문단가");
            sb.AppendLine(",AD.ORD_QTY as 주문수량");
            sb.AppendLine(",AD.ORD_PRICE  as 주문금액");

            sb.AppendLine(",B.DELIVERY_DATE as 배송일자");
            sb.AppendLine(",B.DELIVERY_CD as 배송번호");
            sb.AppendLine(",B.STAFF_CD  as 배송담당사원코드");
            sb.AppendLine(",B.DELIVERY_STAFF_CD  as 배송사원코드");
            sb.AppendLine(",BX.STAFF_NM as 배송사원");
            sb.AppendLine(",BD.DELIVERY_QTY as 배송수량");
            sb.AppendLine(",B.STATE_DATE as 배송완료일자");

            sb.AppendLine(",C.RETURN_DATE  as 반품일자");
            sb.AppendLine(",C.RETURN_NUM as 반품번호");
            sb.AppendLine(",C.STAFF_CD as  반품사원코드");
            sb.AppendLine(",FX.STAFF_NM as 반품사원");
            sb.AppendLine(",CD.RETURN_QTY  as 반품수량");
            sb.AppendLine(",CD.RETURN_PRICE as 반품단가");
            sb.AppendLine(",CD.RETURN_AMT as 반품금액");


            sb.AppendLine(",D.SALE_DATE as 매출일자");
            sb.AppendLine(",D.SALE_NUM as 매출번호");
            sb.AppendLine(",D.STAFF_CD as 매출사원코드");
            sb.AppendLine(",DD.SALE_QTY as 매출수량");
            sb.AppendLine(",DD.SALE_PRICE as 매출단가");
            sb.AppendLine(",DD.SALE_AMT as 매출금액");
            sb.AppendLine(",GX.STAFF_NM as 매출사원 ");

            sb.AppendLine(",A.PLAN_DATE as 계획일자");
            sb.AppendLine(",A.PLAN_CD as 계획번호");

            sb.AppendLine(",C.RECALL_DATE as 회수일자 ");
            sb.AppendLine(",CX.STAFF_NM as 회수사원");

            sb.AppendLine(",C.COMPLETE_DATE as 완료일자");
            sb.AppendLine(",DX.STAFF_NM as 완료사원");

            sb.AppendLine(",Z.ITEM_CD");
            sb.AppendLine(",Z.ITEM_NM");
            sb.AppendLine(",Z.spec");
            sb.AppendLine(",W.CUST_NM");





            sb.AppendLine("from S_주문등록_H AS A ");
            sb.AppendLine("left join S_주문등록_D as AD on AD.ORD_DATE=A.ORD_DATE and AD.ORD_NUM=A.ORD_NUM  ");
            sb.AppendLine("left join S_배송등록_H AS B on B.ORD_DATE=A.ORD_DATE and B.ORD_NUM=A.ORD_NUM  ");
            sb.AppendLine("left join S_배송등록_D AS BD on BD.ORD_DATE=B.ORD_DATE and BD.ORD_NUM=B.ORD_NUM  ");
            sb.AppendLine("left join S_반품등록_H as C on C.DELIVERY_DATE=B.DELIVERY_DATE and C.DELIVERY_CD=B.DELIVERY_CD  ");
            sb.AppendLine("left join S_반품등록_D AS CD on CD.RETURN_DATE=C.RETURN_DATE and CD.RETURN_NUM=C.RETURN_NUM  ");
            sb.AppendLine("left join S_매출등록_H AS D on D.ORDER_DATE=A.ORD_DATE and D.ORDER_NUM =A.ORD_NUM ");
            sb.AppendLine("left join S_매출등록_D AS DD on DD.SALE_DATE=D.SALE_DATE and DD.SALE_NUM=D.SALE_NUM ");
            //n
            sb.AppendLine("left join  N_ITEM_CODE as Z on Z.ITEM_CD=AD.ITEM_CD");
            sb.AppendLine("left join N_STAFF_CODE as AX on A.STAFF_CD = AX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as BX on B.DELIVERY_STAFF_CD = BX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as CX on C.RECALL_STAFF = CX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as DX on C.COMPLETE_STAFF = DX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as FX on C.STAFF_CD = FX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as GX on D.STAFF_CD = GX.STAFF_CD");
            sb.AppendLine("left join N_CUST_CODE as W on W.CUST_CD=A.CUST_CD");
            sb.AppendLine("where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable useGrid(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT   ");
            sb.AppendLine("ORD_DATE, ORD_NUM, ORD_INPUT, ORD_TIME, C.CUST_NM, B.STAFF_NM, VAT_CD, A.COMMENT, A.CUST_CD, A.STORAGE_CD,  A.STAFF_CD, A.DELIVERY_CD, ");
            sb.AppendLine("(SELECT STAFF_NM FROM N_STAFF_CODE WHERE A.DELIVERY_CD = STAFF_CD) AS DELIVERY_NM   ");
            sb.AppendLine("FROM S_주문등록_H A    ");
            sb.AppendLine("LEFT OUTER JOIN N_STAFF_CODE B ON A.STAFF_CD = B.STAFF_CD      ");
            sb.AppendLine("LEFT OUTER JOIN N_CUST_CODE C ON A.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("WHERE 1=1 ");
            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable 매출구분()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select S_CODE as '코드', S_CODE_NM as '명칭' ");
            sb.AppendLine(" from [SM_FACTORY_COM].[dbo].T_S_CODE ");
            sb.AppendLine(" where L_CODE = '630' ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public int insertOrdGrid(
            string txt_ord_date
            , string txt_ord_num
            , String txt_input
            , string cmb_staff
            , string cmb_stor
            , string cmb_vat
               , String str계획일자
                            , String str계획번호
            , string txt_comment
            , string txt_cust_nm
            , string txt_cust_cd
            , DataGridView dgv
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {

                    ///null값 예외처리 
                    dgv.Rows[i].Cells["비고"].Value = dgv.Rows[i].Cells["비고"].Value ?? "";
                    dgv.Rows[i].Cells["매출구분"].Value = dgv.Rows[i].Cells["매출구분"].Value ?? "";

                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(ORD_NUM),0)+1 from  S_주문등록_H ");
                    sb.AppendLine("where ORD_DATE = '" + txt_ord_date + "' ");

                    sb.AppendLine("INSERT INTO S_주문등록_D( ");
                    sb.AppendLine("ORD_DATE ");
                    sb.AppendLine(",ORD_NUM ");
                    sb.AppendLine(",ORD_SEQ ");
                    sb.AppendLine(",ITEM_CD ");
                    sb.AppendLine(",ORD_QTY ");
                    sb.AppendLine(",ORD_PRICE ");
                    sb.AppendLine(",ORD_AMT ");
                    sb.AppendLine(",LAST_DATE ");
                    sb.AppendLine(",SALE_GB ");
                    sb.AppendLine(",COMMENT ");
                    sb.AppendLine(",INSERT_STAFF ");
                    sb.AppendLine(",INSERT_DATE ");
                    sb.AppendLine(") ");
                    sb.AppendLine(" VALUES(");
                    sb.AppendLine(" '" + txt_ord_date + "'");//ORD_DATE
                    sb.AppendLine("     ,@seq");
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["O_NO"].Value.ToString());//ORD_SEQ
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["O_ITEM_CD"].Value.ToString() + "'");//ITEM_CD
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", ""));//ORD_QTY
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", ""));//ORD_PRICE
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", ""));//ORD_AMT
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["최종매출일"].Value.ToString().Substring(0, 10) + "'");//LAST_DATE
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["매출구분"].Value.ToString() + "'");//SALE_GB
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["비고"].Value.ToString() + "'");//COMMONET
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'");//INSERT_STAFF
                    sb.AppendLine(" ,convert(varchar, getdate(), 120)");//INSERT_DATE
                    sb.AppendLine(" )");





                }

                sb.AppendLine("INSERT INTO S_주문등록_H( ");
                sb.AppendLine("ORD_DATE, ORD_NUM, ORD_INPUT, ORD_TIME,PLAN_DATE,PLAN_CD, CUST_CD, STAFF_CD,  STORAGE_CD, VAT_CD, COMMENT, INSERT_STAFF, INSERT_DATE,SALE_STATE) ");
                sb.AppendLine("VALUES('" + txt_ord_date + "',@seq ,'" + txt_input + "',  '" + DateTime.Now.ToString("HH:mm:ss") + "','" + str계획일자 + "'," + str계획번호 + ", '" + txt_cust_cd + "' ,'" + cmb_staff + "', '" + cmb_stor + "', '" + cmb_vat + "' , '" + txt_comment + "', '" + Common.p_strStaffNo + "',convert(varchar, getdate(), 120),'1') ");

                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_주문등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateOrdGrid(
            string txt_ord_date
            , string txt_ord_num
            , string txt입력방식
            , string cmb_staff
            , string cmb_stor
            , string cmb_vat
            , string cmb_delivery_staff
            , string cmb_전표상태
            , string txt_comment
            , string txt_cust_nm
            , string txt_cust_cd
            , DataGridView dgv
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select ");
                //sb.AppendLine("(select COUNT(*) from N_STAFF_CODE where STAFF_CD = '" + txt_user_cd + "' ) as cnt ");
                //sb.AppendLine(",(select COUNT(*) from N_STAFF_CODE where LOGIN_ID = '" + txt_login + "') as id ");
                ////sb.AppendLine(",(select COUNT(*) from N_STAFF_CODE where PW = 1) as pw ");
                //sb.AppendLine("from N_STAFF_CODE  ");



                SqlCommand sCommand;



                sb = new StringBuilder();
                sb.AppendLine("UPDATE S_주문등록_H SET ");
                //sb.AppendLine("ORD_TIME = @ORD_TIME  ");
                sb.AppendLine("CUST_CD = @CUST_CD , STAFF_CD = @STAFF_CD, DELIVERY_CD = @DELIVERY_CD ");
                sb.AppendLine(",  STORAGE_CD = @STORAGE_CD , VAT_CD = @VAT_CD ,COMMENT = @COMMENT ");
                sb.AppendLine(",  UPDATE_STAFF = @UPDATE_STAFF , SALE_STATE =@SALE_STATE, UPDATE_DATE = @UPDATE_DATE  ");
                sb.AppendLine(" where ORD_DATE = @ORD_DATE ");
                sb.AppendLine(" AND ORD_NUM = @ORD_NUM ");

                sCommand = new SqlCommand(sb.ToString());


                sCommand.Parameters.AddWithValue("@ORD_DATE", txt_ord_date);
                sCommand.Parameters.AddWithValue("@ORD_NUM", txt_ord_num);

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STAFF_CD", cmb_staff);
                sCommand.Parameters.AddWithValue("@DELIVERY_CD", cmb_delivery_staff);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);
                sCommand.Parameters.AddWithValue("@UPDATE_STAFF", Common.p_strStaffNo);
                sCommand.Parameters.AddWithValue("@UPDATE_DATE", DateTime.Now);
                sCommand.Parameters.AddWithValue("@SALE_STATE", cmb_전표상태);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }




        public DataTable fn_자재내역(string strLOT_NO)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.LOT_NO,B.RAW_MAT_NM,A.SOYO_AMT,A.TOTAL_AMT from F_WORK_INST_DETAIL as A ");
            sb.AppendLine(" inner join N_RAW_CODE as B on A.RAW_MAT_CD=B.RAW_MAT_CD ");
            sb.AppendLine(" where LOT_NO='" + strLOT_NO + "' ");


            sb.AppendLine(" union all ");

            sb.AppendLine(" select A.LOT_NO,B.ITEM_NM,A.SOYO_AMT,A.TOTAL_AMT from F_WORK_INST_HALF_DETAIL as A  ");
            sb.AppendLine("inner join N_ITEM_CODE as B on B.ITEM_CD=A.HALF_ITEM_CD ");

            sb.AppendLine(" where LOT_NO='" + strLOT_NO + "' ");


            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        public DataTable fn_주문_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(" ,A.ORD_NUM ");
            sb.AppendLine(" ,A.ORD_INPUT ");
            sb.AppendLine(" ,A.ORD_TIME");
            sb.AppendLine(" ,A.STAFF_CD ");
            sb.AppendLine(",C.STAFF_NM ");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,B.CUST_NM ");
            sb.AppendLine(" ,A.DELIVERY_CD");
            sb.AppendLine(" ,D.STAFF_NM as DELIVERY_NM");
            sb.AppendLine(" ,A.STORAGE_CD ");
            sb.AppendLine(" ,f.STORAGE_NM ");
            sb.AppendLine("  ,A.VAT_CD");
            sb.AppendLine("  ,G.S_CODE_NM as VAT_NM");
            sb.AppendLine("  ,A.COMMENT");
            sb.AppendLine("   ,A.SALE_STATE");
            sb.AppendLine("    ,H.S_CODE_NM as SALE_STATE_NM");
            sb.AppendLine("   from S_주문등록_H AS A");
            sb.AppendLine("  left join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine("  left join N_STAFF_CODE as C on C.STAFF_CD=A.STAFF_CD");
            sb.AppendLine(" left join N_STAFF_CODE as D on D.STAFF_CD=A.DELIVERY_CD ");
            sb.AppendLine("  left join N_STORAGE_CODE as  F on F.STORAGE_CD=A.STORAGE_CD");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as G on G.S_CODE=VAT_CD  and G.L_CODE='910'");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("  ");
            sb.AppendLine("  ");



            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }



        public int Delete_s_주문등록(
         string input_date
         , string input_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM S_주문등록_H  ");
                sb.AppendLine("WHERE ORD_DATE ='" + input_date + "'");
                sb.AppendLine("AND ORD_NUM = " + input_cd + "");

                sb.AppendLine("DELETE FROM S_주문등록_D  ");
                sb.AppendLine("WHERE ORD_DATE ='" + input_date + "'");
                sb.AppendLine("AND ORD_NUM = " + input_cd + "");
                Debug.WriteLine("주문등록 삭제");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_s_주문등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int insert배송등록(
           string delivery_date

           , string ord_input
           , string staff_cd
           , string cust_cd
           , string delivery_staff_cd
           , string sale_state
           , string comment
           , string insert_staff
           , string insert_mobile
           , DataGridView dgv
           , string 주문일자
           , string 주문번호
           , string 항목순번
           , string 주문시간
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(DELIVERY_CD),0)+1 from  S_배송등록_H ");
                sb.AppendLine("where DELIVERY_DATE = '" + delivery_date + "' ");
                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    ///null값 예외처리 
                    dgv.Rows[i].Cells["비고"].Value = dgv.Rows[i].Cells["비고"].Value ?? "";
                    dgv.Rows[i].Cells["매출구분"].Value = dgv.Rows[i].Cells["매출구분"].Value ?? "";


                    sb.AppendLine("INSERT INTO S_배송등록_D  ");
                    sb.AppendLine("(ORD_DATE, ORD_NUM, ORD_SEQ, ITEM_CD, ORD_QTY, ORD_PRICE, ORD_AMT, DELIVERY_QTY, LAST_DATE, SALE_GB, COMMENT, INSERT_STAFF, INSERT_DATE)  ");
                    sb.AppendLine("VALUES  ");
                    sb.AppendLine("('" + 주문일자 + "', '" + 주문번호 + "', '" + dgv.Rows[i].Cells["O_NO"].Value.ToString() + "'   ");

                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["O_ITEM_CD"].Value.ToString() + "'");//ITEM_CD
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", ""));//ORD_QTY
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", ""));//ORD_PRICE
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", ""));//ORD_AMT
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", ""));//ORD_QTY
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["최종매출일"].Value.ToString().Substring(0, 10) + "'");//LAST_DATE
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["매출구분"].Value.ToString() + "'");//SALE_GB
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["비고"].Value.ToString() + "'");//COMMONET
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'");//INSERT_STAFF
                    sb.AppendLine(" ,convert(varchar, getdate(), 120)");//INSERT_DATE
                    sb.AppendLine(" )");
                }
                sb.AppendLine("INSERT INTO S_배송등록_H(  ORD_DATE, ORD_NUM, ORD_TIME,  ");
                sb.AppendLine("DELIVERY_DATE, DELIVERY_CD, ORD_INPUT, STAFF_CD, CUST_CD, DELIVERY_STAFF_CD, SALE_STATE, COMMENT, INSERT_STAFF, INSERT_MOBIL, INSERT_DATE) ");
                sb.AppendLine("VALUES('" + 주문일자 + "', '" + 주문번호 + "', '" + 주문시간 + "' ,  ");
                sb.AppendLine(" '" + delivery_date + "', @seq , '" + ord_input + "', '" + staff_cd + "', '" + cust_cd + "', '" + delivery_staff_cd + "', '" + sale_state + "', '" + comment + "', ");
                sb.AppendLine(" '" + Common.p_strStaffNo + "', ");
                sb.AppendLine(" '" + Common.p_strStaffPhone + "' ,");
                sb.AppendLine("convert(varchar, getdate(), 120) ");
                sb.AppendLine(") ");

                sb.AppendLine("update S_주문등록_H set SALE_STATE='" + sale_state + "' where ORD_DATE = '" + 주문일자 + "' and ORD_NUM = '" + 주문번호 + "'  ");


                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_주문등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int update배송등록(
           string delivery_date
           , string delivery_cd
           , string ord_input
           , string staff_cd
           , string cust_cd
           , string delivery_staff_cd
           , string sale_state
           , string comment
           , string insert_staff
           , string insert_mobile
           , DataGridView dgv
           , byte[] pic
            , int img_size
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("UPDATE S_배송등록_D SET  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "',  ");
                sb.AppendLine("COMMENT = '" + comment + "'  ");
                sb.AppendLine("UPDATE S_배송등록_H SET  ");
                sb.AppendLine("DELIVERY_STAFF_CD = '" + delivery_staff_cd + "',  ");
                sb.AppendLine("SALE_STATE = '" + sale_state + "',  ");

                if (img_size > 0)
                {
                    sb.AppendLine("RECIPIENT_SIGN = @pic,  ");
                }

                sb.AppendLine("STATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("COMMENT = '" + comment + "',  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "'  ");

                sb.AppendLine(" where ORD_DATE = '" + delivery_date + "' ");
                sb.AppendLine(" AND ORD_NUM = '" + delivery_cd + "' ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);
                //sCommand = new SqlCommand(sb.ToString());


                //sCommand.Parameters.AddWithValue("@ORD_DATE", txt_ord_date);
                //sCommand.Parameters.AddWithValue("@ORD_NUM", txt_ord_num);

                //sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                //sCommand.Parameters.AddWithValue("@STAFF_CD", cmb_staff);
                //sCommand.Parameters.AddWithValue("@DELIVERY_CD", cmb_delivery_staff);
                //sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                //sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat);
                //sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);
                //sCommand.Parameters.AddWithValue("@UPDATE_STAFF", Common.p_strStaffNo);
                //sCommand.Parameters.AddWithValue("@UPDATE_DATE", DateTime.Now);

                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@pic", pic);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_배송_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT 배송H.ORD_DATE, 배송H.ORD_NUM, 배송H.ORD_INPUT, 배송H.ORD_TIME, 배송H.CUST_CD, 배송H.STAFF_CD, 배송H.DELIVERY_STAFF_CD, 배송H.DELIVERY_CD,배송H.RECIPIENT_SIGN, 배송H.DELIVERY_DATE, 배송H.RECIPIENT_SIGN, 배송H.STATE_DATE, 배송H.SALE_STATE, 배송H.INSERT_STAFF,등록자.STAFF_NM as 등록자, 배송H.INSERT_MOBIL   ,H.S_CODE_NM,    ");
            sb.AppendLine("배송H.COMMENT, 배송H.DELIVERY_DATE ,배송D.ORD_SEQ,배송D.ITEM_CD,배송D.ORD_QTY,배송D.ORD_PRICE ,배송D.ORD_AMT,배송D.DELIVERY_QTY,배송D.SALE_GB,배송D.COMMENT ,CUST_CODE.CUST_NM , 담당자.STAFF_NM , VAT_CD, 주문H.STORAGE_CD, STOR.STORAGE_NM, 배송직원.STAFF_NM as DELIVERY_STAFF_NM  ");
            sb.AppendLine("FROM S_배송등록_H 배송H INNER JOIN S_배송등록_D 배송D ON 배송H.ORD_DATE = 배송D.ORD_DATE AND 배송H.ORD_NUM = 배송D.ORD_NUM   ");
            sb.AppendLine("INNER JOIN  N_CUST_CODE CUST_CODE ON 배송H.CUST_CD = CUST_CODE.CUST_CD    ");
            sb.AppendLine("INNER JOIN S_주문등록_H 주문H ON 주문H.ORD_DATE = 배송H.ORD_DATE AND 주문H.ORD_NUM = 배송H.ORD_NUM  ");
            sb.AppendLine("INNER JOIN N_STORAGE_CODE STOR ON STOR.STORAGE_CD = 주문H.STORAGE_CD  ");
            sb.AppendLine("INNER JOIN N_STAFF_CODE 담당자 ON 배송H.STAFF_CD = 담당자.STAFF_CD   ");
            sb.AppendLine("INNER JOIN N_STAFF_CODE 등록자 ON 배송H.INSERT_STAFF = 등록자.STAFF_CD     ");
            sb.AppendLine("INNER JOIN N_STAFF_CODE 배송직원 ON 배송H.DELIVERY_STAFF_CD = 배송직원.STAFF_CD   ");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=배송H.SALE_STATE   and H.L_CODE='640'  ");
            sb.AppendLine(" where 1=1  ");

            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_배송주문_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(" ,A.ORD_NUM ");
            //   sb.AppendLine(" ,I.ORD_SEQ ");
            sb.AppendLine(" ,A.ORD_INPUT ");
            sb.AppendLine(" ,A.ORD_TIME");
            sb.AppendLine(" ,A.STAFF_CD ");
            sb.AppendLine(",C.STAFF_NM ");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,B.CUST_NM ");
            sb.AppendLine(" ,A.DELIVERY_CD");
            sb.AppendLine(" ,D.STAFF_NM as DELIVERY_NM");
            sb.AppendLine(" ,A.STORAGE_CD ");
            sb.AppendLine(" ,f.STORAGE_NM ");
            sb.AppendLine("  ,A.VAT_CD");
            sb.AppendLine("  ,G.S_CODE_NM as VAT_NM");
            sb.AppendLine("  ,A.COMMENT");
            sb.AppendLine("   ,A.SALE_STATE");
            sb.AppendLine("    ,H.S_CODE_NM as SALE_STATE_NM");
            sb.AppendLine("   from S_주문등록_H AS A");
            sb.AppendLine("  left join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine("  left join N_STAFF_CODE as C on C.STAFF_CD=A.STAFF_CD");
            sb.AppendLine(" left join N_STAFF_CODE as D on D.STAFF_CD=A.DELIVERY_CD ");
            sb.AppendLine("  left join N_STORAGE_CODE as  F on F.STORAGE_CD=A.STORAGE_CD");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as G on G.S_CODE=VAT_CD  and G.L_CODE='910'");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("    left join S_배송등록_D as Z on Z.ORD_DATE=A.ORD_DATE and Z.ORD_NUM=A.ORD_NUM");
            sb.AppendLine("    where SALE_STATE='1' and Z.ORD_DATE is null");
            //   sb.AppendLine("   inner join S_주문등록_D I on I.ORD_DATE = A.ORD_DATE WHERE A.DELIVERY_CD IS NULL ");
            //   sb.AppendLine("   group by A.ORD_DATE, A.ORD_NUM  ,I.ORD_SEQ ,A.ORD_INPUT  ,A.ORD_TIME ,A.STAFF_CD ,C.STAFF_NM  ,A.CUST_CD  ,B.CUST_NM  ,A.DELIVERY_CD ,D.STAFF_NM  ,A.STORAGE_CD  ,f.STORAGE_NM   ,A.VAT_CD  ,G.S_CODE_NM  ,A.COMMENT   ,A.SALE_STATE    ,H.S_CODE_NM  ");

            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_반품등록배송_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select A.ORD_DATE,A.ORD_NUM,A.CUST_CD,B.CUST_NM,A.DELIVERY_CD,A.DELIVERY_DATE,A.SALE_STATE,A.STATE_DATE,A.DELIVERY_STAFF_CD,A.STAFF_CD,배송.STAFF_NM as 배송사원 , 담당.STAFF_NM as 담당사원,H.S_CODE_NM as 전표상태 ,Z.RETURN_DATE");

            sb.AppendLine("  from S_배송등록_H as A");
            sb.AppendLine("  inner join N_CUST_CODE AS B on B.CUST_CD=A.CUST_CD ");
            sb.AppendLine("  left join N_STAFF_CODE as 배송 on 배송.STAFF_CD=A.DELIVERY_STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as 담당 on 담당.STAFF_CD=A.STAFF_CD");
            sb.AppendLine(" left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("left outer join S_반품등록_H as Z on Z.DELIVERY_DATE=A.DELIVERY_DATE and Z.DELIVERY_CD=A.DELIVERY_CD ");
            sb.AppendLine("  where H.S_CODE_NM='배송완료' and z.RETURN_DATE is null");

            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_등록반품_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select A.RETURN_DATE");
            sb.AppendLine(" ,A.RETURN_NUM");
            sb.AppendLine(",A.CUST_CD");
            sb.AppendLine(" ,B.CUST_NM");
            sb.AppendLine(",A.DELIVERY_DATE");
            sb.AppendLine(",A.DELIVERY_CD");
            sb.AppendLine(" ,A.STORAGE_CD");
            sb.AppendLine(" ,C.STORAGE_NM");
            sb.AppendLine(" ,A.COMMENT");
            sb.AppendLine(" ,A.STAFF_CD");
            sb.AppendLine(" ,A.RECALL_STAFF");
            sb.AppendLine(",A.RECALL_DATE");
            sb.AppendLine(" ,A.COMPLETE_STAFF");
            sb.AppendLine(" ,A.COMPLETE_DATE");
            sb.AppendLine(" ,A.SALE_STATE");
            sb.AppendLine(" ,A.STATE_DATE");
            sb.AppendLine(" ,H.S_CODE_NM");

            sb.AppendLine("  from S_반품등록_H AS A");
            sb.AppendLine("  inner join N_CUST_CODE AS B on B.CUST_CD=A.CUST_CD ");
            sb.AppendLine("  left join N_STORAGE_CODE as C on C.STORAGE_CD=A.STORAGE_CD");

            sb.AppendLine(" left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=SALE_STATE  and H.L_CODE='905'");
            sb.AppendLine(" where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int Delete_s_배송등록(
         string input_date
         , string input_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM S_배송등록_H  ");
                sb.AppendLine("WHERE ORD_DATE ='" + input_date + "'");
                sb.AppendLine("AND ORD_NUM = " + input_cd + "");

                sb.AppendLine("DELETE FROM S_배송등록_D  ");
                sb.AppendLine("WHERE ORD_DATE ='" + input_date + "'");
                sb.AppendLine("AND ORD_NUM = " + input_cd + "");

                sb.AppendLine("update S_주문등록_H set DELIVERY_CD = null ,SALE_STATE='1' ");
                sb.AppendLine("WHERE ORD_DATE ='" + input_date + "'");
                sb.AppendLine("AND ORD_NUM = " + input_cd + "");
                Debug.WriteLine("주문등록 삭제");
                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_s_주문등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public int insert반품등록(
           string return_date

           , string ord_input
           , string staff_cd
           , string cust_cd

           , string sale_state
           , string comment

           , DataGridView dgv
           , string 주문일자
           , string 주문번호
            , string 창고코드
, string 입력시간
           , string 배송일자
           , string 배송번호
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    ///null값 예외처리 
                    dgv.Rows[i].Cells["비고"].Value = dgv.Rows[i].Cells["비고"].Value ?? "";
                    dgv.Rows[i].Cells["매출구분"].Value = dgv.Rows[i].Cells["매출구분"].Value ?? "";

                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(DELIVERY_CD),0)+1 from  S_반품등록_H ");
                    sb.AppendLine("where RETURN_DATE = '" + return_date + "' ");

                    sb.AppendLine("INSERT INTO S_반품등록_D  ");
                    sb.AppendLine("(RETURN_DATE, RETURN_NUM, RETURN_SEQ, ITEM_CD, RETURN_QTY, RETURN_PRICE, RETURN_AMT, LAST_DATE, SALE_GB, COMMENT, INSERT_STAFF, INSERT_DATE)  ");
                    sb.AppendLine("VALUES  ");
                    sb.AppendLine("('" + return_date + "',@seq, '" + dgv.Rows[i].Cells["O_NO"].Value.ToString() + "'   ");

                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["O_ITEM_CD"].Value.ToString() + "'");//ITEM_CD
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", ""));//ORD_QTY
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", ""));//ORD_PRICE
                    sb.AppendLine(" ," + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", ""));//ORD_AMT
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["최종매출일"].Value.ToString().Substring(0, 10) + "'");//LAST_DATE
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["매출구분"].Value.ToString() + "'");//SALE_GB
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["비고"].Value.ToString() + "'");//COMMONET
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'");//INSERT_STAFF
                    sb.AppendLine(" ,convert(varchar, getdate(), 120)");//INSERT_DATE
                    sb.AppendLine(" )");
                }
                sb.AppendLine("INSERT INTO S_반품등록_H(RETURN_DATE, RETURN_NUM, RETURN_TIME, RETURN_INPUT, ");
                sb.AppendLine("DELIVERY_DATE, DELIVERY_CD,  STAFF_CD, CUST_CD, STORAGE_CD, SALE_STATE, COMMENT, INSERT_STAFF,  INSERT_DATE) ");
                sb.AppendLine("VALUES('" + return_date + "', @seq,'" + 입력시간 + "', '" + ord_input + "' ,'" + 배송일자 + "','" + 배송번호 + "', '" + staff_cd + "',");
                sb.AppendLine(" '" + cust_cd + "', '" + 창고코드 + "', '" + sale_state + "', '" + comment + "', ");
                sb.AppendLine(" '" + Common.p_strStaffNo + "', ");

                sb.AppendLine("convert(varchar, getdate(), 120) ");
                sb.AppendLine(") ");




                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_반품등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int update반품등록(
       string return_date
            , string retrun_cd
       , string ord_input
       , string staff_cd
       , string cust_cd

       , string sale_state
       , string comment

       , DataGridView dgv
       , string 회수일자
       , string 회수사원코드
        , string 창고코드
, string 입력시간
       , string 완료일자
       , string 완료사원코드
       )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {

                }

                sb.AppendLine("UPDATE S_배송등록_D SET  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "',  ");
                sb.AppendLine("COMMENT = '" + comment + "'  ");
                sb.AppendLine("UPDATE S_반품등록_H SET  ");

                sb.AppendLine("SALE_STATE = '" + sale_state + "',  ");
                sb.AppendLine("STORAGE_CD = '" + 창고코드 + "',  ");

                sb.AppendLine("RECALL_STAFF = '" + 회수사원코드 + "',  ");
                sb.AppendLine("RECALL_DATE = '" + 회수일자 + "',  ");

                sb.AppendLine("COMPLETE_STAFF = '" + 완료사원코드 + "',  ");
                sb.AppendLine("COMPLETE_DATE = '" + 완료일자 + "',  ");


                sb.AppendLine("STATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("COMMENT = '" + comment + "',  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "'  ");

                sb.AppendLine(" where RETURN_DATE = '" + return_date + "' ");
                sb.AppendLine(" AND RETURN_NUM = '" + retrun_cd + "' ");


                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_반품등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_반품디테일_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select A.RETURN_DATE");
            sb.AppendLine("  ,A.RETURN_NUM");
            sb.AppendLine("  ,A.RETURN_DATE");
            sb.AppendLine("  ,A.RETURN_SEQ");
            sb.AppendLine("  ,A.ITEM_CD");
            sb.AppendLine("  ,A.RETURN_QTY");
            sb.AppendLine("  ,A.RETURN_PRICE");
            sb.AppendLine("  ,A.RETURN_AMT");
            sb.AppendLine("  ,A.LAST_DATE");
            sb.AppendLine("  ,A.SALE_GB");
            sb.AppendLine("  ,A.SALE_GB");
            sb.AppendLine("    ,B.ITEM_NM");
            sb.AppendLine("      ,B.SPEC");
            sb.AppendLine("   ,B.UNIT_CD");
            sb.AppendLine("   ,B.UNIT_CD");
            sb.AppendLine("   ,C.UNIT_NM");
            sb.AppendLine("    ,A.COMMENT");


            sb.AppendLine("  from S_반품등록_D AS A");
            sb.AppendLine("    inner join N_ITEM_CODE AS B on B.ITEM_CD=A.ITEM_CD  ");
            sb.AppendLine("     inner join N_UNIT_CODE AS C on C.UNIT_CD=B.UNIT_CD ");
            sb.AppendLine(condition);





            //  sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public int 반품등록삭제(string RETURN_DATE, string RETURN_NUM)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from S_반품등록_D ");
                sb.AppendLine("    where RETURN_DATE = @RETURN_DATE ");
                sb.AppendLine("    and RETURN_NUM = @RETURN_NUM ");


                sb.AppendLine("delete from S_반품등록_H ");
                sb.AppendLine("    where RETURN_DATE = @RETURN_DATE ");
                sb.AppendLine("    and RETURN_NUM = @RETURN_NUM ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RETURN_DATE", RETURN_DATE);
                sCommand.Parameters.AddWithValue("@RETURN_NUM", RETURN_NUM);




                int qResult = wAdo.SqlCommandEtc(sCommand, "반품등록삭제");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public DataTable 매출_제품리스트(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.SALE_DATE");
            sb.AppendLine("  ,A.SALE_NUM");
            sb.AppendLine("  ,A.SALE_SEQ");

            sb.AppendLine("  ,A.ITEM_CD");
            sb.AppendLine("  ,A.SALE_QTY");
            sb.AppendLine("  ,A.SALE_PRICE");

            sb.AppendLine("  ,A.SALE_AMT");
            sb.AppendLine("  ,A.SALE_GB");
            sb.AppendLine("  ,A.VAT_GB");
            sb.AppendLine("  ,A.TAX_GB");

            sb.AppendLine("    ,B.ITEM_NM");
            sb.AppendLine("      ,B.SPEC");
            sb.AppendLine("   ,B.UNIT_CD");
            sb.AppendLine("   ,A.LAST_DATE");

            sb.AppendLine("   ,C.UNIT_NM");
            sb.AppendLine("    ,A.COMMENT");
            sb.AppendLine("   ,A.ORD_DATE");
            sb.AppendLine("    ,A.ORD_NUM");

            sb.AppendLine("  from S_매출등록_D AS A");
            sb.AppendLine("    inner join N_ITEM_CODE AS B on B.ITEM_CD=A.ITEM_CD  ");
            sb.AppendLine("     inner join N_UNIT_CODE AS C on C.UNIT_CD=B.UNIT_CD ");

            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_매출주문_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(" ,A.ORD_NUM ");
            sb.AppendLine(" ,A.ORD_INPUT ");
            sb.AppendLine(" ,A.ORD_TIME");
            sb.AppendLine(" ,A.STAFF_CD ");
            sb.AppendLine(",C.STAFF_NM ");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,B.CUST_NM ");
            sb.AppendLine(" ,Z.DELIVERY_CD");
            sb.AppendLine(" ,Z.DELIVERY_DATE");
            sb.AppendLine(" ,Z.DELIVERY_STAFF_CD");
            sb.AppendLine(" ,D.STAFF_NM as DELIVERY_NM");
            sb.AppendLine(" ,A.STORAGE_CD ");
            sb.AppendLine(" ,f.STORAGE_NM ");
            sb.AppendLine("  ,A.VAT_CD");
            sb.AppendLine("  ,G.S_CODE_NM as VAT_NM");
            sb.AppendLine("  ,A.COMMENT");
            sb.AppendLine("  ,Z.STATE_DATE");
            sb.AppendLine("  ,A.SALE_STATE");

            sb.AppendLine("    ,H.S_CODE_NM as SALE_STATE_NM");
            sb.AppendLine("   from S_주문등록_H AS A");
            sb.AppendLine("  left join S_배송등록_H as Z on Z.ORD_DATE=A.ORD_DATE and Z.ORD_NUM=A.ORD_NUM ");

            sb.AppendLine("  left join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine("  left join N_STAFF_CODE as C on C.STAFF_CD=A.STAFF_CD");
            sb.AppendLine(" left join N_STAFF_CODE as D on D.STAFF_CD=Z.DELIVERY_STAFF_CD ");
            sb.AppendLine("  left join N_STORAGE_CODE as  F on F.STORAGE_CD=A.STORAGE_CD");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as G on G.S_CODE=VAT_CD  and G.L_CODE='910'");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=A.SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("    left join S_매출등록_H as X on X.ORDER_DATE=A.ORD_DATE and X.ORDER_NUM=A.ORD_NUM ");

            sb.AppendLine("    where 1=1");
            sb.AppendLine("   and X.ORDER_DATE is null ");



            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public int insert매출등록(
     String 매출일자
       , String 거래처코드
            , String 담당사원

            , String 창고
            , String 부가세
            , String 비고
            , String 계산서발행여부
            , String 발생일자
            , String 전표상태
            , string 주문일자
            , string 주문번호

, string 배송일자
            , string 배송번호


            , DataGridView dgv
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    ///null값 예외처리 
                    dgv.Rows[i].Cells["비고"].Value = dgv.Rows[i].Cells["비고"].Value ?? "";
                    dgv.Rows[i].Cells["매출구분"].Value = dgv.Rows[i].Cells["매출구분"].Value ?? "";



                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(SALE_NUM),0)+1 from  S_매출등록_H ");
                    sb.AppendLine("where SALE_DATE = '" + 매출일자 + "' ");
                    sb.AppendLine("INSERT INTO S_매출등록_D  ");
                    sb.AppendLine("(SALE_DATE, SALE_NUM, SALE_SEQ, ITEM_CD, SALE_QTY, SALE_PRICE, SALE_AMT, LAST_DATE, SALE_GB, COMMENT, ORD_DATE, ORD_NUM,VAT_GB,TAX_GB,INSERT_STAFF, INSERT_DATE)  ");
                    sb.AppendLine("VALUES  ");
                    sb.AppendLine("('" + 매출일자 + "',@seq, '" + dgv.Rows[i].Cells["O_NO"].Value.ToString() + "'   ");
                    sb.AppendLine(",'" + dgv.Rows[i].Cells["O_ITEM_CD"].Value.ToString() + "'," + dgv.Rows[i].Cells["수량"].Value.ToString().Replace(",", "") + ", " + dgv.Rows[i].Cells["단가"].Value.ToString().Replace(",", "") + "  ");
                    sb.AppendLine("," + dgv.Rows[i].Cells["금액"].Value.ToString().Replace(",", "") + ",'" + dgv.Rows[i].Cells["최종매출일"].Value.ToString().Substring(0, 10) + "', '" + dgv.Rows[i].Cells["매출구분"].Value.ToString() + "'   ");
                    sb.AppendLine(",'" + dgv.Rows[i].Cells["비고"].Value.ToString() + "','" + dgv.Rows[i].Cells["O_주문일자"].Value.ToString() + "', '" + dgv.Rows[i].Cells["O_주문번호"].Value.ToString() + "'   ");
                    sb.AppendLine(",'" + dgv.Rows[i].Cells["O_부가세"].Value.ToString() + "','" + dgv.Rows[i].Cells["O_과세"].Value.ToString() + "'");
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'");//INSERT_STAFF
                    sb.AppendLine(" ,convert(varchar, getdate(), 120)");//INSERT_DATE
                    sb.AppendLine(" )");

                }
                sb.AppendLine("INSERT INTO S_매출등록_H(SALE_DATE, SALE_NUM, SALE_TIME, SALE_INPUT, ");
                sb.AppendLine("   CUST_CD, STAFF_CD,STORAGE_CD, BILL_YN,BILL_DATE,SALE_STATE, COMMENT, INSERT_STAFF,  ORDER_DATE,ORDER_NUM,DELIVERY_DATE,DELIVERY_CD,VAT_CD,INSERT_DATE) ");
                sb.AppendLine("VALUES('" + 매출일자 + "', @seq,'" + DateTime.Now.ToString("HHmmss") + "', '" + Common.p_HW + "'");
                sb.AppendLine(", '" + 거래처코드 + "', '" + 담당사원 + "','" + 창고 + "', '" + 계산서발행여부 + "','" + 발생일자 + "','" + 전표상태 + "', '" + 비고 + "', ");
                sb.AppendLine(" '" + Common.p_strStaffNo + "', ");
                sb.AppendLine(" '" + 주문일자 + "', ");
                sb.AppendLine(" '" + 주문번호 + "', ");

                sb.AppendLine(" '" + 배송일자 + "', ");
                sb.AppendLine(" '" + 배송번호 + "', ");
                sb.AppendLine(" '" + 부가세 + "', ");

                sb.AppendLine("convert(varchar, getdate(), 120) ");
                sb.AppendLine(") ");





                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_반품등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable 부가세구분()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select '포함'as 명칭,'1' as 코드 ");
            sb.AppendLine(" union all  ");
            sb.AppendLine(" select '미포함'as 명칭,'2' as 코드 ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable 과세구분()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select '과세'as 명칭,'1' as 코드 ");
            sb.AppendLine(" union all  ");
            sb.AppendLine(" select '면세'as 명칭,'2' as 코드 ");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable 매출리스트(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.SALE_DATE ");
            sb.AppendLine(",A.ORDER_NUM ");
            sb.AppendLine(",A.SALE_NUM ");
            sb.AppendLine(",A.CUST_CD ");
            sb.AppendLine(",B.CUST_NM ");
            sb.AppendLine(",A.STAFF_CD");
            sb.AppendLine(",A.STORAGE_CD");
            sb.AppendLine(",A.BILL_YN ");
            sb.AppendLine(",A.BILL_DATE ");
            sb.AppendLine(",isnull('1',A.VAT_CD) as VAT_CD ");
            sb.AppendLine(",A.ORDER_DATE");
            sb.AppendLine(",A.ORDER_NUM ");
            sb.AppendLine(",A.SALE_STATE");
            sb.AppendLine(",A.COMMENT");
            sb.AppendLine("from S_매출등록_H  as A");
            sb.AppendLine(" left outer join N_CUST_CODE b on a.CUST_CD = b.CUST_CD   ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }


        public int update매출등록(
       string 매출일자
            , string 매출번호

       , string staff_cd
       , string cust_cd
            , string 창고코드
            , String 부가세
       , string sale_state
       , string comment

       , DataGridView dgv


, string 입력시간
    , string 계산서발행여부
            , string 발행일자
       )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {



                    sb.AppendLine("UPDATE S_매출등록_D SET  ");
                    sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                    sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "',  ");
                    sb.AppendLine("VAT_GB = '" + dgv.Rows[i].Cells["O_부가세"].Value.ToString() + "',  ");
                    sb.AppendLine("TAX_GB = '" + dgv.Rows[i].Cells["O_과세"].Value.ToString() + "',  ");
                    sb.AppendLine("COMMENT = '" + comment + "'  ");

                }

                ////////////////////
                sb.AppendLine("UPDATE S_매출등록_H SET  ");

                sb.AppendLine("SALE_STATE = '" + sale_state + "',  ");
                sb.AppendLine("STORAGE_CD = '" + 창고코드 + "',  ");
                sb.AppendLine("SALE_INPUT = '" + Common.p_HW + "',  ");
                sb.AppendLine("CUST_CD = '" + cust_cd + "',  ");
                sb.AppendLine("STAFF_CD = '" + staff_cd + "',  ");





                sb.AppendLine("COMMENT = '" + comment + "',  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "'  ");

                sb.AppendLine(" where SALE_DATE = '" + 매출일자 + "' ");
                sb.AppendLine(" AND SALE_NUM = '" + 매출번호 + "' ");


                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_반품등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int 매출등록삭제(string SALE_DATE, string SALE_NUM)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from S_매출등록_D ");
                sb.AppendLine("    where SALE_DATE = @RETURN_DATE ");
                sb.AppendLine("    and SALE_NUM = @RETURN_NUM ");


                sb.AppendLine("delete from S_매출등록_H ");
                sb.AppendLine("    where SALE_DATE = @RETURN_DATE ");
                sb.AppendLine("    and SALE_NUM = @RETURN_NUM ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RETURN_DATE", SALE_DATE);
                sCommand.Parameters.AddWithValue("@RETURN_NUM", SALE_NUM);




                int qResult = wAdo.SqlCommandEtc(sCommand, "매출등록삭제");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }







        public DataTable 화인원자재이력관리_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine("A.ORD_DATE as 주문일자");
            sb.AppendLine(",A.ORD_NUM as 주문번호");
            sb.AppendLine(",A.STAFF_CD as 주문사원코드");
            sb.AppendLine(",AX.STAFF_NM as 주문사원");
            sb.AppendLine(",AD.ORD_AMT as 주문단가");
            sb.AppendLine(",AD.ORD_QTY * ZZ.TOTAL_AMT as 주문수량");
            sb.AppendLine(",AD.ORD_PRICE  as 주문금액");

            sb.AppendLine(",B.DELIVERY_DATE as 배송일자");
            sb.AppendLine(",B.DELIVERY_CD as 배송번호");
            sb.AppendLine(",B.STAFF_CD  as 배송담당사원코드");
            sb.AppendLine(",B.DELIVERY_STAFF_CD  as 배송사원코드");
            sb.AppendLine(",BX.STAFF_NM as 배송사원");
            sb.AppendLine(",BD.DELIVERY_QTY * ZZ.TOTAL_AMT as 배송수량");
            sb.AppendLine(",B.STATE_DATE as 배송완료일자");

            sb.AppendLine(",C.RETURN_DATE  as 반품일자");
            sb.AppendLine(",C.RETURN_NUM as 반품번호");
            sb.AppendLine(",C.STAFF_CD as  반품사원코드");
            sb.AppendLine(",FX.STAFF_NM as 반품사원");
            sb.AppendLine(",CD.RETURN_QTY * ZZ.TOTAL_AMT as 반품수량");
            sb.AppendLine(",CD.RETURN_PRICE as 반품단가");
            sb.AppendLine(",CD.RETURN_AMT as 반품금액");


            sb.AppendLine(",D.SALE_DATE as 매출일자");
            sb.AppendLine(",D.SALE_NUM as 매출번호");
            sb.AppendLine(",D.STAFF_CD as 매출사원코드");
            sb.AppendLine(",DD.SALE_QTY * ZZ.TOTAL_AMT as 매출수량");
            sb.AppendLine(",DD.SALE_PRICE as 매출단가");
            sb.AppendLine(",DD.SALE_AMT as 매출금액");
            sb.AppendLine(",GX.STAFF_NM as 매출사원 ");

            sb.AppendLine(",A.PLAN_DATE as 계획일자");
            sb.AppendLine(",A.PLAN_CD as 계획번호");

            sb.AppendLine(",C.RECALL_DATE as 회수일자 ");
            sb.AppendLine(",CX.STAFF_NM as 회수사원");

            sb.AppendLine(",C.COMPLETE_DATE as 완료일자");
            sb.AppendLine(",DX.STAFF_NM as 완료사원");


            sb.AppendLine(",ZZZ.SPEC");
            sb.AppendLine(",W.CUST_NM");

            sb.AppendLine(", ZZ.RAW_MAT_CD");
            sb.AppendLine(",ZZZ.RAW_MAT_NM");
            sb.AppendLine(",ZZ.TOTAL_AMT");





            sb.AppendLine("from S_주문등록_H AS A ");
            sb.AppendLine("left join S_주문등록_D as AD on AD.ORD_DATE=A.ORD_DATE and AD.ORD_NUM=A.ORD_NUM  ");
            sb.AppendLine("left join S_배송등록_H AS B on B.ORD_DATE=A.ORD_DATE and B.ORD_NUM=A.ORD_NUM  ");
            sb.AppendLine("left join S_배송등록_D AS BD on BD.ORD_DATE=B.ORD_DATE and BD.ORD_NUM=B.ORD_NUM  ");
            sb.AppendLine("left join S_반품등록_H as C on C.DELIVERY_DATE=B.DELIVERY_DATE and C.DELIVERY_CD=B.DELIVERY_CD  ");
            sb.AppendLine("left join S_반품등록_D AS CD on CD.RETURN_DATE=C.RETURN_DATE and CD.RETURN_NUM=C.RETURN_NUM  ");
            sb.AppendLine("left join S_매출등록_H AS D on D.ORDER_DATE=A.ORD_DATE and D.ORDER_NUM =A.ORD_NUM ");
            sb.AppendLine("left join S_매출등록_D AS DD on DD.SALE_DATE=D.SALE_DATE and DD.SALE_NUM=D.SALE_NUM ");
            //n
            sb.AppendLine("left join  N_ITEM_CODE as Z on Z.ITEM_CD=AD.ITEM_CD");
            sb.AppendLine("left join N_STAFF_CODE as AX on A.STAFF_CD = AX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as BX on B.DELIVERY_STAFF_CD = BX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as CX on C.RECALL_STAFF = CX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as DX on C.COMPLETE_STAFF = DX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as FX on C.STAFF_CD = FX.STAFF_CD");
            sb.AppendLine("left join N_STAFF_CODE as GX on D.STAFF_CD = GX.STAFF_CD");
            sb.AppendLine("left join N_CUST_CODE as W on W.CUST_CD=A.CUST_CD");

            sb.AppendLine("left join N_ITEM_COMP as ZZ on ZZ.ITEM_CD=AD.ITEM_CD");
            sb.AppendLine("left join N_RAW_CODE as ZZZ on ZZ.RAW_MAT_CD=ZZZ.RAW_MAT_CD");
            sb.AppendLine("where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }




        public DataTable 화인반제품이력관리_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine("A.ORD_DATE as 주문일자");
            sb.AppendLine(",A.ORD_NUM as 주문번호");
            sb.AppendLine(",A.STAFF_CD as 주문사원코드");
            sb.AppendLine(",AX.STAFF_NM as 주문사원");
            sb.AppendLine(",AD.ORD_AMT as 주문단가");
            sb.AppendLine(",AD.ORD_QTY * ZZ.TOTAL_AMT as 주문수량");
            sb.AppendLine(",AD.ORD_PRICE  as 주문금액");

            sb.AppendLine(",B.DELIVERY_DATE as 배송일자");
            sb.AppendLine(",B.DELIVERY_CD as 배송번호");
            sb.AppendLine(",B.STAFF_CD  as 배송담당사원코드");
            sb.AppendLine(",B.DELIVERY_STAFF_CD  as 배송사원코드");
            sb.AppendLine(",BX.STAFF_NM as 배송사원");
            sb.AppendLine(",BD.DELIVERY_QTY * ZZ.TOTAL_AMT as 배송수량");
            sb.AppendLine(",B.STATE_DATE as 배송완료일자");

            sb.AppendLine(",C.RETURN_DATE  as 반품일자");
            sb.AppendLine(",C.RETURN_NUM as 반품번호");
            sb.AppendLine(",C.STAFF_CD as  반품사원코드");
            sb.AppendLine(",FX.STAFF_NM as 반품사원");
            sb.AppendLine(",CD.RETURN_QTY * ZZ.TOTAL_AMT as 반품수량");
            sb.AppendLine(",CD.RETURN_PRICE as 반품단가");
            sb.AppendLine(",CD.RETURN_AMT as 반품금액");


            sb.AppendLine(",D.SALE_DATE as 매출일자");
            sb.AppendLine(",D.SALE_NUM as 매출번호");
            sb.AppendLine(",D.STAFF_CD as 매출사원코드");
            sb.AppendLine(",DD.SALE_QTY * ZZ.TOTAL_AMT as 매출수량");
            sb.AppendLine(",DD.SALE_PRICE as 매출단가");
            sb.AppendLine(",DD.SALE_AMT as 매출금액");
            sb.AppendLine(",GX.STAFF_NM as 매출사원 ");

            sb.AppendLine(",A.PLAN_DATE as 계획일자");
            sb.AppendLine(",A.PLAN_CD as 계획번호");

            sb.AppendLine(",C.RECALL_DATE as 회수일자 ");
            sb.AppendLine(",CX.STAFF_NM as 회수사원");

            sb.AppendLine(",C.COMPLETE_DATE as 완료일자");
            sb.AppendLine(",DX.STAFF_NM as 완료사원");


            sb.AppendLine(",ZZZ.SPEC");
            sb.AppendLine(",W.CUST_NM");

            sb.AppendLine(", ZZ.HALF_ITEM_CD");
            sb.AppendLine(",ZZZ.ITEM_NM");
            sb.AppendLine(",ZZ.TOTAL_AMT");





            sb.AppendLine("from S_주문등록_H AS A ");

            sb.AppendLine("where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }
        /// <summary>
        /// frm 매출집계
        /// frm 외상매출현황 
        /// 
        /// </summary>
        /// <param name="condition"> where 절  날짜와 구분 조건을 준다 . frm외상매출현황일때는 sale_GB= 3  frm 매출집계일때는 sale_GB=2</param>
        /// <returns> 매출일자, 매출번호 , 아이템코드, 아이템이름 , 매출량,매출단가.,매출금액.,매출구분.거래처코드,거래처</returns>
        public DataTable 매출집계list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine(" A.SALE_DATE ");
            sb.AppendLine(", A.SALE_NUM ");
            sb.AppendLine(",A.ITEM_CD  ");
            sb.AppendLine(",convert(int,A.SALE_QTY) as SALE_QTY ");
            sb.AppendLine(",convert(int,A.SALE_PRICE) as SALE_PRICE ");
            sb.AppendLine(",convert(int,A.SALE_AMT) as SALE_AMT");
            sb.AppendLine(",A.SALE_GB");
            sb.AppendLine(",C.CUST_NM");
            sb.AppendLine(",D.ITEM_NM");


            sb.AppendLine(",H.S_CODE_NM as 매출구분");
            sb.AppendLine(" into #매출등록");
            sb.AppendLine("  from S_매출등록_D AS A");

            sb.AppendLine("   inner join S_매출등록_H AS B on B.SALE_DATE=A.SALE_DATE and B.SALE_NUM=A.SALE_NUM");
            sb.AppendLine("  left join N_CUST_CODE as C on C.CUST_CD =B.CUST_CD ");
            sb.AppendLine("   left join N_ITEM_CODE as D on D.ITEM_CD=A.ITEM_CD");
            sb.AppendLine(" left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=A.SALE_GB   and H.L_CODE='630'");


            sb.AppendLine("  where 1=1");
            sb.AppendLine(condition);

            sb.AppendLine("   select * from #매출등록");
            sb.AppendLine("   union all ");
            sb.AppendLine("  select A.SALE_DATE , '99999','' ,SUM(A.sale_QTY),SUM(A.SALE_PRICE),SUM(A.SALE_AMT),'','','',''  from #매출등록 as A ");
            sb.AppendLine("   group by A.SALE_DATE  ");
            sb.AppendLine("   order by SALE_DATE,SALE_NUM ");






            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable 매출실적list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");
            sb.AppendLine(" A.SALE_DATE ");
            sb.AppendLine(", A.SALE_NUM ");
            sb.AppendLine(",A.ITEM_CD  ");
            sb.AppendLine(",A.SALE_QTY ");
            sb.AppendLine(",A.SALE_PRICE  ");
            sb.AppendLine(",A.SALE_AMT");
            sb.AppendLine(",A.SALE_GB");
            sb.AppendLine(",C.CUST_NM");
            sb.AppendLine(",D.ITEM_NM");
            sb.AppendLine(",E.STAFF_NM");
            sb.AppendLine(",B.STAFF_CD");


            sb.AppendLine(",H.S_CODE_NM as 매출구분");
            sb.AppendLine(" into #매출등록");
            sb.AppendLine("  from S_매출등록_D AS A");

            sb.AppendLine("   inner join S_매출등록_H AS B on B.SALE_DATE=A.SALE_DATE and B.SALE_NUM=A.SALE_NUM");
            sb.AppendLine("  left join N_CUST_CODE as C on C.CUST_CD =B.CUST_CD ");
            sb.AppendLine("   left join N_ITEM_CODE as D on D.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("     left join N_STAFF_CODE as E on E.STAFF_CD=B.STAFF_CD");
            sb.AppendLine(" left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=A.SALE_GB   and H.L_CODE='630'");


            sb.AppendLine("  where 1=1");
            sb.AppendLine(condition);

            sb.AppendLine("   select * from #매출등록");
            sb.AppendLine("   union all ");
            sb.AppendLine("  select A.SALE_DATE , '88888','' ,SUM(A.sale_QTY),SUM(A.SALE_PRICE),SUM(A.SALE_AMT),'','','',STAFF_NM ,'','' from #매출등록 as A ");
            sb.AppendLine("   group by STAFF_NM,SALE_DATE  ");

            sb.AppendLine("   union all ");
            sb.AppendLine("  select '9999-99-99' , '99999','' ,SUM(A.sale_QTY),SUM(A.SALE_PRICE),SUM(A.SALE_AMT),'','','',STAFF_NM ,'','' from #매출등록 as A ");
            sb.AppendLine("   group by STAFF_NM ");
            sb.AppendLine("   order by STAFF_NM,sale_DATE,SALE_NUM  ");






            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        /// <summary>
        /// frm출하정보조회에서 사용하는 쿼리   배송등록 헤더와 배송등록 디테일을 조인한 쿼리 
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>

        public DataTable 출하정보조회LIST(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT  ");

            sb.AppendLine("A.ORD_DATE as 주문일자");
            sb.AppendLine(",A.ORD_NUM as 주문번호");
            sb.AppendLine(",A.CUST_CD ");
            sb.AppendLine(",D.CUST_NM");
            sb.AppendLine(",A.STAFF_CD");
            sb.AppendLine(",C.STAFF_NM");
            sb.AppendLine(",A.DELIVERY_DATE as 배송일자");
            sb.AppendLine(",A.DELIVERY_CD as 배송번호");
            sb.AppendLine(", A.STATE_DATE as 배송상태변경일자");
            sb.AppendLine(",H.S_CODE_NM  as 배송상태");
            sb.AppendLine(",G.STAFF_NM as 배송사원");
            sb.AppendLine(",A.DELIVERY_STAFF_CD");
            sb.AppendLine(",B.ITEM_CD");
            sb.AppendLine(",f.SPEC");
            sb.AppendLine(",F.ITEM_NM");
            sb.AppendLine(",convert(int,B.ORD_QTY) as ORD_QTY");
            sb.AppendLine(",convert(int,B.ORD_PRICE) as  ORD_PRICE");
            sb.AppendLine(",CONVERT(INT,B.ORD_AMT) AS ORD_AMT");
            sb.AppendLine(",CONVERT(INT,B.DELIVERY_QTY) AS DELIVERY_QTY");
            sb.AppendLine("from S_배송등록_H AS A ");
            sb.AppendLine("inner join S_배송등록_D AS B on B.ORD_DATE=A.ORD_DATE and B.ORD_NUM=A.ORD_NUM");
            sb.AppendLine("inner join N_STAFF_CODE as C on C.STAFF_CD = A.STAFF_CD");
            sb.AppendLine("inner join N_CUST_CODE as D on D.CUST_CD=A.CUST_CD");
            sb.AppendLine("INNER JOIN N_ITEM_CODE AS f ON f.ITEM_CD =B.ITEM_CD");
            sb.AppendLine("inner join N_STAFF_CODE as G on G.STAFF_CD = A.DELIVERY_STAFF_CD ");
            sb.AppendLine("    left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=A.SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_이슈주문_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.ORD_DATE ");
            sb.AppendLine(" ,A.ORD_NUM ");
            sb.AppendLine(" ,A.ORD_INPUT ");
            sb.AppendLine(" ,A.ORD_TIME");
            sb.AppendLine(" ,A.STAFF_CD ");
            sb.AppendLine(",C.STAFF_NM ");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,B.CUST_NM ");
            sb.AppendLine(" ,Z.DELIVERY_CD");
            sb.AppendLine(" ,Z.DELIVERY_DATE");
            sb.AppendLine(" ,Z.DELIVERY_STAFF_CD");
            sb.AppendLine(" ,D.STAFF_NM as DELIVERY_NM");
            sb.AppendLine(" ,A.STORAGE_CD ");
            sb.AppendLine(" ,f.STORAGE_NM ");
            sb.AppendLine("  ,A.VAT_CD");
            sb.AppendLine("  ,G.S_CODE_NM as VAT_NM");
            sb.AppendLine("  ,A.COMMENT");
            sb.AppendLine("  ,Z.STATE_DATE");
            sb.AppendLine("  ,A.SALE_STATE");

            sb.AppendLine("    ,H.S_CODE_NM as SALE_STATE_NM");
            sb.AppendLine("   from S_주문등록_H AS A");
            sb.AppendLine("  left join S_배송등록_H as Z on Z.ORD_DATE=A.ORD_DATE and Z.ORD_NUM=A.ORD_NUM ");

            sb.AppendLine("  left join N_CUST_CODE as B on B.CUST_CD=A.CUST_CD");
            sb.AppendLine("  left join N_STAFF_CODE as C on C.STAFF_CD=A.STAFF_CD");
            sb.AppendLine(" left join N_STAFF_CODE as D on D.STAFF_CD=Z.DELIVERY_STAFF_CD ");
            sb.AppendLine("  left join N_STORAGE_CODE as  F on F.STORAGE_CD=A.STORAGE_CD");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as G on G.S_CODE=VAT_CD  and G.L_CODE='910'");
            sb.AppendLine("  left join [SM_FACTORY_COM].[dbo].[T_S_CODE] as H on H.S_CODE=A.SALE_STATE  and H.L_CODE='640'");
            sb.AppendLine("     left join s_이슈등록 as X on X.ORD_DATE=A.ORD_DATE and X.ORD_NUM=A.ORD_NUM  ");

            sb.AppendLine("    where 1=1");
            sb.AppendLine("   and X.ORD_DATE is null ");



            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public int insert이슈등록(
   String 이슈일자
     , String 거래처코드
          , String 담당사원


          , String 상담사원


          , String 비고
          , String 이슈내역
            , string 전화번호
          , String 전표상태

          , String 발생일자
          , string 주문일자
          , string 주문번호





       )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();


                sb.AppendLine("declare @seq int");
                sb.AppendLine("select @seq =ISNULL(MAX(ISSUE_NUM),0)+1 from  S_이슈등록");
                sb.AppendLine("where ISSUE_DATE = '" + 이슈일자 + "'");


                sb.AppendLine("INSERT INTO S_이슈등록(ISSUE_DATE, ISSUE_NUM, ISSUE_TIME, ISSUE_INPUT ");
                sb.AppendLine(",ORD_DATE");
                sb.AppendLine(",ORD_NUM");
                sb.AppendLine("   ,CUST_CD, STAFF_CD,ISSUE_STAFF_CD, ISSUE_CD,ISSUE_MEMO,REQ_DATE,TEL_NO, COMMENT, INSERT_STAFF,INSERT_DATE) ");
                sb.AppendLine("VALUES('" + 이슈일자 + "', @seq,'" + DateTime.Now.ToString("HHmmss") + "', '" + Common.p_HW + "'");
                sb.AppendLine(" ,'" + 주문일자 + "', ");
                sb.AppendLine(" '" + 주문번호 + "', ");
                sb.AppendLine(" '" + 거래처코드 + "', '" + 담당사원 + "','" + 상담사원 + "', '" + 전표상태 + "','" + 이슈내역 + "','" + 발생일자 + "','" + 전화번호 + "', '" + 비고 + "', ");
                sb.AppendLine(" '" + Common.p_strStaffNo + "', ");





                sb.AppendLine("convert(varchar, getdate(), 120) ");
                sb.AppendLine(") ");





                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_S_이슈등록");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public DataTable fn_이슈등록리스트(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select C.ISSUE_DATE,");
            sb.AppendLine("       C.ISSUE_NUM, ");
            sb.AppendLine("       C.ISSUE_INPUT, ");
            sb.AppendLine("       C.ISSUE_TIME, ");
            sb.AppendLine("       C.ORD_DATE, ");
            sb.AppendLine("       C.ORD_NUM, ");
            sb.AppendLine("       C.CUST_CD, ");
            sb.AppendLine("       A.CUST_NM, ");
            sb.AppendLine("       C.STAFF_CD, ");
            sb.AppendLine("       F.STAFF_NM, ");
            sb.AppendLine("       C.ISSUE_STAFF_CD, ");
            sb.AppendLine("       G.STAFF_NM AS ISSUE_STAFF_NM, ");
            sb.AppendLine("       C.ISSUE_CD, ");
            sb.AppendLine("       H.S_CODE_NM AS ISSUE_NM, ");
            sb.AppendLine("       C.ISSUE_MEMO, ");
            sb.AppendLine("       C.REQ_DATE, ");
            sb.AppendLine("       C.TEL_NO, ");
            sb.AppendLine("       C.COMMENT, ");
            sb.AppendLine("       C.ISSUE_PROCESS, ");
            sb.AppendLine("       C.ISSUE_COMPLETE_MEMO, ");
            sb.AppendLine("       C.ISSUE_COMPLETE_MEMO, ");
            sb.AppendLine("       C.STATE_DATE ");
            sb.AppendLine("      FROM S_이슈등록 AS C");
            sb.AppendLine("    inner join N_CUST_CODE as A  on C.CUST_CD=A.CUST_CD");
            sb.AppendLine("    inner join N_STAFF_CODE as F  on F.STAFF_CD=C.STAFF_CD");
            sb.AppendLine("    inner join N_STAFF_CODE as G  on G.STAFF_CD=C.ISSUE_STAFF_CD");
            sb.AppendLine("  left join T_S_CODE as H on H.S_CODE=C.ISSUE_CD  and H.L_CODE='640'");
            sb.AppendLine(" where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }


        public int delete이슈(string out_date, string out_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from S_이슈등록 ");
                sb.AppendLine("    where ISSUE_DATE = @OUTPUT_DATE ");
                sb.AppendLine("    and ISSUE_NUM = @OUTPUT_CD ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@OUTPUT_CD", out_cd);




                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int update_이슈등록(String 이슈완료, String 이슈완료내용, string 이슈일자, string 이슈번호)
        {
            try
            {
                SqlConnection dbConn = new SqlConnection(Common.p_strConn);

                StringBuilder sb = new StringBuilder();

                sb.AppendLine("UPDATE S_이슈등록 SET  ");
                sb.AppendLine("UPDATE_DATE = convert(varchar, getdate(), 120),  ");
                sb.AppendLine("UPDATE_STAFF = '" + Common.p_strStaffNo + "',  ");
                sb.AppendLine("ISSUE_PROCESS = '" + 이슈완료 + "',  ");
                sb.AppendLine("ISSUE_COMPLETE_MEMO = '" + 이슈완료내용 + "',  ");
                sb.AppendLine("STATE_DATE = convert(varchar, getdate(), 120)");
                sb.AppendLine("where 1=1");
                sb.AppendLine("and ISSUE_DATE='" + 이슈일자 + "'");
                sb.AppendLine("and ISSUE_NUM='" + 이슈번호 + "'");



                Debug.WriteLine(sb);
                SqlCommand sCommand = new SqlCommand(sb.ToString(), dbConn);
                int qResult = wAdo.SqlCommandEtc(sCommand, "업데이트이슈");

                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        /// <summary>
        ///  검사성적서 보는 sql 문 
        ///  F_FLOW_CHK  조인 F_FLOW_CHK_DETAIL
        /// </summary>
        /// <param name="condition"> pass가 N인것만 보게하여서 부적합 이력조회 할 생각이다.</param>
        /// <returns></returns>
        public DataTable fn_부적합이력(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("A.LOT_NO");
            sb.AppendLine(",A.LOT_SUB");
            sb.AppendLine(",A.F_STEP");
            sb.AppendLine(",A.F_CHK_DATE");
            sb.AppendLine(",A.F_SUB_AMT");
            sb.AppendLine(",A.MEASURE_CNT");
            sb.AppendLine(",A.EVA_GUBUN");
            sb.AppendLine(",A.EXTERIOR");
            sb.AppendLine(",A.MAP");
            sb.AppendLine(",A.COMMENT");
            sb.AppendLine(",A.PASS_YN");
            sb.AppendLine(",A.MAP_SIZE");
            sb.AppendLine(",D.SPEC");
            sb.AppendLine(",D.ITEM_NM");
            sb.AppendLine(",D.ITEM_GUBUN");
            sb.AppendLine(",G.S_CODE_NM as ITEM_GUBUN_NM");
            sb.AppendLine(",C.CHK_ORD");
            sb.AppendLine(",C.CHK_NM");
            sb.AppendLine(",F.FLOW_NM");


            sb.AppendLine(" from F_FLOW_CHK as A ");

            sb.AppendLine(" inner join F_FLOW_CHK_DETAIL as B on A.LOT_NO=B.LOT_NO and A.LOT_SUB=B.LOT_SUB");
            sb.AppendLine(" inner join N_CHK_CODE as C on C.CHK_CD= B.CHK_CD");
            sb.AppendLine(" inner join N_ITEM_CODE as D on D.ITEM_CD=A.ITEM_CD");
            sb.AppendLine(" inner join N_FLOW_CODE as F on F.FLOW_CD=A.FLOW_CD");
            sb.AppendLine("  inner join T_S_CODE as G on G.S_CODE=D.ITEM_GUBUN and G.L_CODE='400'");

            sb.AppendLine(" where 1=1");


            sb.AppendLine(condition);

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        #endregion 화인


        #region 현대기계
        public DataTable 현대fn_Work_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,D.ITEM_NM ");
            sb.AppendLine("     ,D.SPEC ");
            sb.AppendLine("     ,B.FLOW_CD ");
            sb.AppendLine("     ,H.FLOW_NM ");
            sb.AppendLine("     ,A.CUST_CD");
            sb.AppendLine("     ,G.CUST_NM");
            sb.AppendLine("     ,A.INST_AMT");
            sb.AppendLine("     ,A.WORKER_CD");
            sb.AppendLine("     ,A.LINE_CD");
            sb.AppendLine("     , isnull (C.F_SUB_AMT,'0')  as F_SUB_AMT ");
            sb.AppendLine("    ,A.INST_AMT- isnull (C.F_SUB_AMT,'0') as 남은수량 ");

            sb.AppendLine("     from F_WORK_INST as A ");
            sb.AppendLine("     inner join N_ITEM_FLOW as B on B.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("     left join (select LOT_NO,FLOW_CD,SUM(F_SUB_AMT) as F_SUB_AMT  from F_WORK_FLOW_DETAIL group by LOT_NO,FLOW_CD) as C on C.LOT_NO=A.LOT_NO and C.FLOW_CD=B.FLOW_CD");
            sb.AppendLine("     inner join N_ITEM_CODE as D on D.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("     inner join N_CUST_CODE as G on G.CUST_CD=A.CUST_CD");
            sb.AppendLine("     inner join N_FLOW_CODE as H on H.FLOW_CD=B.FLOW_CD");
            sb.AppendLine("     ");
            sb.AppendLine("  where 1=1   ");
            sb.AppendLine(condition);
            sb.AppendLine("  and A.INST_AMT- isnull (C.F_SUB_AMT,'0') <> '0'  ");

            Debug.WriteLine(" 현다이 작업지시서등록 fn_Work_List");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public int insert현대(
            String Lot_no
            , String item_cd
            , String cust_cd
            , String flow_cd
            , String fac_cd
            , String flow_date
            , String staff_cd
            , String complete_amt
            , string flow_seq
    )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("DECLARE @NUM INT");
                sb.AppendLine(" select @NUM=COUNT(*)  from F_WORK_FLOW ");
                sb.AppendLine("where LOT_NO='" + Lot_no + "'");
                sb.AppendLine("IF(@NUM = 0)");

                sb.AppendLine("insert into F_WORK_FLOW(");

                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");

                sb.AppendLine("     '" + Lot_no + "'");
                sb.AppendLine("      ,'" + flow_date + "'");
                sb.AppendLine("      ,'" + item_cd + "' ");
                sb.AppendLine("     ,'S'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");






                sb.AppendLine("DECLARE @seq INT");
                sb.AppendLine(" select @seq=ISNULL(MAX(SEQ),0)+1   from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("where LOT_NO='" + Lot_no + "' and FLOW_CD='" + flow_cd + "'");

                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");//1
                sb.AppendLine("      ,LOT_SUB ");//
                sb.AppendLine("      ,SEQ ");//
                sb.AppendLine("      ,ITEM_CD ");//
                sb.AppendLine("      ,CUST_CD ");//
                sb.AppendLine("      ,WORKER_CD ");//
                sb.AppendLine("      ,F_STEP ");//
                sb.AppendLine("      ,FLOW_CD ");//
                sb.AppendLine("      ,F_SUB_DATE ");//
                sb.AppendLine("      ,F_SUB_AMT ");//
                sb.AppendLine("      ,POOR_AMT ");//
                sb.AppendLine("      ,LOSS ");//
                sb.AppendLine("      ,INPUT_AMT ");//
                sb.AppendLine("      ,INPUT_YN ");//
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     '" + Lot_no + "'");
                sb.AppendLine("     ,'" + 1 + "'");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + item_cd + "'");
                sb.AppendLine("     ,'" + cust_cd + "'");
                sb.AppendLine("     ,'" + staff_cd + "'");
                sb.AppendLine("     ,'" + flow_seq + "'");

                sb.AppendLine("     ,'" + flow_cd + "'");
                sb.AppendLine("     ,'" + flow_date + "'");
                sb.AppendLine("     ,'" + complete_amt + "'");
                sb.AppendLine("     ,'" + 0 + "'");
                sb.AppendLine("     ,'" + 0 + "'");
                sb.AppendLine("     ,'" + complete_amt + "'");
                sb.AppendLine("     ,'Y'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'S' ");
                sb.AppendLine(" ) ");



                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert현대");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public int input_item현대(
           String Lot_no
           , String item_cd
           , String cust_cd
           , String flow_cd
           , String fac_cd
           , String flow_date
           , String staff_cd
           , String complete_amt
            , string flow_seq
            , string curr_amt
   )
        {

            if (curr_amt == "")
            {
                curr_amt = "0";
            }
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("DECLARE @date_seq INT");
                sb.AppendLine(" select @date_seq=ISNULL(MAX(INPUT_CD),0)+1   from F_ITEM_INPUT ");
                sb.AppendLine("where INPUT_DATE='" + flow_date + "'");
                sb.AppendLine("DECLARE @seq INT");
                sb.AppendLine(" select @seq=convert(int,seq) from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("where LOT_NO='" + Lot_no + "' and FLOW_CD='" + flow_cd + "'");

                sb.AppendLine("insert into F_ITEM_INPUT(");

                sb.AppendLine("      INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD");
                sb.AppendLine("     ,INPUT_AMT");
                sb.AppendLine("     ,CURR_AMT ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,LOT_SUB ");
                sb.AppendLine("     ,F_STEP ");
                sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine(" ) values ( ");

                sb.AppendLine("     '" + flow_date + "'");
                sb.AppendLine("     ,@date_seq");
                sb.AppendLine("      ,'" + complete_amt.Replace(",", "") + "'");
                sb.AppendLine("      ,'" + curr_amt.Replace(",", "") + "'");
                sb.AppendLine("      ,'" + item_cd + "'");

                sb.AppendLine("      ,'" + Lot_no + "' ");
                sb.AppendLine("      ,'" + 1 + "' ");
                sb.AppendLine("      ,'" + flow_seq + "' ");
                sb.AppendLine("      ,'" + flow_cd + "' ");
                sb.AppendLine("     ,'Y'");

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");




                sb.AppendLine("UPDATE F_WORK_FLOW SET ");
                sb.AppendLine("     COMPLETE_YN = 'Y' ");
                sb.AppendLine("  where LOT_NO=   '" + Lot_no + "'");
                sb.AppendLine("UPDATE [F_WORK_FLOW_DETAIL] SET ");
                sb.AppendLine("     COMPLETE_YN = 'Y' ");
                sb.AppendLine("  where LOT_NO=   '" + Lot_no + "' and seq=@seq");



                Debug.WriteLine(sb);

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert현대");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public int insertWork현대(
           string work_date
         , string txt_work_cd
         , string txt_lot_no
         , string txt_item_cd
         , string txt_cust_cd
         , string txt_inst_amt
         , string deliver_req_date
         , string cmb_line
         , string cmb_worker
         , string txt_plan_num
         , string txt_plan_item
         , string txt_inst_notice
         , string txt_char_amt
         , string txt_pack_amt
         , conDataGridView w_rm_dgv
         , DataGridView w_half_dgv
         , string rawchk
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_INST "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where W_INST_DATE LIKE '" + work_date.Substring(0, 7).ToString() + "%'"); //2019-05

                sb.AppendLine("declare @seq1 int ");
                sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' "); //일별 체크 

                sb.AppendLine("declare @seq3 int ");
                sb.AppendLine("select @seq3 =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_FLOW "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where LOT_NO LIKE '" + txt_lot_no.ToString() + "%'"); //2019-05






                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,WORKER_CD");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,PLAN_ITEM");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,RAW_OUT_YN ");
                sb.AppendLine("     ,INST_NOTICE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @W_INST_DATE ");
                sb.AppendLine("     ,@seq1");
                //   sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+  convert(varchar, case  when @seq3>=@seq then @SEQ3  else @SEQ end  ), 4 )"); //yyMMdd000n
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INST_AMT ");
                sb.AppendLine("     ,@DELIVERY_DATE ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@WORKER_CD ");
                sb.AppendLine("     ,@PLAN_NUM ");
                sb.AppendLine("     ,@PLAN_ITEM ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + rawchk + "' ");
                sb.AppendLine("     ,@INST_NOTICE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @work_seq" + i + " int ");
                        sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@work_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_HALF_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_HALF_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);
                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@PLAN_NUM", txt_plan_num);
                sCommand.Parameters.AddWithValue("@PLAN_ITEM", txt_plan_item);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int 현대Lotno부여(string input_date

            , string txt_lot_no
            , string txt_item_cd
            , string txt_cust_cd
            , string txt_inst_amt
            , string cmb_line
            , string cmb_worker
            )
        {
            try
            {




                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_INST "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where W_INST_DATE LIKE '" + input_date.Substring(0, 7).ToString() + "%'"); //2019-05

                sb.AppendLine("declare @seq1 int ");
                sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + input_date + "' "); //일별 체크 


                sb.AppendLine("declare @seq3 int ");
                sb.AppendLine("select @seq3 =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_FLOW "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where LOT_NO LIKE '" + txt_lot_no.ToString() + "%'"); //2019-05






                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INST_AMT ");

                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,WORKER_CD");

                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,RAW_OUT_YN ");

                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @W_INST_DATE ");
                sb.AppendLine("     ,@seq1");
                //   sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+  convert(varchar, case  when @seq3>=@seq then @SEQ3  else @SEQ end  ), 4 )"); //yyMMdd000n
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INST_AMT ");

                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@WORKER_CD ");


                sb.AppendLine("     ,'N' "); //완료여부
                sb.AppendLine("     ,'N' ");  //자재불출 여부

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");









                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);
                sCommand.Parameters.AddWithValue("@W_INST_DATE", input_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));

                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);



                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }



        public DataTable fn_work_List현대(string condition)
        //작업일보관리
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.LOT_NO,A.WORKER_CD,A.F_SUB_DATE,A.F_STEP,A.ITEM_CD,C.ITEM_NM,A.F_SUB_AMT,A.INPUT_AMT,A.CUST_CD,D.CUST_NM,A.FLOW_CD,W.FLOW_NM,c.LINE_CD,z.LINE_NM ,F.STAFF_NM as WORKER_NM");


            sb.AppendLine("from F_WORK_FLOW_DETAIL A");
            sb.AppendLine("inner join F_WORK_FLOW B on B.LOT_NO=A.LOT_NO");
            sb.AppendLine("inner join N_ITEM_CODE c on c.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("inner join N_CUST_CODE D on D.CUST_CD=A.CUST_CD");
            sb.AppendLine("inner join N_STAFF_CODE F on F.STAFF_CD=A.WORKER_CD");
            sb.AppendLine("LEFT OUTER JOIN N_FLOW_CODE w ON A.FLOW_CD = w.FLOW_CD  ");
            sb.AppendLine("LEFT OUTER join N_LINE_CODE z on z.LINE_CD=c.LINE_CD ");


            sb.AppendLine(condition);

            Debug.WriteLine("작업일보관리");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_work_List현대미지시완료(string condition)
        //작업일보관리
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.LOT_NO,A.FLOW_DATE,A.COMPLETE_YN");


            sb.AppendLine(",B.ITEM_CD");
            sb.AppendLine(",C.ITEM_NM");
            sb.AppendLine(",B.CUST_CD");
            sb.AppendLine(",D.CUST_NM");
            sb.AppendLine(",B.INST_AMT");
            sb.AppendLine(",B.WORKER_CD");
            sb.AppendLine(",f.STAFF_NM");
            sb.AppendLine(",B.W_INST_CD");


            sb.AppendLine(",B.RAW_OUT_YN");
            sb.AppendLine(" from F_WORK_FLOW as A ");
            sb.AppendLine("left join F_WORK_INST As B on B.LOT_NO=A.LOT_NO");
            sb.AppendLine("inner join N_ITEM_CODE AS C on C.ITEM_CD=B.ITEM_CD");
            sb.AppendLine("inner join N_CUST_CODE AS D on D.CUST_CD=B.CUST_CD");
            sb.AppendLine("inner join N_STAFF_CODE as F on F.STAFF_CD=B.WORKER_CD");

            sb.AppendLine("where  1=1");
            sb.AppendLine("and B.RAW_OUT_YN ='N' and B.W_INST_DATE is not null");
            sb.AppendLine("");
            sb.AppendLine("");
            sb.AppendLine("");




            sb.AppendLine(condition);

            Debug.WriteLine("작업일보관리");
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int 현대Lotno부여2(
            string input_date
            , string input_cd
          , string txt_lot_no
            //, string txt_item_cd
            //, string txt_cust_cd
            //, string txt_inst_amt
            //, string cmb_line
            //, string cmb_worker
            , conDataGridView w_rm_dgv
            , DataGridView w_half_dgv
            , string rawchk
            , string plan_num
          )
        {
            try
            {




                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();



                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @work_seq" + i + " int ");
                        sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + input_date + "' ");
                        sb.AppendLine("and W_INST_CD =  '" + input_cd + "' ");

                        sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("      ,'" + input_cd + "' ");
                        sb.AppendLine("     ,@work_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_HALF_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + input_date + "' ");
                        sb.AppendLine("and W_INST_CD =  '" + input_cd + "' ");

                        sb.AppendLine("insert into F_WORK_INST_HALF_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("      ,'" + input_cd + "' ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }



                sb.AppendLine("UPDATE F_WORK_INST SET");
                sb.AppendLine("RAW_OUT_YN='" + rawchk + "'");
                sb.AppendLine(",PLAN_NUM='" + plan_num + "'");
                sb.AppendLine("where LOT_NO='" + txt_lot_no + "'");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                Debug.WriteLine(sb);
                sCommand.Parameters.AddWithValue("@W_INST_DATE", input_date);



                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }




        public DataTable 현대생산현황(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.CUST_CD,max(B.ITEM_NM) as ITEM_NM ,max(C.CUST_NM) as CUST_NM ,max(D.FLOW_NM) as FLOW_NM ,A.ITEM_CD,SUM(A.F_SUB_AMT) as F_SUB_AMT ,SUM(A.INPUT_AMT) as INPUT_AMT , A.FLOW_CD ,isnull(sum(Z.INST_AMT),0) as INST_AMT   ");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL as A     ");

            sb.AppendLine("     inner join N_ITEM_CODE AS B on B.ITEM_CD=A.ITEM_CD");
            sb.AppendLine("     inner join N_CUST_CODE AS C on C.CUST_CD=A.CUST_CD");
            sb.AppendLine("     inner join N_FLOW_CODE AS d on D.FLOW_CD=A.FLOW_CD");
            sb.AppendLine("     left join F_WORK_INST as Z on Z.LOT_NO = A.LOT_NO  and Z.RAW_OUT_YN='Y'");

            sb.AppendLine("     ");
            sb.AppendLine("  where 1=1   ");

            sb.AppendLine(condition);
            sb.AppendLine("  group by A.CUST_CD, A.ITEM_CD , A.FLOW_CD  ");

            Debug.WriteLine(" 현다이 작업지시서등록 fn_Work_List");

            Debug.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        #endregion

        public static int floorPlanSave(string dtp_input_date, string txtFloorPlanNm, byte[] image, int ImgPath, string staff_cd, string comment, string gubun)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("declare @INPUT_CD int ");
                sb.AppendLine("select @INPUT_CD=ISNULL(MAX(INPUT_CD),0)+1 from F_DOCUMENT ");
                sb.AppendLine("where INPUT_DATE = '" + dtp_input_date + "' ");
                sb.AppendLine("and INPUT_CD =  @INPUT_CD ");
                sb.AppendLine("and IMG_GUBUN =  '" + gubun + "' ");

                sb.AppendLine("INSERT INTO F_DOCUMENT (");
                sb.AppendLine(" INPUT_DATE ");
                sb.AppendLine(" ,INPUT_CD ");
                sb.AppendLine(" ,IMG_GUBUN "); //1. 도면 2.밀시트
                sb.AppendLine(" ,STAFF_CD ");
                sb.AppendLine(" ,IMG_PATH ");
                sb.AppendLine(" ,IMG ");
                sb.AppendLine(" ,IMG_NAME ");
                sb.AppendLine(" ,COMMENT ");
                sb.AppendLine(" ,INTIME ");
                sb.AppendLine(" ,INSTAFF");
                sb.AppendLine(") VALUES (");
                sb.AppendLine(" '" + dtp_input_date + "' ");
                sb.AppendLine(" ,@INPUT_CD ");
                sb.AppendLine(" ,'1' ");
                sb.AppendLine(" ,'" + staff_cd + "' ");
                sb.AppendLine(" ,'" + ImgPath + "' ");
                sb.AppendLine(" ,@IMG ");
                sb.AppendLine(" ,'" + txtFloorPlanNm + "' ");
                sb.AppendLine(" ,'" + comment + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ) ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@IMG", image);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_DOCUMENT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable floorPlanList(string floorPlan_nm, string dtp_start, string dtp_end)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" SELECT  ");
                sb.AppendLine(" INPUT_DATE ");
                sb.AppendLine(" ,INPUT_CD ");
                sb.AppendLine(" ,STAFF_CD ");
                sb.AppendLine(" ,IMG_PATH ");
                sb.AppendLine(" ,IMG_NAME  ");
                sb.AppendLine(" ,COMMENT ");
                sb.AppendLine(" ,IMG ");
                sb.AppendLine(" FROM F_DOCUMENT ");
                sb.AppendLine(" WHERE IMG_GUBUN ='1' ");
                sb.AppendLine("  AND IMG_NAME LIKE '%" + floorPlan_nm + "%' ");
                sb.AppendLine(" AND INPUT_DATE >= '" + dtp_start + "'");
                sb.AppendLine(" AND INPUT_DATE <= '" + dtp_end + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }

                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception)
            {

                throw;
            }
        }

        public DataTable SelectFloorPlan(string input_date, string input_cd)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" SELECT  ");
                sb.AppendLine(" STAFF_CD ");
                sb.AppendLine(" ,IMG_PATH ");
                sb.AppendLine(" ,IMG_NAME  ");
                sb.AppendLine(" ,COMMENT ");
                sb.AppendLine(" ,IMG ");
                sb.AppendLine(" FROM F_DOCUMENT ");
                sb.AppendLine(" WHERE IMG_GUBUN ='1' ");
                sb.AppendLine(" AND INPUT_DATE = '" + input_date + "'");
                sb.AppendLine(" AND INPUT_CD = '" + input_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }

                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception)
            {

                throw;
            }
        }

        public static int floorPlanUpdate(string dtp_input_date, string input_cd, string txtFloorPlanNm, byte[] image, int ImgPath, string staff_cd, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("UPDATE F_DOCUMENT SET");
                sb.AppendLine(" IMG_NAME = '" + txtFloorPlanNm + "'  ");
                if ((double)ImgPath > 0)
                {
                    sb.AppendLine(" ,IMG_PATH = '" + ImgPath + "' ");
                    sb.AppendLine(" ,IMG = @IMG ");
                }

                sb.AppendLine(" ,COMMENT ='" + comment + "' ");
                sb.AppendLine(" ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,UPSTAFF ='" + Common.p_strStaffNo + "' ");

                sb.AppendLine(" WHERE INPUT_DATE = '" + dtp_input_date + "'");
                sb.AppendLine(" AND INPUT_CD = '" + input_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if ((double)ImgPath > 0)
                {
                    sCommand.Parameters.AddWithValue("@IMG", image);
                }
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_DOCUMENT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int floorPlanDelete(string input_date, string input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_DOCUMENT ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' ");
                sb.AppendLine(" AND INPUT_CD = '" + input_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_F_DOCUMENT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        internal int raw_out(conDataGridView dgv, int cnt, string date)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("	update F_RAW_DETAIL");
                sb.AppendLine(" set CURR_AMT = CURR_AMT - @RESULT_OUT_AMT");
                sb.AppendLine(" where INPUT_DATE ='" + dgv.Rows[cnt].Cells["INPUT_DATE"].Value.ToString() + "'  ");
                sb.AppendLine(" and INPUT_CD = '" + dgv.Rows[cnt].Cells["INPUT_CD"].Value.ToString() + "' ");
                sb.AppendLine(" and SEQ = '" + dgv.Rows[cnt].Cells["INPUT_SEQ"].Value.ToString() + "' ");


                sb.AppendLine(" declare @OUT_CD int ");
                sb.AppendLine(" select @OUT_CD = ISNULL(MAX(OUTPUT_CD),0)+1 from F_RAW_OUTPUT ");
                sb.AppendLine(" where OUTPUT_DATE = '" + date + "' ");

                sb.AppendLine(" declare @LOT_NO nvarchar(30), @W_CD int ");

                sb.AppendLine(" select @W_CD = ISNULL(MAX(W_INST_CD),0) from F_WORK_INST ");
                sb.AppendLine(" where W_INST_DATE ='" + date + "' ");

                sb.AppendLine(" select @LOT_NO = LOT_NO from F_WORK_INST ");
                sb.AppendLine(" where W_INST_DATE ='" + date + "' ");
                sb.AppendLine(" and W_INST_CD = @W_CD ");


                sb.AppendLine(" insert F_RAW_OUTPUT ");
                sb.AppendLine(" (  ");
                sb.AppendLine(" OUTPUT_DATE  ");
                sb.AppendLine(" ,OUTPUT_CD  ");
                sb.AppendLine(" ,RAW_MAT_CD  ");
                sb.AppendLine(" ,TOTAL_AMT  ");
                sb.AppendLine(" ,LOT_NO  ");
                sb.AppendLine(" ,INPUT_DATE  ");
                sb.AppendLine(" ,INPUT_CD  ");
                sb.AppendLine(" ,INPUT_SEQ  ");
                sb.AppendLine(" ,OUTPUT_UNIT  ");
                sb.AppendLine(" )  ");
                sb.AppendLine(" values  ");
                sb.AppendLine(" (  ");
                sb.AppendLine("  '" + date + "'  ");
                sb.AppendLine(" ,@OUT_CD  ");
                sb.AppendLine(" ,@RAW_MAT_CD  ");
                sb.AppendLine(" ,@RESULT_OUT_AMT  ");
                sb.AppendLine(" ,@LOT_NO  ");
                sb.AppendLine(" ,'" + dgv.Rows[cnt].Cells["INPUT_DATE"].Value.ToString() + "'  ");
                sb.AppendLine(" ,'" + dgv.Rows[cnt].Cells["INPUT_CD"].Value.ToString() + "'  ");
                sb.AppendLine(" ,'" + dgv.Rows[cnt].Cells["INPUT_SEQ"].Value.ToString() + "'  ");
                sb.AppendLine(" ,@OUTPUT_UNIT  ");
                sb.AppendLine(" )  ");






                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", dgv.Rows[cnt].Cells["RAW_MAT_CD"].Value.ToString());
                sCommand.Parameters.AddWithValue("@RESULT_OUT_AMT", dgv.Rows[cnt].Cells["TOTAL_SOYO_AMT"].Value.ToString());
                sCommand.Parameters.AddWithValue("@OUTPUT_UNIT", dgv.Rows[cnt].Cells["OUTPUT_UNIT"].Value.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_DOCUMENT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int insert_UnitType(string L_CODE, string unitType_cd, string unitType_nm, string unitType_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_UNIT_TYPE_CODE");
                sb.AppendLine(" where L_CODE = '" + L_CODE + "'");
                sb.AppendLine(" and UNIT_TYPE_CD = '" + unitType_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_UNIT_TYPE_CODE(");
                sb.AppendLine("     L_CODE ");
                sb.AppendLine("     ,UNIT_TYPE_CD ");
                sb.AppendLine("     ,UNIT_TYPE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + L_CODE + "' ");
                sb.AppendLine("  ,'" + unitType_cd + "' ");
                sb.AppendLine("  ,'" + unitType_nm + "' ");
                sb.AppendLine("  ,'" + unitType_cmt + "' ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());




                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_UNIT_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }


        }

        public int insert_PoorType(string unitType_nm, string unitType_cmt)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" declare @MAX int ");
                sb.AppendLine(" declare @newKey nvarchar(10) ");
                sb.AppendLine(" select @MAX = ISNULL(MAX(substring(UNIT_TYPE_CD,3,3)),0)+1 from N_UNIT_TYPE_CODE ");
                sb.AppendLine(" where L_CODE = 1 ");
                sb.AppendLine(" select @newKey = 'P-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");

                sb.AppendLine("insert into N_UNIT_TYPE_CODE(");
                sb.AppendLine("     L_CODE ");
                sb.AppendLine("     ,UNIT_TYPE_CD ");
                sb.AppendLine("     ,UNIT_TYPE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '1' ");
                sb.AppendLine("  ,@newKey ");
                sb.AppendLine("  ,'" + unitType_nm + "' ");
                sb.AppendLine("  ,'" + unitType_cmt + "' ");
                sb.AppendLine(" ) ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POOR_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }


        }

        public DataTable fn_UnitType_List(string L_CODE)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.UNIT_TYPE_CD");
            sb.AppendLine(" , A.UNIT_TYPE_NM");
            sb.AppendLine(" , A.COMMENT ");
            sb.AppendLine(" from N_UNIT_TYPE_CODE A ");
            sb.AppendLine(" WHERE A.L_CODE = '" + L_CODE + "' ");
            sb.AppendLine(" order by A.UNIT_TYPE_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }



        public int deleteMold(string txt_mold_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_MOLD_CODE ");
                sb.AppendLine("    where MOLD_NO =@MOLD_NO  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@MOLD_NO", txt_mold_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_MOLD_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteUnitType(string L_CODE, string unitType_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("DELETE FROM N_UNIT_TYPE_CODE ");
                sb.AppendLine("    WHERE L_CODE ='" + L_CODE + "'  ");
                sb.AppendLine("    AND UNIT_TYPE_CD = '" + unitType_cd + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_UNITTYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int update_UnitType(string L_CODE, string txt_unitType_cd, string txt_unitType_nm, string txt_unitType_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select count(*) as cnt");
                //sb.AppendLine(" from n_poor_code");
                //sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");



                sb = new StringBuilder();

                sb.AppendLine("UPDATE N_UNIT_TYPE_CODE SET  ");
                sb.AppendLine("     UNIT_TYPE_NM = '" + txt_unitType_nm + "' ");
                sb.AppendLine("     ,COMMENT = '" + txt_unitType_cmt + "' ");
                sb.AppendLine("     WHERE UNIT_TYPE_CD = '" + txt_unitType_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "update_UNIT_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable SelectFloorPlan(string item_cd)
        {

            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" SELECT  ");
            sb.AppendLine(" STAFF_CD ");
            sb.AppendLine(" ,IMG_PATH ");
            sb.AppendLine(" ,IMG_NAME  ");
            sb.AppendLine(" ,COMMENT ");
            sb.AppendLine(" ,IMG ");
            sb.AppendLine(" ,INPUT_DATE ");
            sb.AppendLine(" ,INPUT_CD ");
            sb.AppendLine(" FROM F_DOCUMENT ");
            sb.AppendLine(" WHERE IMG_GUBUN ='1' ");
            sb.AppendLine(" AND ITEM_CD = '" + item_cd + "'");


            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);


        }

        public int insertLoc(string stor_cd, string loc_cd, string loc_nm, string loc_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_LOC_CODE");
                sb.AppendLine(" where STORAGE_CD = '" + stor_cd + "'");
                sb.AppendLine(" and LOC_CD = '" + loc_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("insert into N_LOC_CODE(");
                sb.AppendLine("     STORAGE_CD ");
                sb.AppendLine("     ,LOC_CD ");
                sb.AppendLine("     ,LOC_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + stor_cd + "' ");
                sb.AppendLine("  ,'" + loc_cd + "' ");
                sb.AppendLine("  ,'" + loc_nm + "' ");
                sb.AppendLine("  ,'" + loc_cmt + "' ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_LOC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }

        }

        public DataTable fn_Storage_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select STORAGE_CD,STORAGE_NM,COMMENT");
            sb.AppendLine(" from N_STORAGE_CODE ");
            sb.AppendLine(" order by STORAGE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertRawInput(string spec)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;

                string input_date = DateTime.Today.ToString("yyyy-MM-dd");

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into F_RAW_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + input_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");




                sb.AppendLine("declare @input_seq int , @dregs nvarchar(10)");
                sb.AppendLine("select @input_seq =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                sb.AppendLine("and INPUT_CD =  @seq ");




                sb.AppendLine("insert into F_RAW_DETAIL(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,UNIT_CD ");
                sb.AppendLine("     ,TEMP_AMT ");
                sb.AppendLine("     ,TOTAL_AMT ");
                sb.AppendLine("     ,CURR_AMT ");
                sb.AppendLine("     ,PRICE ");
                sb.AppendLine("     ,TOTAL_MONEY ");
                sb.AppendLine("     ,HEAT_NO ");
                sb.AppendLine("     ,HEAT_TIME ");
                sb.AppendLine("     ,ORDER_DATE ");
                sb.AppendLine("     ,ORDER_CD ");
                sb.AppendLine("     ,ORDER_SEQ ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,CHECK_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,comment ");
                sb.AppendLine("  )values ( ");
                sb.AppendLine("     '" + input_date + "' ");
                sb.AppendLine("      ,@seq ");
                sb.AppendLine("     ,@input_seq ");
                sb.AppendLine("     ,'REMAINS' ");
                sb.AppendLine("     ,'" + spec + "' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'1' "); //가입고
                sb.AppendLine("     ,'1' "); //최종입고
                sb.AppendLine("     ,'1' "); //현재입고
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("     , "); //BE
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine("  )");

                /*
                        sb.AppendLine(" update N_RAW_CODE set ");
                        sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " "));
                        sb.AppendLine(" where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

*/





                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", "dregs");

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable raw_input_lotNo(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" SELECT A.LOT_NO ");
            sb.AppendLine(" ,B.SPEC ");
            sb.AppendLine(" ,B.TOTAL_AMT");
            sb.AppendLine(" ,B.STORAGE_CD ");
            sb.AppendLine(" ,B.COMMENT ");
            sb.AppendLine(" ,B.SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" FROM F_RAW_INPUT A  ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B ");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine(" WHERE 1=1 ");
            sb.AppendLine(" " + condition + " ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int update_returnRmInput(string input_date, string input_cd, DataGridView rs_order_grid, string lot_no, DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                SqlCommand sCommand;
                StringBuilder sb = new StringBuilder();


                if (rs_order_grid.Rows.Count > 0)
                {

                    for (int i = 0; i < rs_order_grid.Rows.Count; i++)
                    {

                        if (rs_order_grid.Rows[i].Cells["SEQ"].Value == null || rs_order_grid.Rows[i].Cells["SEQ"].Value.Equals(""))
                        {
                            sb.AppendLine("declare @SEQ" + i + " int ");
                            sb.AppendLine("select @SEQ" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                            sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine("and INPUT_CD = '" + input_cd + "' ");

                            sb.AppendLine("insert into F_RAW_DETAIL(");
                            sb.AppendLine("     INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,SPEC ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,CURR_AMT ");
                            sb.AppendLine("     ,ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,ORDER_SEQ ");
                            sb.AppendLine("     ,COMPLETE_YN ");
                            sb.AppendLine("     ,CHECK_YN ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,STORAGE_CD ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + input_date + "' ");
                            sb.AppendLine("      ,'" + input_cd + "' ");
                            sb.AppendLine("     ,@SEQ" + i + " ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     ,'" + rs_order_grid.Rows[i].Cells["SPEC"].Value + "' ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     ," + double.Parse(rs_order_grid.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + " "); //가입고
                            sb.AppendLine("     ," + double.Parse(rs_order_grid.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + " ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     ,'' ");
                            sb.AppendLine("     , ''  "); //BE
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + rs_order_grid.Rows[i].Cells["COMMENT"].Value + "' ");
                            sb.AppendLine("     ,'" + rs_order_grid.Rows[i].Cells["STORAGE_CD"].Value + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_RAW_DETAIL set");
                            sb.AppendLine("      SPEC =  '" + rs_order_grid.Rows[i].Cells["SPEC"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + double.Parse(rs_order_grid.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + "' ");
                            sb.AppendLine("     ,CURR_AMT =  '" + double.Parse(rs_order_grid.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "")) + "' ");
                            sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)  ");
                            sb.AppendLine(" where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + input_cd + "'");
                            sb.AppendLine(" and SEQ = '" + rs_order_grid.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }
                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_RAW_DETAIL ");
                        sb.AppendLine("    where INPUT_DATE = '" + del_dgv.Rows[i].Cells["INPUT_DATE"].Value + "' ");
                        sb.AppendLine("    where INPUT_CD = '" + del_dgv.Rows[i].Cells["INPUT_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public DataTable fn_loc_list()
        { // 2020-05-08 이재원 재고위치 검색 팝업 구현을 위한 메소드 추가
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select LOC_CD");
            sb.AppendLine(" , LOC_NM");
            sb.AppendLine(" , STORAGE_CD");
            sb.AppendLine(" , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" from N_LOC_CODE A");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_loc_list(string condition)
        { // 2020-05-08 이재원 재고위치 검색 팝업 구현을 위한 메소드 추가
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select LOC_CD");
            sb.AppendLine(" , LOC_NM");
            sb.AppendLine(" , STORAGE_CD");
            sb.AppendLine(" , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" from N_LOC_CODE A");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_loc_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.STORAGE_CD,A.LOC_CD,A.LOC_NM,A.COMMENT , B.STORAGE_NM ");
            sb.AppendLine(" from N_LOC_CODE A ");
            sb.AppendLine("  left join N_STORAGE_CODE B ");
            sb.AppendLine(" ON B.STORAGE_CD = A.STORAGE_CD ");
            sb.AppendLine(" order by STORAGE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Raw_Stock_List2(string srch_date, string condition)
        {
            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select A.RAW_MAT_CD ");
            //sb.AppendLine("      , A.RAW_MAT_NM ");
            //sb.AppendLine("      , A.SPEC ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS INPUT_AMT ");
            //sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS OUTPUT_AMT ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS STOCK_AMT ");
            //sb.AppendLine("      , A.BAL_STOCK ");

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no ");
            sb.AppendLine("      , B.SPEC AS  규격 ");
            sb.AppendLine("      , A.CUST_CD ");
            sb.AppendLine("         , D.CUST_NM ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS 입고량 ");
            sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS 출고량 ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS 재고량 ");

            sb.AppendLine("from F_RAW_INPUT A ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                select INPUT_DATE,INPUT_CD ,SPEC");
            sb.AppendLine("                      , SUM(ISNULL(TOTAL_AMT,0)) as INPUT_AMT ");
            sb.AppendLine("                 from F_RAW_DETAIL ");
            sb.AppendLine("                 where INPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by INPUT_DATE, INPUT_CD ,SPEC) B  ");
            sb.AppendLine("ON A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine("AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select INPUT_DATE,INPUT_CD ");
            sb.AppendLine("                      , SUM(ISNULL(TOTAL_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine("                 from F_RAW_OUTPUT ");
            sb.AppendLine("                 where OUTPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by INPUT_DATE, INPUT_CD ) C ");
            sb.AppendLine("ON A.INPUT_DATE = C.INPUT_DATE  ");
            sb.AppendLine("AND A.INPUT_CD = C.INPUT_CD  ");
            sb.AppendLine("left join N_CUST_CODE as D on D.CUST_CD=A.CUST_CD ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int updatetLoc(string cmb_stor, string txt_loc_cd, string txt_loc_nm, string txt_loc_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select count(*) as cnt");
                //sb.AppendLine(" from n_poor_code");
                //sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");



                sb = new StringBuilder();

                sb.AppendLine("UPDATE N_LOC_CODE SET  ");
                sb.AppendLine("     STORAGE_CD = '" + cmb_stor + "' ");
                sb.AppendLine("     ,LOC_NM = '" + txt_loc_nm + "' ");
                sb.AppendLine("     ,COMMENT = '" + txt_loc_cmt + "' ");
                sb.AppendLine("     WHERE LOC_CD = '" + txt_loc_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "update_UNIT_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deleteLoc(string txt_loc_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_LOC_CODE ");
                sb.AppendLine("    where LOC_CD =@LOC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOC_CD", txt_loc_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_LOC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Update_Raw_Input_Amt(
            string input_date
            , string input_cd
            , string input_seq
            , string Update_amt
            , string Frozen_gubun
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" declare @ChValue decimal(18,6)  ");
                sb.AppendLine(" select @ChValue = TOTAL_AMT - " + Update_amt + " FROM F_RAW_DETAIL ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = " + input_cd + " AND SEQ = " + input_seq + " ");

                sb.AppendLine("UPDATE F_RAW_DETAIL SET ");
                sb.AppendLine(" TOTAL_AMT  = TOTAL_AMT - @ChValue ");
                sb.AppendLine(" ,CURR_AMT  = CURR_AMT - @ChValue ");
                sb.AppendLine(" ,TEMP_AMT  = TEMP_AMT - @ChValue ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = " + input_cd + " AND SEQ = " + input_seq + " ");

                sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                sb.AppendLine(" BAL_STOCK = BAL_STOCK - @ChValue ");
                sb.AppendLine(" WHERE RAW_MAT_CD  = (SELECT RAW_MAT_CD FROM F_RAW_DETAIL WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = " + input_cd + " AND SEQ = " + input_seq + " ) ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "UPDATE_Raw_InputAmt");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Update_Item_Input_Amt(string input_date, string input_cd, string lot_no, string Update_amt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" declare @ChValue decimal(18,6)  ");
                sb.AppendLine(" select @ChValue = INPUT_AMT - " + Update_amt + " FROM F_ITEM_INPUT ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = " + input_cd + " AND LOT_NO = " + lot_no + " ");

                sb.AppendLine("UPDATE F_ITEM_INPUT SET ");
                sb.AppendLine(" INPUT_AMT  = INPUT_AMT - @ChValue ");
                sb.AppendLine(" ,CURR_AMT  = CURR_AMT - @ChValue ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' AND INPUT_CD = " + input_cd + " AND LOT_NO = " + lot_no + " ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "UPDATE_ITEM_InputAmt");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int UpdateStorageLoc_Raw(string sInputDate, string sInputCd, string sInputSeq, string store_gubun, string sCode, string sName)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("UPDATE F_RAW_DETAIL ");
                sb.AppendLine(" SET STORAGE_CD = '" + store_gubun + "' ");
                sb.AppendLine(" , LOC_CD = '" + sCode + "' ");
                sb.AppendLine(" , LOC_NM = '" + sName + "' ");
                sb.AppendLine("    where INPUT_DATE = '" + sInputDate + "'  ");
                sb.AppendLine("    and INPUT_CD = '" + sInputCd + "'  ");
                sb.AppendLine("    and SEQ = '" + sInputSeq + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_StoreLoc_Raw");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int UpdateStorageLoc_Item(string sInputDate, string sInputCd, string Lot_no, string store_gubun, string sCode, string sName)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("UPDATE F_ITEM_INPUT ");
                sb.AppendLine(" SET STORAGE_CD = '" + store_gubun + "' ");
                sb.AppendLine(" , LOC_CD = '" + sCode + "' ");
                sb.AppendLine(" , LOC_NM = '" + sName + "' ");
                sb.AppendLine("    where INPUT_DATE = '" + sInputDate + "'  ");
                sb.AppendLine("    and INPUT_CD = '" + sInputCd + "'  ");
                sb.AppendLine("    and LOT_NO = '" + Lot_no + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_StoreLoc_Item");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int update_Work_inst_RawOutput_to_N(string lot_no)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" update F_WORK_INST set ");
                sb.AppendLine(" RAW_OUT_YN = 'N' ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update Flow Chk");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insert_Extra_raw(conDataGridView workRmGrid, string input_date)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < workRmGrid.Rows.Count; i++)
                {
                    if (decimal.Parse(workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString()) < 0)
                    {
                        sb.AppendLine(" Declare @cd" + i + " int ");
                        sb.AppendLine(" Select @cd" + i + " = ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                        sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' ");

                        sb.AppendLine(" Declare @bcd" + i + " int ");
                        sb.AppendLine(" Select @bcd" + i + " = ISNULL(MAX(BUY_CD),0)+1 from F_BUY ");
                        sb.AppendLine(" WHERE BUY_DATE = '" + input_date + "' ");

                        sb.AppendLine(" Declare @seq" + i + " int ");
                        sb.AppendLine(" Select @seq" + i + " = ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                        sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = @cd" + i + " ");

                        sb.AppendLine(" Declare @bseq" + i + " int ");
                        sb.AppendLine(" Select @bseq" + i + " = ISNULL(MAX(SEQ),0)+1 from F_BUY_DETAIL ");
                        sb.AppendLine(" WHERE BUY_DATE = '" + input_date + "' and BUY_CD = @bcd" + i + " ");

                        sb.AppendLine(" insert into F_RAW_INPUT ( ");
                        sb.AppendLine("  INPUT_DATE ");
                        sb.AppendLine("  ,INPUT_CD ");
                        sb.AppendLine("  ,CUST_CD ");
                        sb.AppendLine("  ,COMPLETE_YN ");
                        sb.AppendLine("  ,INSTAFF ");
                        sb.AppendLine("  ,INTIME ");
                        sb.AppendLine("  ) VALUES ( ");
                        sb.AppendLine("  '" + input_date + "' ");
                        sb.AppendLine("  ,@cd" + i + " ");
                        sb.AppendLine("  ,'' ");
                        sb.AppendLine("  ,'N' ");
                        sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");


                        sb.AppendLine(" insert into F_BUY ( ");
                        sb.AppendLine("  BUY_DATE ");
                        sb.AppendLine("  ,BUY_CD ");
                        sb.AppendLine("  ,BUY_GUBUN ");
                        sb.AppendLine("  ,CUST_CD ");
                        sb.AppendLine("  ,INPUT_DATE ");
                        sb.AppendLine("  ,INPUT_CD ");
                        sb.AppendLine("  ,ALL_TOTAL_MONEY ");
                        sb.AppendLine("  ,ALL_SUPPLY_MONEY  ");
                        sb.AppendLine("  ,ALL_TAX_MONEY  ");
                        sb.AppendLine("  ,INSTAFF ");
                        sb.AppendLine("  ,INTIME ");
                        sb.AppendLine("  ) VALUES ( ");
                        sb.AppendLine("  '" + input_date + "' ");
                        sb.AppendLine("  ,@bcd" + i + " ");
                        sb.AppendLine("  ,'1' ");
                        sb.AppendLine("  ,'' ");
                        sb.AppendLine("  ,'" + input_date + "' ");
                        sb.AppendLine("  ,@cd" + i + " ");
                        sb.AppendLine("  ,'0' ");
                        sb.AppendLine("  ,'0' ");
                        sb.AppendLine("  ,'0' ");
                        sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");


                        sb.AppendLine(" insert into F_RAW_DETAIL ( ");
                        sb.AppendLine("  INPUT_DATE ");   //1
                        sb.AppendLine("  ,INPUT_CD ");    //2
                        sb.AppendLine("  ,SEQ ");         //3
                        sb.AppendLine("  ,RAW_MAT_CD ");  //4
                        sb.AppendLine("  ,SPEC ");        //5     
                        sb.AppendLine("  ,UNIT_CD ");     //6
                        sb.AppendLine("  ,TOTAL_AMT ");   //7
                        sb.AppendLine("  ,CURR_AMT ");    //8
                        sb.AppendLine("  ,PRICE ");       //9
                        sb.AppendLine("  ,TOTAL_MONEY "); //10
                        sb.AppendLine("  ,HEAT_NO ");     //11
                        sb.AppendLine("  ,HEAT_TIME ");   //12
                        sb.AppendLine("  ,CHECK_YN ");    //13
                        sb.AppendLine("  ,ORDER_DATE ");  //14
                        sb.AppendLine("  ,ORDER_CD ");    //15
                        sb.AppendLine("  ,ORDER_SEQ ");   //16
                        sb.AppendLine("  ,COMMENT ");     //17
                        sb.AppendLine("  ,INTIME ");      //18
                        sb.AppendLine("  ,INSTAFF ");     //19
                        sb.AppendLine("  ,TEMP_AMT ");    //20
                        sb.AppendLine("  ,STORAGE_CD ");  //21
                        sb.AppendLine("  ,LOC_CD ");      //22
                        sb.AppendLine("  ,LOC_NM ");      //23
                        sb.AppendLine("  ,COMPLETE_YN "); //24
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("  '" + input_date + "' ");                                                           //1    INPUT_DATE 
                        sb.AppendLine("  ,@cd" + i + " ");                                                                  //2    INPUT_CD 
                        sb.AppendLine("  ,@seq" + i + " ");                                                                 //3    SEQ       
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ");             //4    RAW_MAT_CD  
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["SPEC"].Value.ToString() + "' ");                   //5    SPEC       
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["INPUT_UNIT"].Value.ToString() + "' ");             //6    UNIT_CD     
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + "' ");               //7    TOTAL_AMT   
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + "' ");               //8    CURR_AMT  
                        sb.AppendLine("  ,0 ");                                                                             //9    PRICE     
                        sb.AppendLine("  ,0 ");                                                                             //10   TOTAL_MONEY 
                        sb.AppendLine("  ,'' ");                                                                            //11   HEAT_NO     
                        sb.AppendLine("  ,'' ");                                                                            //12   HEAT_TIME 
                        sb.AppendLine("  ,'O' ");                                                                           //13   CHECK_YN    
                        sb.AppendLine("  ,'' ");                                                                            //14   ORDER_DATE 
                        sb.AppendLine("  ,'' ");                                                                            //15   ORDER_CD   
                        sb.AppendLine("  ,0 ");                                                                             //16   ORDER_SEQ   
                        sb.AppendLine("  ,'' ");                                                                            //17   COMMENT    
                        sb.AppendLine("  ,convert(varchar, getdate(), 120) ");                                              //18   INTIME     
                        sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");                                                 //19   INSTAFF    
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + "' ");               //20   TEMP_AMT  
                        sb.AppendLine("  ,'' ");                                                                            //21   STORAGE_CD  
                        sb.AppendLine("  ,'' ");                                                                            //22   LOC_CD    
                        sb.AppendLine("  ,'' ");                                                                            //23   LOC_NM      
                        sb.AppendLine("  ,'N' ");                                                                            //24   COMPLETE_YN      
                        sb.AppendLine(" ) ");

                        sb.AppendLine(" INSERT INTO F_BUY_DETAIL ( ");
                        sb.AppendLine(" BUY_DATE ");
                        sb.AppendLine(" ,BUY_CD ");
                        sb.AppendLine(" ,SEQ ");
                        sb.AppendLine(" ,RAW_MAT_CD ");
                        sb.AppendLine(" ,INPUT_DATE ");
                        sb.AppendLine(" ,INPUT_CD ");
                        sb.AppendLine(" ,INPUT_SEQ ");
                        sb.AppendLine(" ,TOTAL_AMT ");
                        sb.AppendLine(" ,TAX_CD ");
                        sb.AppendLine(" ,INSTAFF ");
                        sb.AppendLine(" ,INTIME ");
                        sb.AppendLine(" ,SUPPLY_MONEY ");
                        sb.AppendLine(" ,TAX_MONEY ");
                        sb.AppendLine(" )VALUES( ");
                        sb.AppendLine(" '" + input_date + "' ");
                        sb.AppendLine("  ,@bcd" + i + " ");
                        sb.AppendLine("  ,@bseq" + i + " ");
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ");
                        sb.AppendLine("  ,'" + input_date + "' ");
                        sb.AppendLine("  ,@cd" + i + " ");
                        sb.AppendLine("  ,@seq" + i + " ");
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + "' ");
                        sb.AppendLine("  ,(SELECT TAX_CD FROM N_RAW_CODE WHERE RAW_MAT_CD = '" + workRmGrid.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ) ");
                        sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");                                              
                        sb.AppendLine("  ,'" + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + "' ");
                        sb.AppendLine("  ,0 ");
                        sb.AppendLine("  ,0 ");
                        sb.AppendLine(" ) ");

                        sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                        sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + workRmGrid.Rows[i].Cells["EX_STOCK"].Value.ToString().Replace("-", "").Replace(",", "") + " ");
                        sb.AppendLine(" WHERE RAW_MAT_CD = '" + workRmGrid.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ");

                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_extra_raw");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable fn_Raw_Cust_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,A.MAIN_YN ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.COMMENT");
            sb.AppendLine(" , B.CUST_NM ");
            sb.AppendLine(" FROM N_RAW_CUST A ");
            sb.AppendLine("  LEFT OUTER JOIN N_CUST_CODE B ");
            sb.AppendLine("  ON B.CUST_CD = A.CUST_CD ");
            sb.AppendLine(condition);

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable dtBasicCd(string strTable, string strSearch)
        {
            DataTable dt = new DataTable();

            SqlDataAdapter da = new SqlDataAdapter();

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("     SELECT CODE, NAME, COMMNET ");
            sb.AppendLine("     FROM " + strTable);

            if (strSearch == null || strSearch.Trim() == "")
            { }
            else if (strSearch == "NAME")
            {
                sb.AppendLine(" order by NAME");
            }

            else
            {
                sb.AppendLine("     AND (CODE LIKE '%" + strSearch + "%' ");
                sb.AppendLine("     OR NAME LIKE '%" + strSearch + "%' ");
                sb.AppendLine("     OR COMMNET LIKE '%" + strSearch + "%') ");
            }
            SqlCommand cmd = new SqlCommand(sb.ToString());
            if (cmd.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            //**********2019.11.28 wnAdo.cs에서 14번째 줄 p_strConn으로 바꿔주기
            return wAdo.SqlCommandSelect(cmd);
        }

        public void insertBasicCd(string strTable, string strCd, string strName, string strRemark)
        {
            try
            {
                SqlConnection dbConn = new SqlConnection(Common.p_strConn);
                //SqlConnection dbConn = new SqlConnection(p_strConn_test);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" INSERT INTO " + strTable + " (CODE, NAME, COMMNET)");
                sb.AppendLine(" VALUES ('" + strCd + "', '" + strName + "', '" + strRemark + "')");

                SqlCommand cmd = new SqlCommand(sb.ToString(), dbConn);
                dbConn.Open();
                cmd.ExecuteNonQuery();
                dbConn.Close();
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                MessageBox.Show(e.ToString());
            }
        }

        public void updateBasicCd(string strTable, string strCd, string strName, string strRemark)
        {
            try
            {
                SqlConnection dbConn = new SqlConnection(Common.p_strConn);
                //SqlConnection dbConn = new SqlConnection(p_strConn_test);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" UPDATE " + strTable + " SET NAME = ' " + strName + "', COMMENT = '" + strRemark + "'");
                sb.AppendLine(" WHERE CODE = '" + strCd + "'");

                SqlCommand cmd = new SqlCommand(sb.ToString(), dbConn);
                dbConn.Open();
                cmd.ExecuteNonQuery();
                dbConn.Close();
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                MessageBox.Show(e.ToString());
            }
        }

        public void deleteBasicCd(string strTable, string strCd)
        {
            try
            {
                SqlConnection dbConn = new SqlConnection(Common.p_strConn);
                //SqlConnection dbConn = new SqlConnection(p_strConn_test);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" DELETE FROM " + strTable);
                sb.AppendLine(" WHERE CODE = '" + strCd + "'");

                SqlCommand cmd = new SqlCommand(sb.ToString(), dbConn);
                dbConn.Open();
                cmd.ExecuteNonQuery();
                dbConn.Close();
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                MessageBox.Show(e.ToString());
            }
        }

        public DataTable fn_raw_input_output_list(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" SELECT IO_GUBUN, RAW_MAT_CD, DATE, CD, AMT ,CVR_RATIO FROM ( ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'I' AS IO_GUBUN ");
            sb.AppendLine(" ,A.RAW_MAT_CD AS RAW_MAT_CD ");
            sb.AppendLine(" ,A.INPUT_DATE AS DATE ");
            sb.AppendLine(" ,A.INPUT_CD AS CD ");
            sb.AppendLine(" ,A.TOTAL_AMT AS AMT ");
            sb.AppendLine(" ,B.CVR_RATIO AS CVR_RATIO ");
            sb.AppendLine(" FROM F_RAW_DETAIL A ");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on B.RAW_MAT_CD = A.RAW_MAT_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'O' AS IO_GUBUN ");
            sb.AppendLine(" ,A.RAW_MAT_CD AS RAW_MAT_CD ");
            sb.AppendLine(" ,A.OUTPUT_DATE AS DATE ");
            sb.AppendLine(" ,A.OUTPUT_CD AS CD ");
            sb.AppendLine(" ,A.TOTAL_AMT AS AMT ");
            sb.AppendLine(" ,B.CVR_RATIO AS CVR_RATIO ");
            sb.AppendLine(" FROM F_RAW_OUTPUT A ");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on B.RAW_MAT_CD = A.RAW_MAT_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" ) A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        //2020-04-16 문세진 수정

        public DataTable fn_Raw_Ledger_List(string condition, string condition2)
        {

            StringBuilder sb2 = new StringBuilder();

            sb2.AppendLine("   select       ");
            sb2.AppendLine("   Z.INPUT_DATE AS INPUT_DATE        ");
            sb2.AppendLine("   ,AVG(ISNULL(Z.TOTAL_AMT,0)) AS  INPUT_AMT       ");
            sb2.AppendLine("   ,0 AS  OUTPUT_AMT       ");
            sb2.AppendLine("   from F_RAW_DETAIL Z         ");
            sb2.AppendLine("   where 1=1    ");
            sb2.AppendLine(condition);
            sb2.AppendLine("   group by Z.INPUT_DATE ,Z.INPUT_CD ,Z.SEQ  ");

            sb2.AppendLine("   union all    ");

            sb2.AppendLine("   select       ");
            sb2.AppendLine("   Z.OUTPUT_DATE AS INPUT_DATE      ");
            sb2.AppendLine("   ,0 AS INPUT_AMT       ");
            sb2.AppendLine("   ,AVG(ISNULL(Z.TOTAL_AMT/B.CVR_RATIO,0)) AS OUTPUT_AMT       ");
            sb2.AppendLine("   from F_RAW_OUTPUT Z        ");
            sb2.AppendLine("   LEFT OUTER JOIN N_RAW_CODE B     ");
            sb2.AppendLine("   ON B.RAW_MAT_CD = Z.RAW_MAT_CD     ");
            sb2.AppendLine("   where 1=1    ");
            sb2.AppendLine(condition2);
            sb2.AppendLine("   group by Z.OUTPUT_DATE ,Z.OUTPUT_CD ,Z.SEQ   ");

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   select '입고' as bun   ");
            sb.AppendLine("   ,A.INPUT_DATE  ");
            sb.AppendLine("   ,A.INPUT_DATE AS 일자명칭  ");
            sb.AppendLine("   ,A.INPUT_CD    ");
            sb.AppendLine("   ,Z.SEQ  ");
            sb.AppendLine("   ,C.CUST_NM AS CUST_NM  ");
            sb.AppendLine("   ,B.RAW_MAT_NM    ");
            sb.AppendLine("   ,B.RAW_MAT_GUBUN     ");
            sb.AppendLine("   ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = Z.UNIT_CD ) AS UNIT_NM    ");
            sb.AppendLine("   ,ISNULL(Z.TOTAL_AMT,0) AS INPUT_AMT ");
            sb.AppendLine("   ,0 AS OUTPUT_AMT ");
            sb.AppendLine("   ,'-' AS LOT_NO ");
            sb.AppendLine("   ,B.SPEC ");
            sb.AppendLine("   from F_RAW_DETAIL Z   ");
            sb.AppendLine("   left outer join F_RAW_INPUT A  ");
            sb.AppendLine("   on Z.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("   and Z.INPUT_CD = A.INPUT_CD   ");
            sb.AppendLine("   left outer join N_RAW_CODE B  ");
            sb.AppendLine("   on Z.RAW_MAT_CD = B.RAW_MAT_CD    ");
            sb.AppendLine("   left outer join N_CUST_CODE C   ");
            sb.AppendLine("   on A.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("   WHERE 1=1  ");
            sb.AppendLine(condition);

            sb.AppendLine("       union all   ");

            sb.AppendLine("   select '출고' as bun     ");
            sb.AppendLine("   ,Z.OUTPUT_DATE               ");
            sb.AppendLine("   ,Z.OUTPUT_DATE AS 일자명칭   ");
            sb.AppendLine("   ,Z.OUTPUT_CD                 ");
            sb.AppendLine("   ,Z.SEQ                       ");
            sb.AppendLine("   ,' - ' AS CUST_NM  ");
            sb.AppendLine("   ,B.RAW_MAT_NM                ");
            sb.AppendLine("   ,B.RAW_MAT_GUBUN             ");
            sb.AppendLine("   ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT ) AS UNIT_NM ");
            sb.AppendLine("   , 0 AS INPUT_AMT                        ");
            sb.AppendLine("   , ISNULL(Z.TOTAL_AMT / B.CVR_RATIO ,0) AS OUTPUT_AMT  ");
            sb.AppendLine("   ,Z.LOT_NO AS LOT_NO ");
            sb.AppendLine("   ,B.SPEC ");
            sb.AppendLine("   from F_RAW_OUTPUT Z                     ");
            sb.AppendLine("   left outer join N_RAW_CODE B            ");
            sb.AppendLine("   on Z.RAW_MAT_CD = B.RAW_MAT_CD          ");
            sb.AppendLine("   left outer join F_RAW_DETAIL D          ");
            sb.AppendLine("   on D.INPUT_DATE = Z.INPUT_DATE          ");
            sb.AppendLine("   AND D.INPUT_CD = Z.INPUT_CD             ");
            sb.AppendLine("   AND D.SEQ = Z.INPUT_SEQ                 ");
            sb.AppendLine("   WHERE 1=1                               ");

            sb.AppendLine(condition2);

            sb.AppendLine("       UNION ALL     ");
            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       'ㅎ' as bun     ");
            sb.AppendLine("       ,INPUT_DATE      ");
            sb.AppendLine("        ,'--- 일계 ---' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ     ");
            sb.AppendLine("         ,' - ' AS CUST_NM  ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,'' AS RAW_MAT_GUBUN        ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS LOT_NO ");
            sb.AppendLine("        ,'' AS SPEC ");
            sb.AppendLine("          FROM ( " + sb2.ToString());

            sb.AppendLine("        ) A group by A.INPUT_DATE        ");

            sb.AppendLine("        union all     ");

            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       '' as bun     ");
            sb.AppendLine("        ,left(INPUT_DATE,8)+'99' AS INPUT_DATE      ");
            sb.AppendLine("        ,'=== 월계 ===' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ     ");
            sb.AppendLine("        ,' - ' AS CUST_NM  ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,'' AS RAW_MAT_GUBUN        ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS LOT_NO ");
            sb.AppendLine("        ,'' AS SPEC ");
            sb.AppendLine("         FROM (  " + sb2.ToString());

            sb.AppendLine("        ) A group by left(A.INPUT_DATE,8) ");

            sb.AppendLine("        union all     ");

            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       '' as bun     ");
            sb.AppendLine("           ,left(INPUT_DATE,2)+'99-99-99' AS INPUT_DATE      ");
            sb.AppendLine("        ,'=== 합계 ===' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ     ");
            sb.AppendLine("        ,' - ' AS CUST_NM  ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,'' AS RAW_MAT_GUBUN        ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS LOT_NO ");
            sb.AppendLine("        ,'' AS SPEC ");
            sb.AppendLine("        FROM (   " + sb2.ToString());
            sb.AppendLine("        ) A group by left(A.INPUT_DATE,2) ");
            sb.AppendLine("      order by INPUT_DATE, bun, INPUT_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Input_Detail_List_Order_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   select A.ITEM_CD, (SELECT ITEM_NM FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD) AS ITEM_NM from F_ITEM_INPUT A   ");
            sb.AppendLine("   left outer join N_ITEM_COMP B   ");
            sb.AppendLine("   on A.ITEM_CD = B.ITEM_CD   ");
            sb.AppendLine(condition + "   ");
            sb.AppendLine("   GROUP BY A.ITEM_CD   ");
            sb.AppendLine("   ORDER BY COUNT(A.ITEM_CD) DESC ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_jumun(string jumun_date, string cust_cd, string comment, string req_date, string complete_yn, conDataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("declare @cd int ");
                sb.AppendLine(" select @cd = ISNULL(MAX(JUMUN_CD),0)+1 FROM F_JUMUN ");
                sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' ");

                sb.AppendLine("insert into F_JUMUN(");
                sb.AppendLine("     JUMUN_DATE ");
                sb.AppendLine("     ,JUMUN_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,DELIVERY_REQ_DATE ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,PLAN_YN ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + jumun_date + "' ");
                sb.AppendLine("     ,@cd ");
                sb.AppendLine("     ,'" + cust_cd + "' ");
                sb.AppendLine("     ,'" + req_date + "' ");
                sb.AppendLine("     ,'" + complete_yn + "' ");
                sb.AppendLine("     ,'" + comment + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine(" ) ");

                if (dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < dgv.Rows.Count; i++)
                    {

                        sb.AppendLine(" declare @seq" + i + " int ");
                        sb.AppendLine(" SELECT @seq" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_JUMUN_DETAIL ");
                        sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' AND JUMUN_CD = @cd ");

                        sb.AppendLine("insert into F_JUMUN_DETAIL (");
                        sb.AppendLine("     JUMUN_DATE ");
                        sb.AppendLine("     ,JUMUN_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,SPEC ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,AMOUNT ");
                        sb.AppendLine("     ,MONEY ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + jumun_date + "' ");
                        sb.AppendLine("     ,@cd ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["SPEC"].Value + "' ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }
                else
                {
                    MessageBox.Show("리스트가 비어있습니다.");
                    return 1;
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_Jumun");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable select_jumun_list(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  SELECT  ");
            sb.AppendLine("   A.JUMUN_DATE  ");
            sb.AppendLine("   ,A.JUMUN_CD ");
            sb.AppendLine("   ,A.CUST_CD ");
            sb.AppendLine("   ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD) AS CUST_NM ");
            sb.AppendLine("   ,A.DELIVERY_REQ_DATE AS RQ_DATE ");
            sb.AppendLine("   ,A.COMPLETE_YN ");
            sb.AppendLine("   ,A.COMMENT ");
            sb.AppendLine("   ,A.PLAN_YN ");
            sb.AppendLine("   ,B.CNT ");
            sb.AppendLine("   ,B.ITEM_CD ");
            sb.AppendLine("   ,(SELECT TAX_CD FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD) AS VAT_CD ");
            sb.AppendLine("   ,CASE WHEN B.CNT = 1  ");
            sb.AppendLine("    then (SELECT ITEM_NM FROM N_ITEM_CODE WHERE B.ITEM_CD = ITEM_CD) ");
            sb.AppendLine("    ELSE (SELECT ITEM_NM FROM N_ITEM_CODE WHERE B.ITEM_CD = ITEM_CD)+' 외 '+convert(nvarchar,B.CNT-1)+'개 제품' end as ITEM_NM ");
            sb.AppendLine("  FROM F_JUMUN A  ");
            sb.AppendLine("  left outer join (SELECT JUMUN_DATE,JUMUN_CD, COUNT(*) AS CNT,   ");
            sb.AppendLine("  MAX(ITEM_CD) AS ITEM_CD  ");
            sb.AppendLine("  FROM F_JUMUN_DETAIL A  ");
            sb.AppendLine("  group by A.JUMUN_DATE,A.JUMUN_CD) B  ");
            sb.AppendLine("  on A.JUMUN_DATE = B.JUMUN_DATE  ");
            sb.AppendLine("  and A.JUMUN_CD = B.JUMUN_CD  ");
            sb.AppendLine("  WHERE 1=1  ");
            sb.AppendLine(condition + "   ");
            sb.AppendLine("   ORDER BY A.JUMUN_DATE DESC ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_jumun_detail_list(string jumun_date, string jumun_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  SELECT  ");
            sb.AppendLine("    A.JUMUN_DATE  ");
            sb.AppendLine("   ,A.JUMUN_CD ");
            sb.AppendLine("   ,A.SEQ ");
            sb.AppendLine("   ,A.ITEM_CD ");
            sb.AppendLine("   ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD ) AS ITEM_NM ");
            sb.AppendLine("   ,A.SPEC ");
            sb.AppendLine("   ,A.UNIT_CD ");
            sb.AppendLine("   ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = A.UNIT_CD) AS UNIT_NM ");
            sb.AppendLine("   ,A.PRICE ");
            sb.AppendLine("   ,A.AMOUNT ");
            sb.AppendLine("   ,A.MONEY ");
            sb.AppendLine("   ,(SELECT VAT_CD FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD) AS TAX_CD ");
            sb.AppendLine("  FROM F_JUMUN_DETAIL A ");
            sb.AppendLine(" WHERE A.JUMUN_DATE = '" + jumun_date + "' and A.JUMUN_CD = '" + jumun_cd + "'   ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int deleteJumun(string jumun_date, string jumun_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_JUMUN ");
                sb.AppendLine("    where JUMUN_DATE = @JUMUN_DATE ");
                sb.AppendLine("    and JUMUN_CD = @JUMUN_CD ");

                sb.AppendLine("delete from F_JUMUN_DETAIL ");
                sb.AppendLine("    where JUMUN_DATE = @JUMUN_DATE ");
                sb.AppendLine("    and JUMUN_CD = @JUMUN_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@JUMUN_DATE", jumun_date);
                sCommand.Parameters.AddWithValue("@JUMUN_CD", jumun_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_JUMUN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int update_jumun(string jumun_date, string jumun_cd, string cust_cd, string comment, string req_date, string complete_yn, conDataGridView dgv, DataTable del_dt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("UPDATE F_JUMUN SET ");
                sb.AppendLine("     CUST_CD           ='" + cust_cd + "'        ");
                sb.AppendLine("     ,DELIVERY_REQ_DATE ='" + req_date + "'      ");
                sb.AppendLine("     ,COMPLETE_YN       ='" + complete_yn + "'   ");
                sb.AppendLine("     ,COMMENT           ='" + comment + "'       ");
                sb.AppendLine("     ,UPTIME            = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,UPSTAFF           = '" + Common.p_strStaffNo + "'    ");
                sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' and JUMUN_CD = '" + jumun_cd + "' ");

                if (dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < dgv.Rows.Count; i++)
                    {
                        if (dgv.Rows[i].Cells["SEQ"].Value == null || dgv.Rows[i].Cells["SEQ"].Value.Equals(""))
                        {
                            sb.AppendLine(" declare @seq" + i + " int ");
                            sb.AppendLine(" SELECT @seq" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_JUMUN_DETAIL ");
                            sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' AND JUMUN_CD = '" + jumun_cd + "' ");

                            sb.AppendLine("insert into F_JUMUN_DETAIL (");
                            sb.AppendLine("     JUMUN_DATE ");
                            sb.AppendLine("     ,JUMUN_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,SPEC ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,AMOUNT ");
                            sb.AppendLine("     ,MONEY ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + jumun_date + "' ");
                            sb.AppendLine("     ,'" + jumun_cd + "' ");
                            sb.AppendLine("     ,@seq" + i + " ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["SPEC"].Value + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("UPDATE  F_JUMUN_DETAIL SET ");
                            sb.AppendLine("     ITEM_CD    =  '" + dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,SPEC      =  '" + dgv.Rows[i].Cells["SPEC"].Value + "' ");
                            sb.AppendLine("     ,UNIT_CD   =  '" + dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,PRICE     =  '" + dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,AMOUNT    =  '" + dgv.Rows[i].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,MONEY     =  '" + dgv.Rows[i].Cells["TOTAL_MONEY"].Value.ToString().Replace(",", "") + "' ");
                            sb.AppendLine("     ,UPSTAFF   =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,UPTIME    =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  WHERE JUMUN_DATE = '" + jumun_date + "' and JUMUN_CD = '" + jumun_cd + "' and SEQ = '" + dgv.Rows[i].Cells["SEQ"].Value.ToString() + "'  ");
                        }
                    }

                    if (del_dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < del_dt.Rows.Count; i++)
                        {
                            sb.AppendLine(" delete from F_JUMUN_DETAIL WHERE ");
                            sb.AppendLine(" JUMUN_DATE = '" + del_dt.Rows[i]["JUMUN_DATE"].ToString() + "' ");
                            sb.AppendLine(" AND JUMUN_CD = '" + del_dt.Rows[i]["JUMUN_CD"].ToString() + "' ");
                            sb.AppendLine(" AND SEQ = '" + del_dt.Rows[i]["SEQ"].ToString() + "' ");
                        }
                    }

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_Jumun");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public bool isCustDayTotal(string inputDate, string cust_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select *  ");
            sb.AppendLine("  FROM T_CUST_DAY_TOTAL  ");
            sb.AppendLine("  WHERE INPUT_DATE ='" + inputDate + "' AND CUST_CD = '" + cust_cd + "'  ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return false;
            }
            DataTable dt = wAdo.SqlCommandSelect(sCommand);
            if (dt != null && dt.Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        public string Create_New_CustDayTotal(string input_date, string Cust_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("insert into T_CUST_DAY_TOTAL(");
            sb.AppendLine("     INPUT_DATE ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine(" ) values ( ");
            sb.AppendLine("      '" + input_date + "'  ");
            sb.AppendLine("      ,'" + Cust_cd + "'  ");
            sb.AppendLine(" ) ");

            return sb.ToString();
        }

        public string CustDayTotal_Change_Balance_Today(string input_date, string Cust_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  declare @lastBal decimal(18,6)   ");
            sb.AppendLine("  select @lastBal = (select top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + Cust_cd + "' and INPUT_DATE < '" + input_date + "' order by INPUT_DATE DESC)  ");

            sb.AppendLine("  update T_CUST_DAY_TOTAL SET  ");
            sb.AppendLine("   BALANCE_DAY = ISNULL(@lastBal,0) + S_TOTAL_MONEY   ");
            sb.AppendLine("  						- S_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  						- COL_TOTAL_MONEY  ");
            sb.AppendLine("  						+ P_TOTAL_MONEY  ");
            sb.AppendLine("  						- P_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  						- PAY_TOTAL_MONEY  ");
            sb.AppendLine("  						+ BALANCE_CHANGE  ");

            sb.AppendLine("  ,S_RS_SUPPLY_MONEY = S_SUPPLY_MONEY - S_BACK_SUPPLY_MONEY  ");
            sb.AppendLine("  ,S_RS_TAX_MONEY = S_TAX_MONEY - S_BACK_TAX_MONEY  ");
            sb.AppendLine("  ,S_RS_TOTAL_MONEY = S_TOTAL_MONEY - S_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  ,P_RS_SUPPLY_MONEY = P_SUPPLY_MONEY - P_BACK_SUPPLY_MONEY  ");
            sb.AppendLine("  ,P_RS_TAX_MONEY = P_TAX_MONEY - P_BACK_TAX_MONEY  ");
            sb.AppendLine("  ,P_RS_TOTAL_MONEY = P_TOTAL_MONEY - P_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  WHERE CUST_CD = '" + Cust_cd + "' AND INPUT_DATE = '" + input_date + "'  ");

            return sb.ToString();
        }

        public string CustDayTotal_Change_Balance(string input_date, string Cust_cd, string amt, string Condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   update T_CUST_DAY_TOTAL SET ");
            sb.AppendLine("   BALANCE_DAY = BALANCE_DAY " + Condition + " " + amt + " ");
            if (Cust_cd.Contains("CUST_CD"))
            {
                sb.AppendLine("  WHERE CUST_CD = " + Cust_cd + " AND INPUT_DATE > '" + input_date + "'  ");
            }
            else
            {
                sb.AppendLine("  WHERE CUST_CD = '" + Cust_cd + "' AND INPUT_DATE > '" + input_date + "'  ");
            }

            return sb.ToString();
        }


        public DataTable fn_Sales_Ledger_List(string cust_cd, string start_date, string end_date)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("    select '매출' as bun     ");
            sb.AppendLine("         ,A.SALES_DATE      ");
            sb.AppendLine("         ,A.SALES_DATE AS 일자명칭     ");
            sb.AppendLine("         ,A.SALES_CD      ");
            sb.AppendLine("         ,A.SEQ                                                                                                         ");
            sb.AppendLine("         ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and Z.SALES_GUBUN = S_CODE ) AS INPUT_GUBUN             ");
            sb.AppendLine("         ,Z.CUST_CD                                                                                                     ");
            sb.AppendLine("         ,C.CUST_NM                                                                                                     ");
            sb.AppendLine("         ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='900' and A.TAX_CD = S_CODE) AS TAX_NM                          ");
            sb.AppendLine("         ,A.TAX_CD   AS VAT_CD                                                                                                   ");
            sb.AppendLine("         ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='910' and Z.TAX_CD = S_CODE) AS VAT_NM                          ");
            sb.AppendLine("         ,Z.TAX_CD                                                                                                  ");
            sb.AppendLine("         ,B.ITEM_NM AS PRODUCT_NM                                                                                       ");
            sb.AppendLine("         , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT                                                                           ");
            sb.AppendLine("         , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE                                                                       ");
            sb.AppendLine("         , case when A.TAX_CD = '1' and Z.TAX_CD = '1'                                                                  ");
            sb.AppendLine("          then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )                                                             ");
            sb.AppendLine("          else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY                                                  ");
            sb.AppendLine("          ,case when Z.TAX_CD = '2' OR A.TAX_CD = '2'                                                                   ");
            sb.AppendLine("          then 0                                                                                                        ");
            sb.AppendLine("          else case when Z.TAX_CD = '0'                                                                                 ");
            sb.AppendLine("          then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1                                                                        ");
            sb.AppendLine("          else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY    ");
            sb.AppendLine("         ,case when Z.TAX_CD != '2'                                                                                         ");
            sb.AppendLine("          then                                                                                                              ");
            sb.AppendLine("    		case when A.TAX_CD = '2'                                                                                           ");
            sb.AppendLine("    			then                                                                                                           ");
            sb.AppendLine("    				(A.TOTAL_AMT*A.TOTAL_PRICE)                                                                                ");
            sb.AppendLine("    			else                                                                                                           ");
            sb.AppendLine("    				case when Z.TAX_CD ='1'                                                                                    ");
            sb.AppendLine("    				then (A.TOTAL_AMT*A.TOTAL_PRICE)                                                                           ");
            sb.AppendLine("    				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end                                     ");
            sb.AppendLine("    				end                                                                                                        ");
            sb.AppendLine("          else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY                                                             ");
            sb.AppendLine("         ,0			   AS SOO_MONEY                                                                                        ");
            sb.AppendLine("         ,0			   AS DC_MONEY                                                                                         ");
            sb.AppendLine("         ,0			   AS TOTAL_SOO_MONEY                                                                                  ");
            sb.AppendLine("         ,0			   AS BALANCE                                                                                          ");
            sb.AppendLine("         , B.SPEC                                                                                                           ");
            sb.AppendLine("         , A.LOT_NO                                                                                                           ");
            sb.AppendLine("         , A.LOT_SUB                                                                                                           ");
            sb.AppendLine("     from F_SALES Z                                                                                                         ");
            sb.AppendLine("     left outer join F_SALES_DETAIL A                                                                                       ");
            sb.AppendLine("     on Z.SALES_DATE = A.SALES_DATE                                                                                         ");
            sb.AppendLine("         and Z.SALES_CD = A.SALES_CD                                                                                        ");
            sb.AppendLine("     left outer join N_ITEM_CODE B                                                                                          ");
            sb.AppendLine("     on A.ITEM_CD = B.ITEM_CD                                                                                               ");
            sb.AppendLine("     left outer join N_CUST_CODE C                                                                                          ");
            sb.AppendLine("     on Z.CUST_CD = C.CUST_CD                                                                                               ");
            sb.AppendLine("     left outer join F_ITEM_INPUT D                                                                                         ");
            sb.AppendLine("     on D.INPUT_DATE = A.INPUT_DATE                                                                                         ");
            sb.AppendLine("     and D.INPUT_CD = A.INPUT_CD                                                                                            ");
            sb.AppendLine("    where Z.SALES_DATE >= '" + start_date + "' and  Z.SALES_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'                            ");
            sb.AppendLine("                                                                                                                            ");
            sb.AppendLine("    union all                                                                                                               ");
            sb.AppendLine("    SELECT                                                                                                                  ");
            sb.AppendLine("    'ㅎ' as bun                                                                                                             ");
            sb.AppendLine("    	 ,SALES_DATE                                                                                                           ");
            sb.AppendLine("         ,'--- 일계 ---' AS 일자명칭                                                                                        ");
            sb.AppendLine("         ,'999999' AS INPUT_CD                                                                                              ");
            sb.AppendLine("         ,'' AS SEQ                                                                                                         ");
            sb.AppendLine("         ,'' AS INPUT_GUBUN                                                                                                 ");
            sb.AppendLine("         ,'' AS CUST_CD                                                                                                     ");
            sb.AppendLine("         ,'' AS CUST_NM                                                                                                     ");
            sb.AppendLine("         ,'' AS TAX_CD                                                                                                      ");
            sb.AppendLine("         ,'' AS TAX_NM                                                                                                      ");
            sb.AppendLine("         ,'' AS VAT_CD                                                                                                      ");
            sb.AppendLine("         ,'' AS VAT_NM                                                                                                      ");
            sb.AppendLine("         ,'' AS  PRODUCT_NM                                                                                                 ");
            sb.AppendLine("         ,sum(TOTAL_AMT) AS  TOTAL_AMT                                                                                      ");
            sb.AppendLine("         ,0 AS  TOTAL_PRICE                                                                                                 ");
            sb.AppendLine("    	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                                                      ");
            sb.AppendLine("    	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY                                                                            ");
            sb.AppendLine("    	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY                                                                                    ");
            sb.AppendLine("    	   ,sum(SOO_MONEY) AS SOO_MONEY                                                                                        ");
            sb.AppendLine("    	   ,sum(DC_MONEY) AS DC_MONEY                                                                                          ");
            sb.AppendLine("    	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY                                                                            ");
            sb.AppendLine("    	   ,ISNULL((SELECT BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE = SALES_DATE),0) AS BALANCE  ");
            sb.AppendLine("         ,'' AS  SPEC                                                                                                         ");
            sb.AppendLine("         ,'' AS  LOT_NO                                                                                                         ");
            sb.AppendLine("         ,'' AS  LOT_SUB                                                                                                        ");
            sb.AppendLine("    		 FROM (    select                                                                                                    ");
            sb.AppendLine("    			 Z.SALES_DATE AS SALES_DATE                                                                                      ");
            sb.AppendLine("    			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT                                                                                ");
            sb.AppendLine("    			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE                                                                            ");
            sb.AppendLine("    			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                                                 ");
            sb.AppendLine("    			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY                                                                       ");
            sb.AppendLine("    			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY                                                                         ");
            sb.AppendLine("    			 , 0 AS SOO_MONEY                                                                                                ");
            sb.AppendLine("    			 , 0 AS DC_MONEY                                                                                                 ");
            sb.AppendLine("    			 , 0 AS TOTAL_SOO_MONEY                                                                                          ");
            sb.AppendLine("    		 from F_SALES Z                                                                                                      ");
            sb.AppendLine("    		 left outer join F_SALES_DETAIL A                                                                                    ");
            sb.AppendLine("    		 on Z.SALES_DATE = A.SALES_DATE                                                                                      ");
            sb.AppendLine("    			 and Z.SALES_CD = A.SALES_CD                                                                                     ");
            sb.AppendLine("    		 where 1=1                                                                                                           ");
            sb.AppendLine("  and Z.SALES_DATE >= '" + start_date + "' and  Z.SALES_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'                                  ");
            sb.AppendLine("    		 group by Z.SALES_DATE , Z.SALES_CD                                                                                  ");
            sb.AppendLine("    		                                                                                                                     ");
            sb.AppendLine("    		                                                                                                                     ");
            sb.AppendLine("    		 union all                                                                                                           ");
            sb.AppendLine("  		 select                                                                                                              ");
            sb.AppendLine("  			 Z.SOO_DATE AS SALES_DATE                                                                                        ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT                                                                                               ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE                                                                                             ");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY                                                                                       ");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY                                                                                          ");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY                                                                                              ");
            sb.AppendLine("  			 ,AVG(ISNULL(SOO_MONEY,0)) AS SOO_MONEY                                                                          ");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY                                                                            ");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_SOO_MONEY                                                                  ");
            sb.AppendLine("  		 from F_COLLECT Z                                                                                                    ");
            sb.AppendLine("  		 where 1=1                                                                                                           ");
            sb.AppendLine("  and Z.SOO_DATE >= '" + start_date + "' and Z.SOO_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'                                       ");
            sb.AppendLine("  		 group by Z.SOO_DATE , Z.SOO_CD                                                                                      ");
            sb.AppendLine("                                                                                                                              ");
            sb.AppendLine("  	) A group by A.SALES_DATE                                                                                                ");
            sb.AppendLine("    union all                                                                                                                 ");
            sb.AppendLine("    SELECT                                                                                                                    ");
            sb.AppendLine("    '' as bun                                                                                                                 ");
            sb.AppendLine("    	 ,left(SALES_DATE,8)+'99' AS SALES_DATE                                                                                  ");
            sb.AppendLine("         ,'=== 월계 ===' AS 일자명칭                                                                                          ");
            sb.AppendLine("         ,'999999' AS INPUT_CD                                                                                                ");
            sb.AppendLine("         ,'' AS SEQ                                                                                                           ");
            sb.AppendLine("         ,'' AS INPUT_GUBUN                                                                                                   ");
            sb.AppendLine("         ,'' AS CUST_CD                                                                                                       ");
            sb.AppendLine("         ,'' AS CUST_NM                                                                                                       ");
            sb.AppendLine("         ,'' AS TAX_CD                                                                                                        ");
            sb.AppendLine("         ,'' AS TAX_NM                                                                                                        ");
            sb.AppendLine("         ,'' AS VAT_CD                                                                                                        ");
            sb.AppendLine("         ,'' AS VAT_NM                                                                                                        ");
            sb.AppendLine("         ,'' AS  PRODUCT_NM                                                                                                   ");
            sb.AppendLine("          ,sum(TOTAL_AMT) AS  TOTAL_AMT                                                                                       ");
            sb.AppendLine("          ,0 AS  TOTAL_PRICE                                                                                                  ");
            sb.AppendLine("    	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                                                        ");
            sb.AppendLine("    	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY                                                                              ");
            sb.AppendLine("    	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY                                                                                      ");
            sb.AppendLine("    	   ,sum(SOO_MONEY) AS SOO_MONEY                                                                                          ");
            sb.AppendLine("    	   ,sum(DC_MONEY) AS DC_MONEY                                                                                            ");
            sb.AppendLine("    	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY                                                                              ");
            sb.AppendLine("    	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(SALES_DATE)  order by INPUT_DATE DESC),0) AS BALANCE     ");
            sb.AppendLine("         ,'' AS  SPEC                                                                             ");
            sb.AppendLine("         ,'' AS  LOT_NO                                                                             ");
            sb.AppendLine("         ,'' AS  LOT_SUB                                                                             ");
            sb.AppendLine("    		 FROM (    select                                                                        ");
            sb.AppendLine("    			 Z.SALES_DATE AS SALES_DATE                                                          ");
            sb.AppendLine("    			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT                                                    ");
            sb.AppendLine("    			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE                                                ");
            sb.AppendLine("    			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                     ");
            sb.AppendLine("    			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY                                           ");
            sb.AppendLine("    			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY                                             ");
            sb.AppendLine("    			 , 0 AS SOO_MONEY                                                                    ");
            sb.AppendLine("    			 , 0 AS DC_MONEY                                                                     ");
            sb.AppendLine("    			 , 0 AS TOTAL_SOO_MONEY                                                              ");
            sb.AppendLine("    		 from F_SALES Z                                                                          ");
            sb.AppendLine("    		 left outer join F_SALES_DETAIL A                                                        ");
            sb.AppendLine("    		 on Z.SALES_DATE = A.SALES_DATE                                                          ");
            sb.AppendLine("    			 and Z.SALES_CD = A.SALES_CD                                                         ");
            sb.AppendLine("    		 where 1=1                                                                               ");
            sb.AppendLine("  and Z.SALES_DATE >= '" + start_date + "' and  Z.SALES_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'      ");
            sb.AppendLine("                                                                                                  ");
            sb.AppendLine("    		 group by Z.SALES_DATE , Z.SALES_CD                                                      ");
            sb.AppendLine("    		 union all                                                                               ");
            sb.AppendLine("  		 select                                                                                  ");
            sb.AppendLine("  			 Z.SOO_DATE AS SALES_DATE                                                            ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT                                                                   ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE                                                                 ");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY                                                           ");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY                                                              ");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY                                                                  ");
            sb.AppendLine("  			 ,AVG(ISNULL(SOO_MONEY,0)) AS SOO_MONEY                                              ");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY                                                ");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_SOO_MONEY                                      ");
            sb.AppendLine("  		 from F_COLLECT Z                                                                        ");
            sb.AppendLine("  		 where 1=1                                                                               ");
            sb.AppendLine("  and Z.SOO_DATE >= '" + start_date + "' and Z.SOO_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'           ");
            sb.AppendLine("  		 group by Z.SOO_DATE , Z.SOO_CD                                                          ");
            sb.AppendLine("                                                                                                  ");
            sb.AppendLine("     ) A group by left(A.SALES_DATE,8)                                                            ");
            sb.AppendLine("    union all                                                                                     ");
            sb.AppendLine("    SELECT                                                                                        ");
            sb.AppendLine("    '' as bun                                                                                     ");
            sb.AppendLine("    	 ,left(SALES_DATE,2)+'99-99-99' AS SALES_DATE                                                ");
            sb.AppendLine("         ,'=== 합계 ===' AS 일자명칭                                                              ");
            sb.AppendLine("         ,'999999' AS INPUT_CD                                                                    ");
            sb.AppendLine("         ,'' AS SEQ                                                                               ");
            sb.AppendLine("         ,'' AS INPUT_GUBUN                                                                       ");
            sb.AppendLine("         ,'' AS CUST_CD                                                                           ");
            sb.AppendLine("         ,'' AS CUST_NM                                                                           ");
            sb.AppendLine("         ,'' AS TAX_CD                                                                            ");
            sb.AppendLine("         ,'' AS TAX_NM                                                                            ");
            sb.AppendLine("         ,'' AS VAT_CD                                                                            ");
            sb.AppendLine("         ,'' AS VAT_NM                                                                            ");
            sb.AppendLine("         ,'' AS  PRODUCT_NM                                                                       ");
            sb.AppendLine("         ,sum(TOTAL_AMT) AS  TOTAL_AMT                                                            ");
            sb.AppendLine("         ,0 AS  TOTAL_PRICE                                                                       ");
            sb.AppendLine("    	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                            ");
            sb.AppendLine("    	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY                                                  ");
            sb.AppendLine("    	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY                                                          ");
            sb.AppendLine("    	   ,sum(SOO_MONEY) AS SOO_MONEY                                                              ");
            sb.AppendLine("    	   ,sum(DC_MONEY) AS DC_MONEY                                                                ");
            sb.AppendLine("    	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY                                                  ");
            sb.AppendLine("    	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(SALES_DATE)  order by INPUT_DATE DESC),0) AS BALANCE    ");
            sb.AppendLine("         ,'' AS  SPEC                                                                               ");
            sb.AppendLine("         ,'' AS  LOT_NO                                                                             ");
            sb.AppendLine("         ,'' AS  LOT_SUB                                                                             ");
            sb.AppendLine("     FROM (    select                                                                               ");
            sb.AppendLine("    			 Z.SALES_DATE AS SALES_DATE                                                            ");
            sb.AppendLine("    			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT                                                      ");
            sb.AppendLine("    			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE                                                  ");
            sb.AppendLine("    			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY                                       ");
            sb.AppendLine("    			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY                                             ");
            sb.AppendLine("    			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY                                               ");
            sb.AppendLine("    			 , 0 AS SOO_MONEY                                                                      ");
            sb.AppendLine("    			 , 0 AS DC_MONEY                                                                       ");
            sb.AppendLine("    			 , 0 AS TOTAL_SOO_MONEY                                                                ");
            sb.AppendLine("    		 from F_SALES Z                                                                            ");
            sb.AppendLine("    		 left outer join F_SALES_DETAIL A                                                          ");
            sb.AppendLine("    		 on Z.SALES_DATE = A.SALES_DATE                                                            ");
            sb.AppendLine("    			 and Z.SALES_CD = A.SALES_CD                                                           ");
            sb.AppendLine("    		 where 1=1                                                                                 ");
            sb.AppendLine("  and Z.SALES_DATE >= '" + start_date + "' and  Z.SALES_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'        ");
            sb.AppendLine("                                                                                                    ");
            sb.AppendLine("    		 group by Z.SALES_DATE , Z.SALES_CD                                                        ");
            sb.AppendLine("    		 union all                                                                                 ");
            sb.AppendLine("  		 select                                                                                    ");
            sb.AppendLine("  			 Z.SOO_DATE AS SALES_DATE                                                              ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT                                                                     ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE                                                                   ");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY                                                             ");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY                                                                ");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY                                                                    ");
            sb.AppendLine("  			 ,AVG(ISNULL(SOO_MONEY,0)) AS SOO_MONEY                                                ");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY                                                  ");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_SOO_MONEY                                        ");
            sb.AppendLine("  		 from F_COLLECT Z                                                                          ");
            sb.AppendLine("  		 where 1=1                                                                                 ");
            sb.AppendLine("  and Z.SOO_DATE >= '" + start_date + "' and Z.SOO_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'             ");
            sb.AppendLine("  		 group by Z.SOO_DATE , Z.SOO_CD                                                            ");
            sb.AppendLine("                                                                                                    ");
            sb.AppendLine("     ) A group by left(A.SALES_DATE,2)                                                              ");
            sb.AppendLine("    union all                                                                                       ");
            sb.AppendLine("    select                                                                                          ");
            sb.AppendLine("    	 '수금' as bun                                                                                 ");
            sb.AppendLine("    	 ,SOO_DATE AS SALES_DATE                                                                       ");
            sb.AppendLine("         ,SOO_DATE AS 일자명칭                                                                      ");
            sb.AppendLine("         ,SOO_CD AS INPUT_CD                                                                        ");
            sb.AppendLine("         ,SOO_CD AS SEQ                                                                             ");
            sb.AppendLine("         ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and SOO_GUBUN = S_CODE) AS INPUT_GUBUN      ");
            sb.AppendLine("         ,'' AS CUST_CD                                                                     ");
            sb.AppendLine("         ,'' AS CUST_NM                                                                     ");
            sb.AppendLine("         ,'' AS TAX_CD                                                                      ");
            sb.AppendLine("         ,'' AS TAX_NM                                                                      ");
            sb.AppendLine("         ,'' AS VAT_CD금                                                                    ");
            sb.AppendLine("         ,'' AS VAT_NM                                                                      ");
            sb.AppendLine("         ,'' AS  PRODUCT_NM                                                                 ");
            sb.AppendLine("         , 0 AS  TOTAL_AMT                                                                  ");
            sb.AppendLine("         , 0 AS  TOTAL_PRICE                                                                ");
            sb.AppendLine("    	   , 0 AS TOTAL_SUPPLY_MONEY                                                           ");
            sb.AppendLine("    	   , 0 AS TOTAL_TAX_MONEY                                                              ");
            sb.AppendLine("    	   , 0 AS TOTAL_MONEY                                                                  ");
            sb.AppendLine("    	   , SOO_MONEY AS SOO_MONEY                                                            ");
            sb.AppendLine("    	   , DC_MONEY AS DC_MONEY                                                              ");
            sb.AppendLine("    	   , TOTAL_MONEY AS TOTAL_SOO_MONEY                                                    ");
            sb.AppendLine("          ,0 AS BALANCE                                                                     ");
            sb.AppendLine("         , '' AS  SPEC                                                                      ");
            sb.AppendLine("         ,'' AS  LOT_NO                                                                             ");
            sb.AppendLine("         ,'' AS  LOT_SUB                                                                             ");
            sb.AppendLine("     from F_COLLECT Z                                                                       ");
            sb.AppendLine("    where 1=1                                                                               ");
            sb.AppendLine("  and Z.SOO_DATE >= '" + start_date + "' and Z.SOO_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'     ");
            sb.AppendLine("    union all                                                                               ");
            sb.AppendLine("    select  top 1                                                                           ");
            sb.AppendLine("    	 '' as bun                                                                             ");
            sb.AppendLine("    	 ,'0000-00-00' AS SALES_DATE                                                           ");
            sb.AppendLine("         ,'== 전잔고 ==' AS 일자명칭                                                        ");
            sb.AppendLine("         ,'' AS INPUT_CD                                                                    ");
            sb.AppendLine("         ,'' AS SEQ                                                                         ");
            sb.AppendLine("         ,'' AS INPUT_GUBUN                                                                 ");
            sb.AppendLine("         ,'' AS CUST_CD                                                                     ");
            sb.AppendLine("         ,'' AS CUST_NM                                                                     ");
            sb.AppendLine("         ,'' AS TAX_CD                                                                      ");
            sb.AppendLine("         ,'' AS TAX_NM                                                                      ");
            sb.AppendLine("         ,'' AS VAT_CD금                                                                    ");
            sb.AppendLine("         ,'' AS VAT_NM                                                                      ");
            sb.AppendLine("         ,'' AS  PRODUCT_NM                                                                 ");
            sb.AppendLine("         , 0 AS  TOTAL_AMT                                                                  ");
            sb.AppendLine("         , 0 AS  TOTAL_PRICE                                                                ");
            sb.AppendLine("    	   , 0 AS TOTAL_SUPPLY_MONEY                                                           ");
            sb.AppendLine("    	   , 0 AS TOTAL_TAX_MONEY                                                              ");
            sb.AppendLine("    	   , 0 AS TOTAL_MONEY                                                                  ");
            sb.AppendLine("    	   , 0 AS SOO_MONEY                                                                    ");
            sb.AppendLine("    	   , 0 AS DC_MONEY                                                                     ");
            sb.AppendLine("    	   , 0 AS TOTAL_SOO_MONEY                                                              ");
            sb.AppendLine("         ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= '" + start_date + "' ORDER BY INPUT_DATE DESC),0) AS BALANCE     ");
            sb.AppendLine("         , '' AS  SPEC        ");
            sb.AppendLine("         ,'' AS  LOT_NO                                                                             ");
            sb.AppendLine("         ,'' AS  LOT_SUB                                                                             ");
            sb.AppendLine("     order by A.SALES_DATE, bun, A.SALES_CD, A.SEQ        ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Sales_Detail_Order_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select   ");
            sb.AppendLine("  D.ITEM_CD AS ITEM_CD ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE D.ITEM_CD = ITEM_CD ) AS ITEM_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("  group by A.CUST_CD,D.ITEM_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Buy_Detail_Order_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("      select    ");
            sb.AppendLine("     D.RAW_MAT_CD AS ITEM_CD  ");
            sb.AppendLine("     ,A.CUST_CD   ");
            sb.AppendLine("     ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM   ");
            sb.AppendLine("     ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY   ");
            sb.AppendLine("     ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE D.RAW_MAT_CD = RAW_MAT_CD ) AS ITEM_NM   ");
            sb.AppendLine("     from F_BUY_DETAIL D   ");
            sb.AppendLine("     left outer join F_BUY A    ");
            sb.AppendLine("     on A.BUY_DATE = D.BUY_DATE   ");
            sb.AppendLine("     and A.BUY_CD = D.BUY_CD   ");
            sb.AppendLine(condition);
            sb.AppendLine("     group by A.CUST_CD,D.RAW_MAT_CD   ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public int insertItemOut_with_Collect(
            string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , string vat_cd
        , string jumun_date
        , string jumun_cd
        , string all_supply_money
        , string all_tax_money
        , string all_total_money
        , string soo_gubun
        , string soo_money
        , string dc_money
        , string total_soo_money
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(convert(int,MAX(OUTPUT_CD)),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @sales_seq int ");
                sb.AppendLine("select @sales_seq =ISNULL(convert(int,MAX(SALES_CD)),0)+1 from F_SALES ");
                sb.AppendLine("where SALES_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @soo_seq int ");
                sb.AppendLine("select @soo_seq = ISNULL(convert(int,MAX(SOO_CD)),0)+1 from F_COLLECT ");
                sb.AppendLine("where SOO_DATE = '" + out_date + "'  ");

                //제품 출고 
                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,JUMUN_DATE ");
                sb.AppendLine("     ,JUMUN_CD ");
                sb.AppendLine("     ,SALES_DATE ");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + cmb_stor + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + jumun_date + "' ");
                sb.AppendLine("     ,'" + jumun_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine(" ) ");
                //제품 출고

                //매출 등록
                sb.AppendLine("insert into F_SALES(");
                sb.AppendLine("     SALES_DATE");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine("     ,SALES_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,OUTPUT_DATE ");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_supply_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_tax_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + vat_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");
                //매출 등록

                //수금등록
                sb.AppendLine("insert into F_COLLECT(");
                sb.AppendLine(" SOO_DATE ");
                sb.AppendLine(" ,SOO_CD ");
                sb.AppendLine(" ,SOO_GUBUN ");
                sb.AppendLine(" ,CUST_CD ");
                sb.AppendLine(" ,SOO_MONEY ");
                sb.AppendLine(" ,DC_MONEY ");
                sb.AppendLine(" ,TOTAL_MONEY ");
                sb.AppendLine(" ,COMMENT ");
                sb.AppendLine(" ,INSTAFF ");
                sb.AppendLine(" ,INTIME ");
                sb.AppendLine(" ,OUTPUT_DATE ");
                sb.AppendLine(" ,OUTPUT_CD ");
                sb.AppendLine(" ) VALUES ( ");
                sb.AppendLine(" '" + out_date + "' ");
                sb.AppendLine(" ,@soo_seq ");
                sb.AppendLine(" ,'" + soo_gubun + "' ");
                sb.AppendLine(" ,'" + txt_cust_cd + "' ");
                sb.AppendLine(" ," + soo_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + dc_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + total_soo_money.Replace(",", "") + " ");
                sb.AppendLine(" ,'#매출 " + out_date + "/' + convert(nvarchar,@sales_seq) ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,'" + out_date + "' ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ) ");
                //수금등록

                //주문 납품 완료
                sb.AppendLine(" UPDATE F_JUMUN ");
                sb.AppendLine(" SET COMPLETE_YN = 'Y' ");
                sb.AppendLine(" WHERE JUMUN_DATE = '" + jumun_date + "' and JUMUN_CD = '" + jumun_cd + "'  ");
                //주문 납품 완료


                //거래처 잔고 상승! 
                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE +'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");



                bool isCustDay = isCustDayTotal(out_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(out_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + " + all_total_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_MONEY = COL_MONEY + " + soo_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dc_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + total_soo_money.Replace(",", "") + "  ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");





                sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , total_soo_money.Replace(",", "")
                    , "-"));

                //거래처 잔고 상승! 



                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");


                        sb.AppendLine("declare @sales_seq" + i + " int ");
                        sb.AppendLine("select @sales_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_SALES_DETAIL ");
                        sb.AppendLine("where SALES_DATE = '" + out_date + "' ");
                        sb.AppendLine("and SALES_CD =  @sales_seq ");

                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");                                                            //1
                        sb.AppendLine("     ,OUTPUT_CD ");                                                             //2
                        sb.AppendLine("     ,SEQ ");                                                                   //3
                        sb.AppendLine("     ,LOT_NO ");                                                                //4
                        sb.AppendLine("     ,LOT_SUB ");                                                               //5
                        sb.AppendLine("     ,ITEM_CD ");                                                               //6
                        sb.AppendLine("     ,UNIT_CD ");                                                               //7
                        sb.AppendLine("     ,OUTPUT_AMT ");                                                            //8
                        sb.AppendLine("     ,PRICE ");                                                                 //9
                        sb.AppendLine("     ,TOTAL_MONEY ");                                                           //10
                        sb.AppendLine("     ,INPUT_DATE ");                                                            //11
                        sb.AppendLine("     ,INPUT_CD ");                                                              //12
                        sb.AppendLine("     ,TAX_CD ");                                                                //13
                        sb.AppendLine("     ,CUST_CD ");                                                               //14
                        sb.AppendLine("     ,INSTAFF ");                                                               //15
                        sb.AppendLine("     ,INTIME ");                                                                //16
                        sb.AppendLine("     ,INP_SEQ "); // alter table f_item_out_detail add INP_SEQ nvarchar (10)    //17
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                      //1
                        sb.AppendLine("      ,@seq ");                                                                                  //2
                        sb.AppendLine("     ,@out_seq" + i + " ");                                                                      //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                 //4
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                //5
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                //6
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");                                //7
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");    //8
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");         //9
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");   //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                             //11
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                               //12
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                 //13
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");                                //14
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                          //15
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                      //16
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_SEQ"].Value + "' ");                              //17
                        sb.AppendLine("  )");

                        sb.AppendLine("insert into F_SALES_DETAIL(");
                        sb.AppendLine("      SALES_DATE   ");      //1
                        sb.AppendLine("     ,SALES_CD    ");       //2
                        sb.AppendLine("     ,SEQ    ");            //3
                        sb.AppendLine("     ,ITEM_CD    ");        //4
                        sb.AppendLine("     ,OUTPUT_DATE    ");    //5
                        sb.AppendLine("     ,OUTPUT_CD    ");      //6
                        sb.AppendLine("     ,OUTPUT_SEQ    ");     //7
                        sb.AppendLine("     ,INPUT_DATE    ");     //8
                        sb.AppendLine("     ,INPUT_CD    ");       //9
                        sb.AppendLine("     ,LOT_NO    ");         //10
                        sb.AppendLine("     ,LOT_SUB    ");        //11
                        sb.AppendLine("     ,TOTAL_AMT    ");      //12
                        sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                        sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                        sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                        sb.AppendLine("     ,TAX_MONEY    ");      //16
                        sb.AppendLine("     ,INTIME    ");         //17
                        sb.AppendLine("     ,INSTAFF    ");        //18
                        sb.AppendLine("     ,PRINT_YN    ");       //19
                        sb.AppendLine("     ,TAX_CD    ");         //20
                        sb.AppendLine("  ) values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                               //1
                        sb.AppendLine("      ,@sales_seq ");                                                                                     //2
                        sb.AppendLine("     ,@sales_seq" + i + " ");                                                                             //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                         //4
                        sb.AppendLine("     ,'" + out_date + "' ");                                                                              //5
                        sb.AppendLine("     ,@seq  ");                                                                                           //6
                        sb.AppendLine("     ,@out_seq" + i + "  ");                                                                              //7
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                                      //8
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                                        //9
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                          //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                         //11
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");             //12
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                        sb.AppendLine("     ,'N' ");                                                                                             //19
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                          //20
                        sb.AppendLine("  )");




                        sb.AppendLine(" declare @chk" + i + " int  ");
                        sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                        sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                        sb.AppendLine(" if @chk" + i + " > 0  ");
                        sb.AppendLine(" begin  ");
                        sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                        sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                        sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                        sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("      AND P_GUBUN = '2' ");
                        sb.AppendLine(" end ");
                        sb.AppendLine(" else begin ");
                        sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                        sb.AppendLine("      CUST_CD ");
                        sb.AppendLine("      ,PROD_CD ");
                        sb.AppendLine("      ,B_BOX_PRICE ");
                        sb.AppendLine("      ,S_BOX_PRICE ");
                        sb.AppendLine("      ,UNIT_PRICE ");
                        sb.AppendLine("      ,INSTAFF ");
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,P_GUBUN ");
                        sb.AppendLine("   )VALUES(  ");
                        sb.AppendLine("   '" + txt_cust_cd + "'  ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("   ,'2' ");
                        sb.AppendLine(" ) ");
                        sb.AppendLine(" end ");
                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }
                Debug.WriteLine(sb);
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_SALES_MES");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertItemOut_with_Collect(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , string vat_cd
        , string all_supply_money
        , string all_tax_money
        , string all_total_money
        , string soo_gubun
        , string soo_money
        , string dc_money
        , string total_soo_money
        , conDataGridView item_out_dgv
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(convert(int,MAX(OUTPUT_CD)),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @sales_seq int ");
                sb.AppendLine("select @sales_seq =ISNULL(convert(int,MAX(SALES_CD)),0)+1 from F_SALES ");
                sb.AppendLine("where SALES_DATE = '" + out_date + "' ");

                sb.AppendLine("declare @soo_seq int ");
                sb.AppendLine("select @soo_seq = ISNULL(convert(int,MAX(SOO_CD)),0)+1 from F_COLLECT ");
                sb.AppendLine("where SOO_DATE = '" + out_date + "'  ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + cmb_stor + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");



                //매출 등록
                sb.AppendLine("insert into F_SALES(");
                sb.AppendLine("     SALES_DATE");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine("     ,SALES_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,OUTPUT_DATE ");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,@sales_seq");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_supply_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + all_tax_money.Replace(",", "") + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + vat_cd + "' ");
                sb.AppendLine("     ,'" + out_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine(" ) ");
                //매출 등록

                //수금등록
                sb.AppendLine("insert into F_COLLECT(");
                sb.AppendLine(" SOO_DATE ");
                sb.AppendLine(" ,SOO_CD ");
                sb.AppendLine(" ,SOO_GUBUN ");
                sb.AppendLine(" ,CUST_CD ");
                sb.AppendLine(" ,SOO_MONEY ");
                sb.AppendLine(" ,DC_MONEY ");
                sb.AppendLine(" ,TOTAL_MONEY ");
                sb.AppendLine(" ,COMMENT ");
                sb.AppendLine(" ,INSTAFF ");
                sb.AppendLine(" ,INTIME ");
                sb.AppendLine(" ,OUTPUT_DATE ");
                sb.AppendLine(" ,OUTPUT_CD ");
                sb.AppendLine(" ) VALUES ( ");
                sb.AppendLine(" '" + out_date + "' ");
                sb.AppendLine(" ,@soo_seq ");
                sb.AppendLine(" ,'" + soo_gubun + "' ");
                sb.AppendLine(" ,'" + txt_cust_cd + "' ");
                sb.AppendLine(" ," + soo_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + dc_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + total_soo_money.Replace(",", "") + " ");
                sb.AppendLine(" ,'#매출 " + out_date + "/' + convert(nvarchar,@sales_seq) ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,'" + out_date + "' ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ) ");
                //수금등록


                //거래처 잔고 상승! 
                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE +'" + all_total_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE -'" + total_soo_money.Replace(",", "") + "' ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                bool isCustDay = isCustDayTotal(out_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(out_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + " + all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + " + all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + " + all_total_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_MONEY = COL_MONEY + " + soo_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dc_money.Replace(",", "") + "  ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + total_soo_money.Replace(",", "") + "  ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + out_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(out_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , all_total_money.Replace(",", "")
                    , "+"));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    out_date
                    , txt_cust_cd
                    , total_soo_money.Replace(",", "")
                    , "-"));
                //거래처 잔고 상승! 



                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");

                        sb.AppendLine("declare @sales_seq" + i + " int ");
                        sb.AppendLine("select @sales_seq" + i + " =ISNULL(convert(int,MAX(SEQ)),0)+1 from F_SALES_DETAIL ");
                        sb.AppendLine("where SALES_DATE = '" + out_date + "' ");
                        sb.AppendLine("and SALES_CD =  @sales_seq ");


                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,TAX_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,INP_SEQ "); // alter table f_item_out_detail add INP_SEQ nvarchar (10)
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@out_seq" + i + " ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_SEQ"].Value + "' ");
                        sb.AppendLine("  )");


                        sb.AppendLine("insert into F_SALES_DETAIL(");
                        sb.AppendLine("      SALES_DATE   ");      //1
                        sb.AppendLine("     ,SALES_CD    ");       //2
                        sb.AppendLine("     ,SEQ    ");            //3
                        sb.AppendLine("     ,ITEM_CD    ");        //4
                        sb.AppendLine("     ,OUTPUT_DATE    ");    //5
                        sb.AppendLine("     ,OUTPUT_CD    ");      //6
                        sb.AppendLine("     ,OUTPUT_SEQ    ");     //7
                        sb.AppendLine("     ,INPUT_DATE    ");     //8
                        sb.AppendLine("     ,INPUT_CD    ");       //9
                        sb.AppendLine("     ,LOT_NO    ");         //10
                        sb.AppendLine("     ,LOT_SUB    ");        //11
                        sb.AppendLine("     ,TOTAL_AMT    ");      //12
                        sb.AppendLine("     ,TOTAL_PRICE    ");    //13
                        sb.AppendLine("     ,TOTAL_MONEY    ");    //14
                        sb.AppendLine("     ,SUPPLY_MONEY    ");   //15
                        sb.AppendLine("     ,TAX_MONEY    ");      //16
                        sb.AppendLine("     ,INTIME    ");         //17
                        sb.AppendLine("     ,INSTAFF    ");        //18
                        sb.AppendLine("     ,PRINT_YN    ");       //19
                        sb.AppendLine("     ,TAX_CD    ");         //20
                        sb.AppendLine("  ) values ( ");
                        sb.AppendLine("     '" + out_date + "' ");                                                                               //1
                        sb.AppendLine("      ,@sales_seq ");                                                                                     //2
                        sb.AppendLine("     ,@sales_seq" + i + " ");                                                                             //3
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");                                         //4
                        sb.AppendLine("     ,'" + out_date + "' ");                                                                              //5
                        sb.AppendLine("     ,@seq  ");                                                                                           //6
                        sb.AppendLine("     ,@out_seq" + i + "  ");                                                                              //7
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");                                      //8
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");                                        //9
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");                                          //10
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");                                         //11
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");             //12
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");                  //13
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TOTAL_MONEY"].Value).Replace(",", "") + "' ");          //14
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_SUPPLY_MONEY"].Value).Replace(",", "") + "' ");         //15
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["O_TAX_MONEY"].Value).Replace(",", "") + "' ");            //16
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");                                                               //17
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");                                                                   //18
                        sb.AppendLine("     ,'N' ");                                                                                             //19
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_TAX_CD"].Value + "' ");                                          //20
                        sb.AppendLine("  )");



                        sb.AppendLine(" declare @chk" + i + " int  ");
                        sb.AppendLine(" select @chk" + i + " = count(*) from N_PRICE_INFO  ");
                        sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "' and PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' and P_GUBUN = '2' ");

                        sb.AppendLine(" if @chk" + i + " > 0  ");
                        sb.AppendLine(" begin  ");
                        sb.AppendLine("      UPDATE N_PRICE_INFO SET  ");
                        sb.AppendLine("      UNIT_PRICE = '" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "'  ");
                        sb.AppendLine("          ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("          ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("      where CUST_CD = '" + txt_cust_cd + "' ");
                        sb.AppendLine("      AND PROD_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("      AND P_GUBUN = '2' ");
                        sb.AppendLine(" end ");
                        sb.AppendLine(" else begin ");
                        sb.AppendLine("      INSERT INTO N_PRICE_INFO (  ");
                        sb.AppendLine("      CUST_CD ");
                        sb.AppendLine("      ,PROD_CD ");
                        sb.AppendLine("      ,B_BOX_PRICE ");
                        sb.AppendLine("      ,S_BOX_PRICE ");
                        sb.AppendLine("      ,UNIT_PRICE ");
                        sb.AppendLine("      ,INSTAFF ");
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,P_GUBUN ");
                        sb.AppendLine("   )VALUES(  ");
                        sb.AppendLine("   '" + txt_cust_cd + "'  ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "'  ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,0 ");
                        sb.AppendLine("   ,'" + item_out_dgv.Rows[i].Cells["PRICE"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("   ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("   ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("   ,'2' ");
                        sb.AppendLine(" ) ");
                        sb.AppendLine(" end ");



                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }
                Debug.WriteLine(sb);
                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult2 = wAdo.SqlCommandEtc(sCommand, "insert_SALES_MES");
                if (qResult2 > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public DataTable fn_Buy_Ledger_List(string cust_cd, string start_date, string end_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");

            sb.AppendLine(" select '구매' as bun");
            sb.AppendLine("  ,A.BUY_DATE  ");
            sb.AppendLine("  ,A.BUY_DATE AS 일자명칭  ");
            sb.AppendLine("  ,A.BUY_CD ");
            sb.AppendLine("  ,A.SEQ ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1100' and Z.BUY_GUBUN = S_CODE ) AS INPUT_GUBUN ");
            sb.AppendLine("  ,Z.CUST_CD");
            sb.AppendLine("  ,C.CUST_NM");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='900' and Z.VAT_CD = S_CODE) AS TAX_NM");
            sb.AppendLine("  ,Z.VAT_CD ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='910' and A.TAX_CD = S_CODE) AS VAT_NM");
            sb.AppendLine("  ,A.TAX_CD ");
            sb.AppendLine("  ,B.RAW_MAT_NM AS PRODUCT_NM ");
            sb.AppendLine("  , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT ");
            sb.AppendLine("  , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE");
            sb.AppendLine("  , case when Z.VAT_CD = '1' and A.TAX_CD = '1' ");
            sb.AppendLine(" then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )  ");
            sb.AppendLine(" else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" ,case when A.TAX_CD = '2' OR Z.VAT_CD = '2'  ");
            sb.AppendLine(" then 0");
            sb.AppendLine(" else case when Z.VAT_CD = '0' ");
            sb.AppendLine(" then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1 ");
            sb.AppendLine(" else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY ");
            sb.AppendLine("   ,case when A.TAX_CD = '1'");
            sb.AppendLine(" then  ");
            sb.AppendLine(" 		case when Z.VAT_CD = '2' ");
            sb.AppendLine(" 			then  ");
            sb.AppendLine(" 				(A.TOTAL_AMT*A.TOTAL_PRICE)  ");
            sb.AppendLine(" 			else  ");
            sb.AppendLine(" 				case when Z.VAT_CD ='1'");
            sb.AppendLine(" 				then (A.TOTAL_AMT*A.TOTAL_PRICE)");
            sb.AppendLine(" 				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end ");
            sb.AppendLine(" 				end  ");
            sb.AppendLine(" else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY ");
            sb.AppendLine("   ,0			AS GIVE_MONEY ");
            sb.AppendLine("   ,0			AS DC_MONEY");
            sb.AppendLine("   ,0			AS TOTAL_GIVE_MONEY ");
            sb.AppendLine("   ,0			AS BALANCE ");
            sb.AppendLine("   , B.SPEC  ");
            sb.AppendLine("   , '' AS LOT_NO  ");
            sb.AppendLine("   , '' AS LOT_SUB ");
            sb.AppendLine("  from F_BUY Z  ");
            sb.AppendLine("  left outer join F_BUY_DETAIL A  ");
            sb.AppendLine("  on Z.BUY_DATE = A.BUY_DATE");
            sb.AppendLine("   and Z.BUY_CD = A.BUY_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE B ");
            sb.AppendLine("  on A.RAW_MAT_CD = B.RAW_MAT_CD  ");
            sb.AppendLine("  left outer join N_CUST_CODE C");
            sb.AppendLine("  on Z.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ = A.INPUT_SEQ");
            sb.AppendLine(" where Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'  ");
            sb.AppendLine(" ");
            sb.AppendLine(" union all");
            sb.AppendLine(" SELECT");
            sb.AppendLine(" 'ㅎ' as bun ");
            sb.AppendLine(" 	 ,BUY_DATE ");
            sb.AppendLine("   ,'--- 일계 ---' AS 일자명칭 ");
            sb.AppendLine("   ,'999999' AS INPUT_CD ");
            sb.AppendLine("   ,'' AS SEQ");
            sb.AppendLine("   ,'' AS INPUT_GUBUN ");
            sb.AppendLine("   ,'' AS CUST_CD  ");
            sb.AppendLine("   ,'' AS CUST_NM  ");
            sb.AppendLine("   ,'' AS TAX_CD");
            sb.AppendLine("   ,'' AS TAX_NM");
            sb.AppendLine("   ,'' AS VAT_CD");
            sb.AppendLine("   ,'' AS VAT_NM");
            sb.AppendLine("   ,'' AS  PRODUCT_NM ");
            sb.AppendLine("   ,sum(TOTAL_AMT) AS  TOTAL_AMT  ");
            sb.AppendLine("   ,0 AS  TOTAL_PRICE ");
            sb.AppendLine(" 	,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" 	,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" 	,sum(TOTAL_MONEY) AS TOTAL_MONEY");
            sb.AppendLine(" 	,sum(GIVE_MONEY) AS GIVE_MONEY  ");
            sb.AppendLine(" 	,sum(DC_MONEY) AS DC_MONEY");
            sb.AppendLine(" 	,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY  ");
            sb.AppendLine(" 	,ISNULL((SELECT BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE = BUY_DATE),0) AS BALANCE  ");
            sb.AppendLine("   ,'' AS  SPEC ");
            sb.AppendLine("   ,'' AS  LOT_NO  ");
            sb.AppendLine("   ,'' AS  LOT_SUB ");
            sb.AppendLine(" 		 FROM ( select  ");
            sb.AppendLine(" 			 Z.BUY_DATE AS BUY_DATE ");
            sb.AppendLine(" 			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT");
            sb.AppendLine(" 			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE  ");
            sb.AppendLine(" 			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" 			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY");
            sb.AppendLine(" 			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY  ");
            sb.AppendLine(" 			 , 0 AS GIVE_MONEY");
            sb.AppendLine(" 			 , 0 AS DC_MONEY  ");
            sb.AppendLine(" 			 , 0 AS TOTAL_GIVE_MONEY");
            sb.AppendLine(" 		 from F_BUY Z");
            sb.AppendLine(" 		 left outer join F_BUY_DETAIL A");
            sb.AppendLine(" 		 on Z.BUY_DATE = A.BUY_DATE ");
            sb.AppendLine(" 			 and Z.BUY_CD = A.BUY_CD");
            sb.AppendLine(" 		 where 1=1");
            sb.AppendLine("  and Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'");
            sb.AppendLine(" 		 group by Z.BUY_DATE , Z.BUY_CD");
            sb.AppendLine(" 		 ");
            sb.AppendLine(" 		 ");
            sb.AppendLine(" 		 union all");
            sb.AppendLine("  		 select ");
            sb.AppendLine("  			 Z.GIVE_DATE AS BUY_DATE ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE  ");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY");
            sb.AppendLine("  			 ,AVG(ISNULL(GIVE_MONEY,0)) AS GIVE_MONEY  ");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_GIVE_MONEY ");
            sb.AppendLine("  		 from F_GIVE Z");
            sb.AppendLine("  		 where 1=1 ");
            sb.AppendLine("  and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'  ");
            sb.AppendLine("  		 group by Z.GIVE_DATE , Z.GIVE_CD  ");
            sb.AppendLine(" ");
            sb.AppendLine("  	) A group by A.BUY_DATE ");
            sb.AppendLine(" union all");
            sb.AppendLine(" SELECT");
            sb.AppendLine(" '' as bun");
            sb.AppendLine(" 	 ,left(BUY_DATE,8)+'99' AS BUY_DATE");
            sb.AppendLine("   ,'=== 월계 ===' AS 일자명칭 ");
            sb.AppendLine("   ,'999999' AS INPUT_CD ");
            sb.AppendLine("   ,'' AS SEQ");
            sb.AppendLine("   ,'' AS INPUT_GUBUN ");
            sb.AppendLine("   ,'' AS CUST_CD  ");
            sb.AppendLine("   ,'' AS CUST_NM  ");
            sb.AppendLine("   ,'' AS TAX_CD");
            sb.AppendLine("   ,'' AS TAX_NM");
            sb.AppendLine("   ,'' AS VAT_CD");
            sb.AppendLine("   ,'' AS VAT_NM");
            sb.AppendLine("   ,'' AS  PRODUCT_NM ");
            sb.AppendLine(" ,sum(TOTAL_AMT) AS  TOTAL_AMT ");
            sb.AppendLine(" ,0 AS  TOTAL_PRICE");
            sb.AppendLine(" 	,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" 	,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" 	,sum(TOTAL_MONEY) AS TOTAL_MONEY");
            sb.AppendLine(" 	,sum(GIVE_MONEY) AS GIVE_MONEY  ");
            sb.AppendLine(" 	,sum(DC_MONEY) AS DC_MONEY");
            sb.AppendLine(" 	,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY  ");
            sb.AppendLine(" 	,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(BUY_DATE)  order by INPUT_DATE DESC),0) AS BALANCE");
            sb.AppendLine("   ,'' AS  SPEC  ");
            sb.AppendLine("   ,'' AS  LOT_NO");
            sb.AppendLine("   ,'' AS  LOT_SUB  ");
            sb.AppendLine(" 		 FROM ( select");
            sb.AppendLine(" 			 Z.BUY_DATE AS BUY_DATE  ");
            sb.AppendLine(" 			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT ");
            sb.AppendLine(" 			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE");
            sb.AppendLine(" 			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" 			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" 			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY");
            sb.AppendLine(" 			 , 0 AS GIVE_MONEY ");
            sb.AppendLine(" 			 , 0 AS DC_MONEY");
            sb.AppendLine(" 			 , 0 AS TOTAL_GIVE_MONEY ");
            sb.AppendLine(" 		 from F_BUY Z ");
            sb.AppendLine(" 		 left outer join F_BUY_DETAIL A ");
            sb.AppendLine(" 		 on Z.BUY_DATE = A.BUY_DATE  ");
            sb.AppendLine(" 			 and Z.BUY_CD = A.BUY_CD ");
            sb.AppendLine(" 		 where 1=1 ");
            sb.AppendLine("  and Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "' ");
            sb.AppendLine("  ");
            sb.AppendLine(" 		 group by Z.BUY_DATE , Z.BUY_CD ");
            sb.AppendLine(" 		 union all ");
            sb.AppendLine("  		 select  ");
            sb.AppendLine("  			 Z.GIVE_DATE AS BUY_DATE  ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT  ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY ");
            sb.AppendLine("  			 ,AVG(ISNULL(GIVE_MONEY,0)) AS GIVE_MONEY");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY ");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_GIVE_MONEY  ");
            sb.AppendLine("  		 from F_GIVE Z ");
            sb.AppendLine("  		 where 1=1  ");
            sb.AppendLine("  and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'");
            sb.AppendLine("  		 group by Z.GIVE_DATE , Z.GIVE_CD");
            sb.AppendLine("  ");
            sb.AppendLine("  ) A group by left(A.BUY_DATE,8)  ");
            sb.AppendLine(" union all ");
            sb.AppendLine(" SELECT ");
            sb.AppendLine(" '' as bun ");
            sb.AppendLine(" 	 ,left(BUY_DATE,2)+'99-99-99' AS BUY_DATE ");
            sb.AppendLine("   ,'=== 합계 ===' AS 일자명칭  ");
            sb.AppendLine("   ,'999999' AS INPUT_CD  ");
            sb.AppendLine("   ,'' AS SEQ ");
            sb.AppendLine("   ,'' AS INPUT_GUBUN  ");
            sb.AppendLine("   ,'' AS CUST_CD");
            sb.AppendLine("   ,'' AS CUST_NM");
            sb.AppendLine("   ,'' AS TAX_CD ");
            sb.AppendLine("   ,'' AS TAX_NM ");
            sb.AppendLine("   ,'' AS VAT_CD ");
            sb.AppendLine("   ,'' AS VAT_NM ");
            sb.AppendLine("   ,'' AS  PRODUCT_NM  ");
            sb.AppendLine("   ,sum(TOTAL_AMT) AS  TOTAL_AMT");
            sb.AppendLine("   ,0 AS  TOTAL_PRICE  ");
            sb.AppendLine(" 	,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine(" 	,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine(" 	,sum(TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine(" 	,sum(GIVE_MONEY) AS GIVE_MONEY");
            sb.AppendLine(" 	,sum(DC_MONEY) AS DC_MONEY ");
            sb.AppendLine(" 	,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY");
            sb.AppendLine(" 	,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(BUY_DATE)  order by INPUT_DATE DESC),0) AS BALANCE");
            sb.AppendLine("   ,'' AS  SPEC ");
            sb.AppendLine("   ,'' AS  LOT_NO  ");
            sb.AppendLine("   ,'' AS  LOT_SUB ");
            sb.AppendLine("  FROM ( select ");
            sb.AppendLine(" 			 Z.BUY_DATE AS BUY_DATE ");
            sb.AppendLine(" 			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT");
            sb.AppendLine(" 			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE  ");
            sb.AppendLine(" 			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" 			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY");
            sb.AppendLine(" 			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY  ");
            sb.AppendLine(" 			 , 0 AS GIVE_MONEY");
            sb.AppendLine(" 			 , 0 AS DC_MONEY  ");
            sb.AppendLine(" 			 , 0 AS TOTAL_GIVE_MONEY");
            sb.AppendLine(" 		 from F_BUY Z");
            sb.AppendLine(" 		 left outer join F_BUY_DETAIL A");
            sb.AppendLine(" 		 on Z.BUY_DATE = A.BUY_DATE ");
            sb.AppendLine(" 			 and Z.BUY_CD = A.BUY_CD");
            sb.AppendLine(" 		 where 1=1");
            sb.AppendLine("  and Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'");
            sb.AppendLine(" ");
            sb.AppendLine(" 		 group by Z.BUY_DATE , Z.BUY_CD");
            sb.AppendLine(" 		 union all");
            sb.AppendLine("  		 select ");
            sb.AppendLine("  			 Z.GIVE_DATE AS BUY_DATE ");
            sb.AppendLine("  			 , 0 AS  TOTAL_AMT ");
            sb.AppendLine("  			 , 0 AS  TOTAL_PRICE  ");
            sb.AppendLine("  			 , 0 AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine("  			 , 0 AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("  			 , 0 AS TOTAL_MONEY");
            sb.AppendLine("  			 ,AVG(ISNULL(GIVE_MONEY,0)) AS GIVE_MONEY  ");
            sb.AppendLine("  			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY");
            sb.AppendLine("  			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_GIVE_MONEY ");
            sb.AppendLine("  		 from F_GIVE Z");
            sb.AppendLine("  		 where 1=1 ");
            sb.AppendLine("  and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'  ");
            sb.AppendLine("  		 group by Z.GIVE_DATE , Z.GIVE_CD  ");
            sb.AppendLine(" ");
            sb.AppendLine("  ) A group by left(A.BUY_DATE,2) ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select");
            sb.AppendLine(" 	 '지급' as bun");
            sb.AppendLine(" 	 ,GIVE_DATE AS BUY_DATE");
            sb.AppendLine("   ,GIVE_DATE AS 일자명칭");
            sb.AppendLine("   ,GIVE_CD AS INPUT_CD  ");
            sb.AppendLine("   ,GIVE_CD AS SEQ ");
            sb.AppendLine("   ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and GIVE_GUBUN = S_CODE) AS INPUT_GUBUN");
            sb.AppendLine("   ,'' AS CUST_CD  ");
            sb.AppendLine("   ,'' AS CUST_NM  ");
            sb.AppendLine("   ,'' AS TAX_CD");
            sb.AppendLine("   ,'' AS TAX_NM");
            sb.AppendLine("   ,'' AS VAT_CD금 ");
            sb.AppendLine("   ,'' AS VAT_NM");
            sb.AppendLine("   ,'' AS  PRODUCT_NM ");
            sb.AppendLine("   , 0 AS  TOTAL_AMT  ");
            sb.AppendLine("   , 0 AS  TOTAL_PRICE");
            sb.AppendLine(" 	, 0 AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" 	, 0 AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" 	, 0 AS TOTAL_MONEY  ");
            sb.AppendLine(" 	, GIVE_MONEY AS GIVE_MONEY");
            sb.AppendLine(" 	, DC_MONEY AS DC_MONEY ");
            sb.AppendLine(" 	, TOTAL_MONEY AS TOTAL_GIVE_MONEY  ");
            sb.AppendLine(" ,0 AS BALANCE  ");
            sb.AppendLine("   , '' AS  SPEC");
            sb.AppendLine("   ,'' AS  LOT_NO  ");
            sb.AppendLine("   ,'' AS  LOT_SUB ");
            sb.AppendLine("  from F_GIVE Z ");
            sb.AppendLine(" where 1=1");
            sb.AppendLine("  and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'  ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select  top 1  ");
            sb.AppendLine(" 	 '' as bun ");
            sb.AppendLine(" 	 ,'0000-00-00' AS BUY_DATE");
            sb.AppendLine("   ,'== 전잔고 ==' AS 일자명칭 ");
            sb.AppendLine("   ,'' AS INPUT_CD ");
            sb.AppendLine("   ,'' AS SEQ");
            sb.AppendLine("   ,'' AS INPUT_GUBUN ");
            sb.AppendLine("   ,'' AS CUST_CD  ");
            sb.AppendLine("   ,'' AS CUST_NM  ");
            sb.AppendLine("   ,'' AS TAX_CD");
            sb.AppendLine("   ,'' AS TAX_NM");
            sb.AppendLine("   ,'' AS VAT_CD");
            sb.AppendLine("   ,'' AS VAT_NM");
            sb.AppendLine("   ,'' AS  PRODUCT_NM ");
            sb.AppendLine("   , 0 AS  TOTAL_AMT  ");
            sb.AppendLine("   , 0 AS  TOTAL_PRICE");
            sb.AppendLine(" 	, 0 AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" 	, 0 AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" 	, 0 AS TOTAL_MONEY  ");
            sb.AppendLine(" 	, 0 AS GIVE_MONEY");
            sb.AppendLine(" 	, 0 AS DC_MONEY  ");
            sb.AppendLine(" 	, 0 AS TOTAL_GIVE_MONEY");
            sb.AppendLine("   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= '" + start_date + "' ORDER BY INPUT_DATE DESC),0) AS BALANCE  ");
            sb.AppendLine("   , '' AS  SPEC  ");
            sb.AppendLine("   ,'' AS  LOT_NO ");
            sb.AppendLine("   ,'' AS  LOT_SUB");
            sb.AppendLine("  order by A.BUY_DATE, bun, A.BUY_CD, A.SEQ  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        public int insert_Work_Flow(
            string lot_no
            , string item_cd
            , string flow_cd
            , string f_step
            , string seq
            , string cust_cd
            , string input_date
            , string processingAmt
            , string passAmt
            , string poorAmt
            , string lossAmt
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                DataTable dt = new DataTable();
                dt = fn_Work_Flow_List(" and A.LOT_NO = '" + lot_no + "' ");

                if (dt == null || dt.Rows.Count < 1)
                {
                    sb.AppendLine(" INSERT INTO F_WORK_FLOW ( ");
                    sb.AppendLine(" LOT_NO ");
                    sb.AppendLine(" ,FLOW_DATE ");
                    sb.AppendLine(" ,ITEM_CD ");
                    sb.AppendLine(" ,COMPLETE_YN ");
                    sb.AppendLine(" ,INSTAFF ");
                    sb.AppendLine(" ,INTIME ");
                    sb.AppendLine(" ) VALUES ( ");
                    sb.AppendLine(" '" + lot_no + "'  ");
                    sb.AppendLine(" ,'" + input_date + "'  ");
                    sb.AppendLine(" ,'" + item_cd + "'  ");
                    sb.AppendLine(" ,'" + "S" + "'  ");
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'  ");
                    sb.AppendLine(" ,convert(varchar,getdate(),120)  ");
                    sb.AppendLine(" ) ");
                }
                else
                {
                    sb.AppendLine(" UPDATE F_WORK_FLOW SET ");
                    sb.AppendLine(" UPSTAFF = '" + Common.p_strStaffNo + "'  ");
                    sb.AppendLine(" ,UPTIME = convert(varchar,getdate(),120) ");
                    sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");
                }


                sb.AppendLine(" INSERT INTO F_WORK_FLOW_DETAIL ( ");
                sb.AppendLine("  LOT_NO ");
                sb.AppendLine("  ,LOT_SUB ");
                sb.AppendLine("  ,F_STEP ");
                sb.AppendLine("  ,FLOW_CD ");
                sb.AppendLine("  ,SEQ ");
                sb.AppendLine("  ,F_SUB_DATE ");
                sb.AppendLine("  ,F_SUB_AMT ");
                sb.AppendLine("  ,INPUT_AMT ");
                sb.AppendLine("  ,POOR_AMT ");
                sb.AppendLine("  ,LOSS ");
                sb.AppendLine("  ,COMPLETE_YN ");
                sb.AppendLine("  ,CHECK_YN ");
                sb.AppendLine("  ,ITEM_CHECK_YN ");
                sb.AppendLine("  ,CUST_CD ");
                sb.AppendLine("  ,ITEM_CD ");
                sb.AppendLine("  ,INSTAFF ");
                sb.AppendLine("  ,INTIME ");
                sb.AppendLine(" ) VALUES ( ");
                sb.AppendLine(" '" + lot_no + "'  ");
                sb.AppendLine(" ,'" + seq + "'  ");
                sb.AppendLine(" ,'" + f_step + "'  ");
                sb.AppendLine(" ,'" + flow_cd + "'  ");
                sb.AppendLine(" ,'" + seq + "'  ");
                sb.AppendLine(" ,'" + input_date + "'  ");
                sb.AppendLine(" ,'" + passAmt + "'  ");
                sb.AppendLine(" ,'" + processingAmt + "'  ");
                sb.AppendLine(" ,'" + poorAmt + "'  ");
                sb.AppendLine(" ,'" + lossAmt + "'  ");
                sb.AppendLine(" ,'" + "N" + "'  ");
                sb.AppendLine(" ,'" + "S" + "'  ");
                sb.AppendLine(" ,'" + "S" + "'  ");
                sb.AppendLine(" ,'" + cust_cd + "'  ");
                sb.AppendLine(" ,'" + item_cd + "'  ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "'  ");
                sb.AppendLine(" ,convert(varchar,getdate(),120)  ");
                sb.AppendLine(" )  ");

                sb.AppendLine(" declare @IDEN nvarchar  ");
                sb.AppendLine(" select @IDEN = ITEM_IDEN_YN FROM N_ITEM_FLOW WHERE ITEM_CD = '" + item_cd + "' AND FLOW_CD = '" + flow_cd + "'  ");
                sb.AppendLine(" if @IDEN is not null and @IDEN = 'Y'  BEGIN  ");
                sb.AppendLine("    ");

                sb.AppendLine("declare @cd int ");
                sb.AppendLine("select @cd =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine(" INSERT INTO F_ITEM_INPUT ( ");
                sb.AppendLine(" INPUT_DATE ");         //1
                sb.AppendLine(" ,INPUT_CD ");          //2
                sb.AppendLine(" ,ITEM_CD ");           //3
                sb.AppendLine(" ,INPUT_AMT ");         //4
                sb.AppendLine(" ,LOT_NO ");            //5
                sb.AppendLine(" ,LOT_SUB ");           //6
                sb.AppendLine(" ,SEQ ");               //7
                sb.AppendLine(" ,F_STEP ");            //8
                sb.AppendLine(" ,FLOW_CD ");           //9
                sb.AppendLine(" ,INSTAFF ");           //10
                sb.AppendLine(" ,INTIME ");            //11
                sb.AppendLine(" ,CURR_AMT ");          //12
                sb.AppendLine(" ,COMPLETE_YN ");       //13
                sb.AppendLine(" ) VALUES ( ");
                sb.AppendLine(" '" + input_date + "'  ");                      //1
                sb.AppendLine(" ,@cd ");                                       //2
                sb.AppendLine(" ,'" + item_cd + "' ");                         //3
                sb.AppendLine(" ,'" + passAmt + "' ");                         //4
                sb.AppendLine(" ,'" + lot_no + "' ");                          //5
                sb.AppendLine(" ,'" + seq + "' ");                             //6
                sb.AppendLine(" ,'" + seq + "' ");                             //7
                sb.AppendLine(" ,'" + f_step + "' ");                          //8
                sb.AppendLine(" ,'" + flow_cd + "' ");                         //9
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "'  ");            //10
                sb.AppendLine(" ,convert(varchar,getdate(),120)  ");           //11
                sb.AppendLine(" ,'" + passAmt + "' ");                         //12
                sb.AppendLine(" ,'N' ");                                       //13
                sb.AppendLine(" ) ");

                sb.AppendLine(" UPDATE N_ITEM_CODE SET ");
                sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + passAmt + " ");
                sb.AppendLine(" WHERE ITEM_CD = '" + item_cd + "' ");

                sb.AppendLine("    ");
                sb.AppendLine("  end  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert work flow");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_select_flow_chk(string lot_no, string flow_cd, string seq, string f_step)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  Select * ,(SELECT UNIT_TYPE_NM FROM N_UNIT_TYPE_CODE WHERE L_CODE = '1' AND A.POOR_CD = UNIT_TYPE_CD) AS POOR_NM  from F_FLOW_POOR A  ");
            sb.AppendLine("  WHERE A.LOT_NO = '" + lot_no + "'  ");
            sb.AppendLine("  and A.LOT_SUB = " + seq + "  ");
            sb.AppendLine("  and A.FLOW_CD = '" + flow_cd + "'  ");
            sb.AppendLine("  and A.F_STEP = " + f_step + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_flow_poor(
            string lot_no
            , string f_step
            , string flow_cd
            , string lot_sub
            , DataGridView ChkGrid
        )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                DataTable dt = new DataTable();


                sb.AppendLine(" declare @isChecked int  ");
                sb.AppendLine(" select @isChecked = COUNT(*) from F_FLOW_POOR   ");
                sb.AppendLine(" where LOT_NO = '" + lot_no + "' and LOT_SUB = '" + lot_sub + "' and   ");
                sb.AppendLine(" F_STEP = " + f_step + " and FLOW_CD = '" + flow_cd + "'  ");
                sb.AppendLine(" if (@isChecked > 0) ");
                sb.AppendLine(" begin ");
                sb.AppendLine(" delete from F_FLOW_POOR  ");
                sb.AppendLine(" where LOT_NO = '" + lot_no + "' and LOT_SUB = '" + lot_sub + "' and   ");
                sb.AppendLine(" F_STEP = " + f_step + " and FLOW_CD = '" + flow_cd + "'  ");
                sb.AppendLine(" end ");

                for (int i = 0; i < ChkGrid.Rows.Count; i++)
                {
                    if (ChkGrid.Rows[i].Cells[0].Tag == null) continue;
                    else if (ChkGrid.Rows[i].Cells[0].Tag.ToString().Equals("self"))
                    {
                        sb.AppendLine(" declare @MAX int ");
                        sb.AppendLine(" declare @newKey nvarchar(10) ");
                        sb.AppendLine(" select @MAX = ISNULL(MAX(substring(POOR_CD,3,3)),0)+1 from N_POOR_CODE ");
                        sb.AppendLine(" where POOR_GUBUN = 2 ");
                        sb.AppendLine(" select @newKey = 'P-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");

                        sb.AppendLine(" insert into F_FLOW_POOR( ");
                        sb.AppendLine(" LOT_NO ");
                        sb.AppendLine(" ,LOT_SUB ");
                        sb.AppendLine(" ,F_STEP ");
                        sb.AppendLine(" ,POOR_CD ");
                        sb.AppendLine(" ,FLOW_CD ");
                        sb.AppendLine(" ,POOR_AMT ");
                        sb.AppendLine(" ,INTIME ");
                        sb.AppendLine(" ,INSTAFF ");
                        sb.AppendLine(" ,SEQ ");
                        sb.AppendLine(" ) VALUES ( ");
                        sb.AppendLine(" '" + lot_no + "' ");
                        sb.AppendLine(" ,'" + lot_sub + "' ");
                        sb.AppendLine(" ,'" + f_step + "' ");
                        sb.AppendLine(" ,@newKey ");
                        sb.AppendLine(" ,'" + flow_cd + "' ");
                        sb.AppendLine(" ,'" + ChkGrid.Rows[i].Cells[1].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine(" ,convert(varchar,getdate(),120) ");
                        sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,'" + lot_sub + "' ");
                        sb.AppendLine(" ) ");

                        sb.AppendLine(" insert into N_POOR_CODE( ");
                        sb.AppendLine(" POOR_NM ");
                        sb.AppendLine(" ,POOR_CD ");
                        sb.AppendLine(" ,POOR_GUBUN ");
                        sb.AppendLine(" ,COMMENT ");
                        sb.AppendLine(" ) values (  ");
                        sb.AppendLine(" '" + ChkGrid.Rows[i].Cells[0].Value.ToString() + "'  ");
                        sb.AppendLine(" ,@newKey  ");
                        sb.AppendLine(" ,'2'  ");
                        sb.AppendLine(" ,''  ");
                        sb.AppendLine(" )  ");
                    }
                    else
                    {
                        sb.AppendLine(" insert into F_FLOW_POOR( ");
                        sb.AppendLine(" LOT_NO ");
                        sb.AppendLine(" ,LOT_SUB ");
                        sb.AppendLine(" ,F_STEP ");
                        sb.AppendLine(" ,POOR_CD ");
                        sb.AppendLine(" ,FLOW_CD ");
                        sb.AppendLine(" ,POOR_AMT ");
                        sb.AppendLine(" ,INTIME ");
                        sb.AppendLine(" ,INSTAFF ");
                        sb.AppendLine(" ,SEQ ");
                        sb.AppendLine(" ) VALUES ( ");
                        sb.AppendLine(" '" + lot_no + "' ");
                        sb.AppendLine(" ,'" + lot_sub + "' ");
                        sb.AppendLine(" ,'" + f_step + "' ");
                        sb.AppendLine(" ,'" + ChkGrid.Rows[i].Cells[0].Tag.ToString() + "' ");
                        sb.AppendLine(" ,'" + flow_cd + "' ");
                        sb.AppendLine(" ,'" + ChkGrid.Rows[i].Cells[1].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine(" ,convert(varchar,getdate(),120) ");
                        sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,'" + lot_sub + "' ");
                        sb.AppendLine(" ) ");
                    }
                }




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert flow poor");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable fn_flow_trace_list_By_LotNo(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select");
            sb.AppendLine(" '지시' AS GUBUN");
            sb.AppendLine(" ,1 as 순서");
            sb.AppendLine(" ,1 as 순서2");
            sb.AppendLine(" ,W.W_INST_DATE AS INPUT_DATE ");
            sb.AppendLine(" ,CONVERT(nvarchar,W.W_INST_CD) AS INPUT_CD");
            sb.AppendLine(" ,'' AS INPUT_SEQ ");
            sb.AppendLine(" ,W.INTIME AS 시각 ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE W.CUST_CD = CUST_CD) AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC");
            sb.AppendLine(" ,W.LOT_NO AS LOT_NO");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM");
            sb.AppendLine(" ,CONVERT(nvarchar,W.INST_AMT) AS TOTAL_AMT");
            sb.AppendLine(" ,'' AS LOSS_AMT");
            sb.AppendLine(" ,'' AS POOR");
            sb.AppendLine(" from F_WORK_INST W");
            sb.AppendLine(" left outer join N_ITEM_CODE N ");
            sb.AppendLine(" on W.ITEM_CD = N.ITEM_CD ");
            sb.AppendLine(" where W.LOT_NO = '" + LotNo + "' ");
            sb.AppendLine("  ");
            sb.AppendLine("  union all");
            sb.AppendLine(" select");
            sb.AppendLine(" '자재투입' AS GUBUN");
            sb.AppendLine(" ,2 as 순서");
            sb.AppendLine(" ,1 as 순서2");
            sb.AppendLine(" ,ISNULL(D.INPUT_DATE,'음수 투입') AS INPUT_DATE");
            sb.AppendLine(" ,CONVERT(nvarchar,D.INPUT_CD )");
            sb.AppendLine(" ,CONVERT(nvarchar,D.SEQ ) ");
            sb.AppendLine(" ,W.INTIME AS 시각 ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE RI.CUST_CD = CUST_CD ) AS CUST_NM");
            sb.AppendLine(" ,N.RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC");
            sb.AppendLine(" ,REPLACE(D.INPUT_DATE,'-','')+RIGHT('0000'+CONVERT(nvarchar,ISNULL(D.INPUT_CD,'0')),4)+RIGHT('00'+CONVERT(nvarchar,ISNULL(D.SEQ,'0')),2) AS LOT_NO ");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.OUTPUT_UNIT = UNIT_CD ) AS UNIT_NM ");
            sb.AppendLine(" ,CONVERT(nvarchar,O.TOTAL_AMT/I.SOYO_AMT)+'x'+CONVERT(nvarchar,I.SOYO_AMT)+'='+CONVERT(nvarchar,O.TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" from F_WORK_INST W");
            sb.AppendLine(" inner join F_WORK_INST_DETAIL I ");
            sb.AppendLine(" on W.W_INST_DATE = I.W_INST_DATE ");
            sb.AppendLine(" and W.W_INST_CD = I.W_INST_CD");
            sb.AppendLine(" left outer join F_RAW_OUTPUT O");
            sb.AppendLine(" on I.LOT_NO = O.LOT_NO");
            sb.AppendLine(" and I.RAW_MAT_CD = O.RAW_MAT_CD ");
            sb.AppendLine(" left outer join F_RAW_DETAIL D");
            sb.AppendLine(" on D.INPUT_DATE = O.INPUT_DATE");
            sb.AppendLine(" and D.INPUT_CD = O.INPUT_CD ");
            sb.AppendLine(" and D.SEQ = O.INPUT_SEQ ");
            sb.AppendLine(" left outer join F_RAW_INPUT RI");
            sb.AppendLine(" on D.INPUT_DATE = RI.INPUT_DATE ");
            sb.AppendLine(" and D.INPUT_CD = RI.INPUT_CD ");
            sb.AppendLine(" left outer join N_RAW_CODE N ");
            sb.AppendLine(" on O.RAW_MAT_CD = N.RAW_MAT_CD");
            sb.AppendLine(" where O.LOT_NO = '" + LotNo + "'");
            sb.AppendLine("  union all");
            sb.AppendLine(" select");
            sb.AppendLine(" '반제품투입' AS GUBUN");
            sb.AppendLine(" ,3 as 순서");
            sb.AppendLine(" ,1 as 순서2 ");
            sb.AppendLine(" ,ISNULL(D.INPUT_DATE,'음수 투입') AS INPUT_DATE ");
            sb.AppendLine(" ,CONVERT(nvarchar,D.INPUT_CD)");
            sb.AppendLine(" ,'' AS SEQ");
            sb.AppendLine(" ,W.INTIME AS 시각");
            sb.AppendLine(" ,'' AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,O.LOT_NO AS LOT_NO ");
            sb.AppendLine(" ,CONVERT(nvarchar,O.LOT_SUB) AS LOT_SUB ");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD ) AS UNIT_NM ");
            sb.AppendLine(" ,CONVERT(nvarchar,O.OUTPUT_AMT/I.SOYO_AMT)+'x'+CONVERT(nvarchar,I.SOYO_AMT)+'='+CONVERT(nvarchar,O.OUTPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" from F_WORK_INST W");
            sb.AppendLine(" inner join F_WORK_INST_HALF_DETAIL I ");
            sb.AppendLine(" on W.W_INST_DATE = I.W_INST_DATE ");
            sb.AppendLine(" and W.W_INST_CD = I.W_INST_CD");
            sb.AppendLine(" left outer join F_ITEM_OUT_DETAIL O ");
            sb.AppendLine(" on I.LOT_NO = O.OUT_LOT ");
            sb.AppendLine(" and I.HALF_ITEM_CD = O.ITEM_CD");
            sb.AppendLine(" left outer join F_ITEM_INPUT D");
            sb.AppendLine(" on D.INPUT_DATE = O.INPUT_DATE");
            sb.AppendLine(" and D.INPUT_CD = O.INPUT_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE N");
            sb.AppendLine(" on O.ITEM_CD = N.ITEM_CD ");
            sb.AppendLine(" where O.OUT_LOT = '" + LotNo + "'");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  select ");
            sb.AppendLine(" '공정' AS GUBUN ");
            sb.AppendLine(" ,4 as 순서");
            sb.AppendLine(" ,W.F_STEP as 순서2");
            sb.AppendLine(" ,W.F_SUB_DATE AS INPUT_DATE ");
            sb.AppendLine(" ,CONVERT(nvarchar,W.SEQ) AS INPUT_CD ");
            sb.AppendLine(" ,'' AS SEQ");
            sb.AppendLine(" ,W.INTIME AS 시각");
            sb.AppendLine(" ,CONVERT(nvarchar,W.LOT_SUB)+' ('+CONVERT(nvarchar,F.FLOW_NM)+')' AS CUST_NM ");
            sb.AppendLine(" ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE FLOW_CD = W.FLOW_CD ) AS RAW_MAT_NM ");
            sb.AppendLine(" ,'' ");
            sb.AppendLine(" ,W.LOT_NO");
            sb.AppendLine(" ,CONVERT(nvarchar,W.LOT_SUB) AS LOT_SUB ");
            sb.AppendLine(" ,'' AS UNIT_NM");
            sb.AppendLine(" ,CONVERT(nvarchar,W.F_SUB_AMT)+'/'+CONVERT(nvarchar,W.INPUT_AMT) AS TOTAL_AMT");
            sb.AppendLine(" ,CONVERT(nvarchar,W.LOSS) AS LOSS_AMT");
            sb.AppendLine(" ,CONVERT(nvarchar,W.POOR_AMT) AS POOR");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL W");
            sb.AppendLine(" left outer join N_FLOW_CODE F");
            sb.AppendLine(" on W.FLOW_CD = F.FLOW_CD ");
            sb.AppendLine(" where W.LOT_NO = '" + LotNo + "'");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  ");
            sb.AppendLine("  select ");
            sb.AppendLine(" '공정' AS GUBUN ");
            sb.AppendLine(" ,4 as 순서");
            sb.AppendLine(" ,W.F_STEP+0.1 as 순서2");
            sb.AppendLine(" ,'' AS INPUT_DATE");
            sb.AppendLine(" ,'' AS INPUT_CD ");
            sb.AppendLine(" ,'' AS SEQ");
            sb.AppendLine(" ,'' AS 시각 ");
            sb.AppendLine(" ,''+CONVERT(nvarchar,F.FLOW_NM)+' 합계' AS CUST_NM");
            sb.AppendLine(" ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE FLOW_CD = F.FLOW_CD ) AS RAW_MAT_NM ");
            sb.AppendLine(" ,'' ");
            sb.AppendLine(" ,W.LOT_NO");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine(" ,'' AS UNIT_NM");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(W.F_SUB_AMT))+'/'+CONVERT(nvarchar,SUM(W.INPUT_AMT)) AS TOTAL_AMT ");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(W.LOSS)) AS LOSS_AMT");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(W.POOR_AMT)) AS POOR");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL W");
            sb.AppendLine(" left outer join N_FLOW_CODE F");
            sb.AppendLine(" on W.FLOW_CD = F.FLOW_CD ");
            sb.AppendLine(" where W.LOT_NO = '" + LotNo + "'");
            sb.AppendLine(" group by F.FLOW_CD,W.F_STEP,F.FLOW_NM,LOT_NO ");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("  select ");
            sb.AppendLine(" '공정' AS GUBUN ");
            sb.AppendLine(" ,4 as 순서");
            sb.AppendLine(" ,99 as 순서2 ");
            sb.AppendLine(" ,'' AS INPUT_DATE");
            sb.AppendLine(" ,'' AS INPUT_CD ");
            sb.AppendLine(" ,'' AS SEQ");
            sb.AppendLine(" ,'' AS 시각 ");
            sb.AppendLine(" ,'총 공정 합계' AS CUST_NM");
            sb.AppendLine(" ,'' AS RAW_MAT_NM");
            sb.AppendLine(" ,'' AS TEST ");
            sb.AppendLine(" ,K.LOT_NO AS LOT_NO ");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine(" ,'' AS UNIT_NM");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(K.INPUT_AMT))+'/'+CONVERT(nvarchar,SUM(K.INST_AMT)) AS TOTAL_AMT");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(K.LOSS)) AS LOSS");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(K.POOR_AMT)) AS POOR_AMT");
            sb.AppendLine(" from (");
            sb.AppendLine("  select ");
            sb.AppendLine(" A.LOT_NO AS LOT_NO");
            sb.AppendLine(" ,AVG(B.INST_AMT) AS INST_AMT ");
            sb.AppendLine(" ,0 AS INPUT_AMT ");
            sb.AppendLine(" 		,SUM(A.LOSS) AS LOSS");
            sb.AppendLine(" 		,SUM(A.POOR_AMT) AS POOR_AMT");
            sb.AppendLine(" 	 FROM F_WORK_FLOW_DETAIL A ");
            sb.AppendLine(" 	 left outer join F_WORK_INST B ");
            sb.AppendLine(" 	 on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine(" 	 where A.LOT_NO = '" + LotNo + "' ");
            sb.AppendLine(" 	 group by A.LOT_NO ");
            sb.AppendLine("  ");
            sb.AppendLine("  union all");
            sb.AppendLine("  ");
            sb.AppendLine("  select ");
            sb.AppendLine(" A.LOT_NO AS LOT_NO");
            sb.AppendLine(" ,0 AS INST_AMT");
            sb.AppendLine(" ,SUM(A.INPUT_AMT) AS INPUT_AMT");
            sb.AppendLine(" ,0 AS LOSS");
            sb.AppendLine(" ,0 AS POOR_AMT");
            sb.AppendLine("  FROM F_ITEM_INPUT A ");
            sb.AppendLine("  where A.LOT_NO = '" + LotNo + "'");
            sb.AppendLine("  group by A.LOT_NO");
            sb.AppendLine("  ");
            sb.AppendLine("  ) AS K ");
            sb.AppendLine("  where K.LOT_NO = '" + LotNo + "'");
            sb.AppendLine("  GROUP BY K.LOT_NO");
            sb.AppendLine("  ");
            sb.AppendLine("  union all");
            sb.AppendLine(" select");
            sb.AppendLine(" '생산' AS GUBUN ");
            sb.AppendLine(" ,5 as 순서");
            sb.AppendLine(" ,1 as 순서2 ");
            sb.AppendLine(" ,I.INPUT_DATE");
            sb.AppendLine(" ,CONVERT(nvarchar,I.INPUT_CD)");
            sb.AppendLine(" ,'' AS INPUT_SEQ ");
            sb.AppendLine(" ,I.INTIME AS 시각");
            sb.AppendLine(" ,'' AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,I.LOT_NO");
            sb.AppendLine(" ,convert(nvarchar,I.LOT_SUB) ");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD ) AS UNIT_NM ");
            sb.AppendLine(" ,CONVERT(nvarchar,I.INPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" FROM F_ITEM_INPUT I ");
            sb.AppendLine(" left outer join N_ITEM_CODE N");
            sb.AppendLine(" on N.ITEM_CD = I.ITEM_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "'");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select");
            sb.AppendLine(" '생산' AS GUBUN ");
            sb.AppendLine(" ,5 as 순서");
            sb.AppendLine(" ,2 as 순서2 ");
            sb.AppendLine(" ,'' AS INPUT_DATE");
            sb.AppendLine(" ,'' AS INPUT_CD ");
            sb.AppendLine(" ,'' AS INPUT_SEQ ");
            sb.AppendLine(" ,'' AS 시각 ");
            sb.AppendLine(" ,'총 생산 합계' AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,I.LOT_NO");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD ) AS UNIT_NM ");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(I.INPUT_AMT)) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" FROM F_ITEM_INPUT I ");
            sb.AppendLine(" left outer join N_ITEM_CODE N");
            sb.AppendLine(" on N.ITEM_CD = I.ITEM_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "'");
            sb.AppendLine(" group by I.LOT_NO , N.ITEM_NM , N.SPEC , N.UNIT_CD");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select");
            sb.AppendLine(" '납품' AS GUBUN ");
            sb.AppendLine(" ,7 as 순서");
            sb.AppendLine(" ,1 as 순서2 ");
            sb.AppendLine("  ,S.SALES_DATE AS 매출일자");
            sb.AppendLine(" ,CONVERT(nvarchar,S.SALES_CD)");
            sb.AppendLine(" ,CONVERT(nvarchar,S.SEQ) AS INPUT_SEQ");
            sb.AppendLine(" ,SI.INTIME AS 시각");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE where CUST_CD = SI.CUST_CD ) AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,I.LOT_NO");
            sb.AppendLine(" ,convert(nvarchar,I.LOT_SUB) ");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD ) AS UNIT_NM ");
            sb.AppendLine(" ,CONVERT(nvarchar,S.TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" FROM F_ITEM_OUT_DETAIL I ");
            sb.AppendLine(" left outer join N_ITEM_CODE N");
            sb.AppendLine(" on N.ITEM_CD = I.ITEM_CD ");
            sb.AppendLine(" left outer join F_SALES_DETAIL S ");
            sb.AppendLine(" on S.OUTPUT_DATE = I.OUTPUT_DATE ");
            sb.AppendLine(" and S.OUTPUT_CD = I.OUTPUT_CD");
            sb.AppendLine(" and S.OUTPUT_SEQ = I.SEQ ");
            sb.AppendLine(" left outer join F_SALES SI");
            sb.AppendLine(" on SI.SALES_DATE = S.SALES_DATE ");
            sb.AppendLine(" and SI.SALES_CD = S.SALES_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "' and I.OUT_LOT is null and S.OUTPUT_DATE is not null");
            sb.AppendLine("  ");
            sb.AppendLine(" union all ");
            sb.AppendLine("  ");
            sb.AppendLine(" select");
            sb.AppendLine(" '납품' AS GUBUN ");
            sb.AppendLine(" ,7 as 순서");
            sb.AppendLine(" ,2 as 순서2 ");
            sb.AppendLine("  ,'' AS 매출일자 ");
            sb.AppendLine(" ,'' as 전표번호 ");
            sb.AppendLine(" ,'' AS INPUT_SEQ ");
            sb.AppendLine(" ,'' AS 시각 ");
            sb.AppendLine(" ,'총 납품 합계' AS CUST_NM");
            sb.AppendLine(" ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,I.LOT_NO");
            sb.AppendLine(" ,'' AS LOT_SUB");
            sb.AppendLine("  			,(select UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD ) AS UNIT_NM");
            sb.AppendLine(" ,CONVERT(nvarchar,SUM(S.TOTAL_AMT)) AS TOTAL_AMT ");
            sb.AppendLine(" ,'' AS LOSS_AMT ");
            sb.AppendLine(" ,'' AS POOR ");
            sb.AppendLine(" FROM F_ITEM_OUT_DETAIL I ");
            sb.AppendLine(" left outer join N_ITEM_CODE N");
            sb.AppendLine(" on N.ITEM_CD = I.ITEM_CD ");
            sb.AppendLine(" left outer join F_SALES_DETAIL S ");
            sb.AppendLine(" on S.OUTPUT_DATE = I.OUTPUT_DATE ");
            sb.AppendLine(" and S.OUTPUT_CD = I.OUTPUT_CD");
            sb.AppendLine(" and S.OUTPUT_SEQ = I.SEQ ");
            sb.AppendLine(" left outer join F_SALES SI");
            sb.AppendLine(" on SI.SALES_DATE = S.SALES_DATE ");
            sb.AppendLine(" and SI.SALES_CD = S.SALES_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "' and I.OUT_LOT is null and S.OUTPUT_DATE is not null");
            sb.AppendLine(" group by I.LOT_NO, N.ITEM_NM, N.SPEC, N.UNIT_CD ");
            sb.AppendLine(" order by 순서,순서2, INPUT_DATE, 시각");









            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_info_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" I.INPUT_DATE ");
            sb.AppendLine(" ,I.INPUT_CD ");
            sb.AppendLine(" ,I.LOT_NO ");
            sb.AppendLine(" ,W.W_INST_DATE ");
            sb.AppendLine(" ,W.W_INST_CD ");
            sb.AppendLine(" ,W.DELIVERY_DATE ");
            sb.AppendLine(" ,W.INST_NOTICE ");
            sb.AppendLine(" ,F.COMPLETE_YN ");
            sb.AppendLine(" ,W.ITEM_CD AS RAW_MAT_CD ");
            sb.AppendLine(" ,W.INST_AMT ");
            sb.AppendLine(" from F_WORK_INST W ");
            sb.AppendLine(" left outer join F_ITEM_INPUT I ");
            sb.AppendLine(" on W.LOT_NO = I.LOT_NO ");
            sb.AppendLine(" left outer join F_WORK_FLOW F ");
            sb.AppendLine(" on F.LOT_NO = W.LOT_NO ");
            sb.AppendLine(" where W.LOT_NO = '" + LotNo + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_item_input_output_list(string condition)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine(" SELECT IO_GUBUN, ITEM_CD, DATE, CD, AMT  FROM ( ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'I' AS IO_GUBUN ");
            sb.AppendLine(" ,ITEM_CD AS ITEM_CD ");
            sb.AppendLine(" ,INPUT_DATE AS DATE ");
            sb.AppendLine(" ,INPUT_CD AS CD ");
            sb.AppendLine(" ,INPUT_AMT AS AMT ");
            sb.AppendLine(" FROM F_ITEM_INPUT ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'O' AS IO_GUBUN ");
            sb.AppendLine(" ,ITEM_CD AS ITEM_CD ");
            sb.AppendLine(" ,OUTPUT_DATE AS DATE ");
            sb.AppendLine(" ,OUTPUT_CD AS CD ");
            sb.AppendLine(" ,OUTPUT_AMT AS AMT ");
            sb.AppendLine(" FROM F_ITEM_OUT_DETAIL ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" ) A ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(condition);


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        internal DataTable fn_Item_Ledger_List(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select '입고' as bun ");
            sb.AppendLine("  ,1 as ord");
            sb.AppendLine("  ,Z.INPUT_DATE");
            sb.AppendLine("  ,Z.INPUT_DATE AS 일자명칭");
            sb.AppendLine("  ,Z.INPUT_CD");
            sb.AppendLine("  ,Z.SEQ ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD ) AS UNIT_NM");
            sb.AppendLine("  ,ITEM_NM ");
            sb.AppendLine("  ,Z.LOT_NO");
            sb.AppendLine("  ,Z.LOT_SUB ");
            sb.AppendLine("  ,'' AS OUTPUT_LOT");
            sb.AppendLine("  , ISNULL(Z.INPUT_AMT,0) AS INPUT_AMT ");
            sb.AppendLine("  , 0 AS OUTPUT_AMT");
            sb.AppendLine("  ,B.SPEC");
            sb.AppendLine("  from F_ITEM_INPUT Z");
            sb.AppendLine("  left outer join N_ITEM_CODE B");
            sb.AppendLine("  on Z.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" ");
            sb.AppendLine("  WHERE 1=1");
            sb.AppendLine("  " + condition + " ");
            sb.AppendLine(" ");
            sb.AppendLine(" union all ");
            sb.AppendLine("  select '생산' as bun ");
            sb.AppendLine("  ,2 as ord");
            sb.AppendLine(" ,Z.OUTPUT_DATE");
            sb.AppendLine(" ,Z.OUTPUT_DATE AS 일자명칭");
            sb.AppendLine(" ,Z.OUTPUT_CD");
            sb.AppendLine(" ,Z.SEQ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD ) AS UNIT_NM");
            sb.AppendLine(" ,ITEM_NM");
            sb.AppendLine(" ,LOT_NO ");
            sb.AppendLine(" ,LOT_SUB");
            sb.AppendLine(" ,ISNULL(Z.OUT_LOT,'') AS OUTPUT_LOT ");
            sb.AppendLine(" , 0 AS INPUT_AMT");
            sb.AppendLine(" , ISNULL(Z.OUTPUT_AMT,0) AS OUTPUT_AMT");
            sb.AppendLine("  ,B.SPEC");
            sb.AppendLine(" from F_ITEM_OUT_DETAIL Z");
            sb.AppendLine(" left outer join N_ITEM_CODE B ");
            sb.AppendLine(" on Z.ITEM_CD = B.ITEM_CD");
            sb.AppendLine(" WHERE 1=1 ");
            sb.AppendLine(" and OUT_LOT is not null ");
            sb.AppendLine("  " + condition2 + " ");
            sb.AppendLine(" ");
            sb.AppendLine(" union all ");
            sb.AppendLine("  select '납품' as bun ");
            sb.AppendLine("  ,3 as ord");
            sb.AppendLine(" ,Z.OUTPUT_DATE");
            sb.AppendLine(" ,Z.OUTPUT_DATE AS 일자명칭");
            sb.AppendLine(" ,Z.OUTPUT_CD");
            sb.AppendLine(" ,Z.SEQ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD ) AS UNIT_NM");
            sb.AppendLine(" ,ITEM_NM");
            sb.AppendLine(" ,LOT_NO ");
            sb.AppendLine(" ,LOT_SUB");
            sb.AppendLine(" ,ISNULL(Z.OUT_LOT,'') AS OUTPUT_LOT ");
            sb.AppendLine(" , 0 AS INPUT_AMT");
            sb.AppendLine(" , ISNULL(Z.OUTPUT_AMT,0) AS OUTPUT_AMT");
            sb.AppendLine("  ,B.SPEC");
            sb.AppendLine(" from F_ITEM_OUT_DETAIL Z");
            sb.AppendLine(" left outer join N_ITEM_CODE B ");
            sb.AppendLine(" on Z.ITEM_CD = B.ITEM_CD");
            sb.AppendLine(" WHERE 1=1 ");
            sb.AppendLine(" and OUT_LOT is null ");
            sb.AppendLine("  " + condition2 + " ");
            sb.AppendLine(" ");
            sb.AppendLine(" union all ");
            sb.AppendLine(" SELECT");
            sb.AppendLine(" 'ㅎ' as bun ");
            sb.AppendLine("  ,4 as ord");
            sb.AppendLine(" ,INPUT_DATE ");
            sb.AppendLine("  ,'--- 일계 ---' AS 일자명칭");
            sb.AppendLine("  ,'999999' AS INPUT_CD");
            sb.AppendLine("  ,'' AS SEQ ");
            sb.AppendLine("  ,'' AS UNIT_NM ");
            sb.AppendLine("  ,'' AS ITEM_NM ");
            sb.AppendLine("  ,'' AS LOT_NO");
            sb.AppendLine("  ,'' AS LOT_SUB ");
            sb.AppendLine("  ,'' AS OUTPUT_LOT");
            sb.AppendLine("  ,sum(INPUT_AMT) AS INPUT_AMT");
            sb.AppendLine("  ,sum(OUTPUT_AMT) AS OUTPUT_AMT");
            sb.AppendLine("  ,'' AS SPEC");
            sb.AppendLine(" 	FROM ( select");
            sb.AppendLine("  Z.INPUT_DATE AS INPUT_DATE ");
            sb.AppendLine("  ,AVG(ISNULL(Z.INPUT_AMT,0)) AS INPUT_AMT");
            sb.AppendLine("  ,0 AS OUTPUT_AMT");
            sb.AppendLine("  from F_ITEM_INPUT Z");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.INPUT_DATE , Z.INPUT_CD , Z.SEQ ");
            sb.AppendLine("  union all");
            sb.AppendLine("  select ");
            sb.AppendLine("  Z.OUTPUT_DATE AS INPUT_DATE");
            sb.AppendLine("  ,0 AS INPUT_AMT");
            sb.AppendLine("  ,AVG(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT ");
            sb.AppendLine("  from F_ITEM_OUT_DETAIL Z ");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition2 + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.OUTPUT_DATE , Z.OUTPUT_CD , Z.SEQ ");
            sb.AppendLine(" ");
            sb.AppendLine(" 	) A group by A.INPUT_DATE");
            sb.AppendLine("  union all");
            sb.AppendLine(" SELECT");
            sb.AppendLine(" '' as bun ");
            sb.AppendLine("  ,5 as ord");
            sb.AppendLine(" 	,left(INPUT_DATE,8)+'99' AS INPUT_DATE ");
            sb.AppendLine("  ,'=== 월계 ===' AS 일자명칭");
            sb.AppendLine("  ,'999999' AS INPUT_CD");
            sb.AppendLine("  ,'' AS SEQ ");
            sb.AppendLine("  ,'' AS UNIT_NM ");
            sb.AppendLine("  ,'' AS ITEM_NM ");
            sb.AppendLine("  ,'' AS LOT_NO");
            sb.AppendLine("  ,'' AS LOT_SUB ");
            sb.AppendLine("  ,'' AS OUTPUT_LOT");
            sb.AppendLine("  ,sum(INPUT_AMT) AS INPUT_AMT");
            sb.AppendLine("  ,sum(OUTPUT_AMT) AS OUTPUT_AMT");
            sb.AppendLine("  ,'' AS SPEC");
            sb.AppendLine(" 	 FROM (select");
            sb.AppendLine("  Z.INPUT_DATE AS INPUT_DATE ");
            sb.AppendLine("  ,AVG(ISNULL(Z.INPUT_AMT,0)) AS INPUT_AMT");
            sb.AppendLine("  ,0 AS OUTPUT_AMT");
            sb.AppendLine("  from F_ITEM_INPUT Z");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.INPUT_DATE , Z.INPUT_CD , Z.SEQ ");
            sb.AppendLine("  union all");
            sb.AppendLine("  select ");
            sb.AppendLine("  Z.OUTPUT_DATE AS INPUT_DATE");
            sb.AppendLine("  ,0 AS INPUT_AMT");
            sb.AppendLine("  ,AVG(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT ");
            sb.AppendLine("  from F_ITEM_OUT_DETAIL Z ");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition2 + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.OUTPUT_DATE , Z.OUTPUT_CD , Z.SEQ ");
            sb.AppendLine(" ");
            sb.AppendLine(" 	 ) A group by left(A.INPUT_DATE,8) ");
            sb.AppendLine(" 	union all");
            sb.AppendLine(" SELECT");
            sb.AppendLine(" '' as bun ");
            sb.AppendLine("  ,6 as ord");
            sb.AppendLine(" 	 ,left(INPUT_DATE,2)+'99-99-99' AS INPUT_DATE");
            sb.AppendLine("  ,'=== 합계 ===' AS 일자명칭");
            sb.AppendLine("  ,'999999' AS INPUT_CD");
            sb.AppendLine("  ,'' AS SEQ ");
            sb.AppendLine("  ,'' AS UNIT_NM ");
            sb.AppendLine("  ,'' AS ITEM_NM ");
            sb.AppendLine("  ,'' AS LOT_NO");
            sb.AppendLine("  ,'' AS LOT_SUB ");
            sb.AppendLine("  ,'' AS OUTPUT_LOT");
            sb.AppendLine("  ,sum(INPUT_AMT) AS INPUT_AMT");
            sb.AppendLine("  ,sum(OUTPUT_AMT) AS OUTPUT_AMT");
            sb.AppendLine("  ,'' AS SPEC");
            sb.AppendLine(" 		 FROM ( select ");
            sb.AppendLine("  Z.INPUT_DATE AS INPUT_DATE ");
            sb.AppendLine("  ,AVG(ISNULL(Z.INPUT_AMT,0)) AS INPUT_AMT");
            sb.AppendLine("  ,0 AS OUTPUT_AMT");
            sb.AppendLine("  from F_ITEM_INPUT Z");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.INPUT_DATE , Z.INPUT_CD , Z.SEQ ");
            sb.AppendLine("  union all");
            sb.AppendLine("  select ");
            sb.AppendLine("  Z.OUTPUT_DATE AS INPUT_DATE");
            sb.AppendLine("  ,0 AS INPUT_AMT");
            sb.AppendLine("  ,AVG(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT ");
            sb.AppendLine("  from F_ITEM_OUT_DETAIL Z ");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("  " + condition2 + " ");
            sb.AppendLine(" ");
            sb.AppendLine("  group by Z.OUTPUT_DATE , Z.OUTPUT_CD , Z.SEQ ");
            sb.AppendLine(" ");
            sb.AppendLine(" 	) A group by left(A.INPUT_DATE,2)");
            sb.AppendLine("  order by INPUT_DATE, ord, INPUT_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Sales_Detail_Order_Count_Only_Item(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select  ");
            sb.AppendLine("  D.ITEM_CD   ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD ) AS CUST_NM  ");
            sb.AppendLine("  ,SUM(D.TOTAL_MONEY) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE D.ITEM_CD = ITEM_CD ) AS PRODUCT_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition + "  ");
            sb.AppendLine("  group by A.CUST_CD, D.ITEM_CD ");
            sb.AppendLine("  order by SUM(D.TOTAL_MONEY) desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int delete_work_flow(string lot_no)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" UPDATE N_ITEM_CODE SET BAL_STOCK = BAL_STOCK - (SELECT MAX(INPUT_AMT) FROM F_ITEM_INPUT WHERE LOT_NO = '" + lot_no + "')  ");
                sb.AppendLine(" WHERE ITEM_CD = (SELECT top 1 ITEM_CD FROM F_ITEM_INPUT WHERE LOT_NO = '" + lot_no + "' ) ");

                sb.AppendLine(" DELETE FROM F_WORK_FLOW ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");

                sb.AppendLine(" DELETE FROM F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");

                sb.AppendLine(" DELETE FROM F_ITEM_INPUT ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");

                sb.AppendLine(" DELETE FROM F_FLOW_POOR ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "DELETE WORK_FLOW");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Collect_list(string condition)
        {
            wnAdo wAdo = new wnAdo();

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     A.SOO_DATE ");
            sb.AppendLine("     , A.SOO_CD ");
            sb.AppendLine("     , A.SOO_GUBUN ");
            sb.AppendLine("     , (SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and S_CODE = A.SOO_GUBUN) AS SOO_GUBUN_NM ");
            sb.AppendLine("     , A.CUST_CD ");
            sb.AppendLine("     , (SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM ");
            sb.AppendLine("     , A.SOO_MONEY ");
            sb.AppendLine("     , A.DC_MONEY  ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.COMMENT  ");
            sb.AppendLine("     from  F_COLLECT A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SOO_DATE, A.SOO_CD desc ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable selectSooList(string custCd)
        {
            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     A.SOO_DATE ");
            sb.AppendLine("     , A.SOO_CD ");
            sb.AppendLine("     , A.CUST_CD ");
            sb.AppendLine("     , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD) AS CUST_NM ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.SOO_GUBUN  ");
            sb.AppendLine("     , B.BALANCE  ");
            sb.AppendLine("     from F_COLLECT A ");
            sb.AppendLine("     left outer join N_CUST_CODE B ");
            sb.AppendLine("     ON A.CUST_CD = B.CUST_CD ");
            sb.AppendLine("     WHERE B.CUST_NM is not null ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int deleteSoo(string txt_sooDate, string txt_sooCd, string cust_cd, string totalMoneyTemp, string sooTemp, string dcTemp)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                wnDm wDm = new wnDm();

                sb.AppendLine("delete from F_COLLECT ");
                sb.AppendLine("     where SOO_DATE = '" + txt_sooDate + "'");
                sb.AppendLine("     and SOO_CD = '" + txt_sooCd + "'");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + cust_cd + "' ) + " + double.Parse(totalMoneyTemp).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + cust_cd + "' ");

                bool isCustDay = wDm.isCustDayTotal(txt_sooDate, cust_cd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(txt_sooDate, cust_cd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" COL_MONEY = COL_MONEY - " + sooTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY - " + dcTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY - " + totalMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + txt_sooDate + "'  AND CUST_CD = '" + cust_cd + "'  ");


                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(txt_sooDate, cust_cd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(txt_sooDate, cust_cd, totalMoneyTemp.Replace(",", ""), "+"));



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_collect_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertSoo(
                 string txt_soo_date
                         , string custCd
                         , string sooMoney
                         , string dcMoney
                         , string comm
                         , string totalMoney
                         , string gubun
            )
        {
            try
            {
                wAdo = new wnAdo();
                wnDm wDm = new wnDm();

                StringBuilder sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(SOO_CD),0)+1 from F_COLLECT ");
                sb.AppendLine("where SOO_DATE = '" + txt_soo_date + "' ");

                sb.AppendLine("insert into F_COLLECT(");
                sb.AppendLine("     SOO_DATE ");
                sb.AppendLine("     ,SOO_CD ");
                sb.AppendLine("     ,SOO_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,SOO_MONEY ");
                sb.AppendLine("     ,TOTAL_MONEY ");
                sb.AppendLine("     ,DC_MONEY ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME )");
                sb.AppendLine("  values ( ");
                sb.AppendLine("     '" + txt_soo_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine("     ,'" + gubun + "' ");
                sb.AppendLine("     ,'" + custCd + "' ");
                sb.AppendLine("     ," + sooMoney.Replace(",", "") + " ");
                sb.AppendLine("     ," + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     ," + dcMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,'" + comm + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                sb.AppendLine(" ) ");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE = BALANCE - " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");


                bool isCustDay = wDm.isCustDayTotal(txt_soo_date, custCd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(txt_soo_date, custCd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" COL_MONEY = COL_MONEY + " + sooMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dcMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + txt_soo_date + "'  AND CUST_CD = '" + custCd + "'  ");

                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(txt_soo_date, custCd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(txt_soo_date, custCd, totalMoney.Replace(",", ""), "-"));


                //sb.AppendLine("update F_SALES set");
                //sb.AppendLine("     COMPLETE_YN = 'Y' ");
                //sb.AppendLine("     where SALES_DATE = '" + grdSalesDetail.Rows[0].Cells["SALES_DATE"].Value + "' ");
                //sb.AppendLine("     and SALES_CD = '" + grdSalesDetail.Rows[0].Cells["SALES_CD"].Value + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COLLECT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateSoo(
             string dateSoo
                        , string sooCd
                        , string custCd
                        , string sooMoney
                        , string dcMoney
                        , string comm
                        , string balance
                        , string totalMoney
                        , string gubun
                        , string totalMoneyTemp
                        , string sooMoneyTemp
                        , string dcMoneyTemp
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                wnDm wDm = new wnDm();


                sb.AppendLine("update  F_COLLECT set");
                sb.AppendLine("     SOO_GUBUN =  '" + gubun + "'");
                sb.AppendLine("     ,SOO_MONEY =" + sooMoney.Replace(",", "") + "");
                sb.AppendLine("     ,TOTAL_MONEY =" + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,DC_MONEY =" + dcMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,COMMENT ='" + comm + "' ");
                sb.AppendLine("     ,INSTAFF = '' ");
                sb.AppendLine("     ,UPTIME  = convert(varchar, getdate(), 120)");
                sb.AppendLine("     where SOO_DATE = '" + dateSoo + "'");
                sb.AppendLine("     and SOO_CD = '" + sooCd + "'");



                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ) + " + double.Parse(totalMoneyTemp).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ) - " + double.Parse(totalMoney).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");


                bool isCustDay = wDm.isCustDayTotal(dateSoo, custCd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(dateSoo, custCd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" COL_MONEY = COL_MONEY - " + sooMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY - " + dcMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY - " + totalMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + dateSoo + "'  AND CUST_CD = '" + custCd + "'  ");


                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" COL_MONEY = COL_MONEY + " + sooMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_DC_MONEY = COL_DC_MONEY + " + dcMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,COL_TOTAL_MONEY = COL_TOTAL_MONEY + " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + dateSoo + "'  AND CUST_CD = '" + custCd + "'  ");

                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(dateSoo, custCd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(dateSoo, custCd, totalMoneyTemp.Replace(",", ""), "+"));
                sb.AppendLine(wDm.CustDayTotal_Change_Balance(dateSoo, custCd, totalMoney.Replace(",", ""), "-"));


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable selectGiveList(string custCd)
        {
            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     A.GIVE_DATE ");
            sb.AppendLine("     , A.GIVE_CD ");
            sb.AppendLine("     , A.CUST_CD ");
            sb.AppendLine("     , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD) AS CUST_NM ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.GIVE_GUBUN  ");
            sb.AppendLine("     , B.BALANCE  ");
            sb.AppendLine("     from F_GIVE A ");
            sb.AppendLine("     left outer join N_CUST_CODE B ");
            sb.AppendLine("     ON A.CUST_CD = B.CUST_CD ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Give_list(string condition)
        {
            wnAdo wAdo = new wnAdo();

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     A.GIVE_DATE ");
            sb.AppendLine("     , A.GIVE_CD ");
            sb.AppendLine("     , A.GIVE_GUBUN ");
            sb.AppendLine("     , (SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and S_CODE = A.GIVE_GUBUN) AS GIVE_GUBUN_NM ");
            sb.AppendLine("     , A.CUST_CD ");
            sb.AppendLine("     , (SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM ");
            sb.AppendLine("     , A.GIVE_MONEY ");
            sb.AppendLine("     , A.DC_MONEY  ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.COMMENT  ");
            sb.AppendLine("     from  F_GIVE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.GIVE_DATE, A.GIVE_CD desc ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int deleteGive(string txt_giveDate, string txt_giveCd, string cust_cd, string totalMoneyTemp, string giveTemp, string dcTemp)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                wnDm wDm = new wnDm();

                sb.AppendLine("delete from F_GIVE ");
                sb.AppendLine("     where GIVE_DATE = '" + txt_giveDate + "'");
                sb.AppendLine("     and GIVE_CD = '" + txt_giveCd + "'");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + cust_cd + "' ) + " + double.Parse(totalMoneyTemp).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + cust_cd + "' ");

                bool isCustDay = wDm.isCustDayTotal(txt_giveDate, cust_cd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(txt_giveDate, cust_cd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" PAY_MONEY = PAY_MONEY - " + giveTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY - " + dcTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY - " + totalMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + txt_giveDate + "'  AND CUST_CD = '" + cust_cd + "'  ");


                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(txt_giveDate, cust_cd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(txt_giveDate, cust_cd, totalMoneyTemp.Replace(",", ""), "+"));



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_collect_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertGive(
                 string txt_give_date
                         , string custCd
                         , string giveMoney
                         , string dcMoney
                         , string comm
                         , string totalMoney
                         , string gubun
            )
        {
            try
            {
                wAdo = new wnAdo();
                wnDm wDm = new wnDm();

                StringBuilder sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(GIVE_CD),0)+1 from F_GIVE ");
                sb.AppendLine("where GIVE_DATE = '" + txt_give_date + "' ");

                sb.AppendLine("insert into F_GIVE(");
                sb.AppendLine("     GIVE_DATE ");
                sb.AppendLine("     ,GIVE_CD ");
                sb.AppendLine("     ,GIVE_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,GIVE_MONEY ");
                sb.AppendLine("     ,TOTAL_MONEY ");
                sb.AppendLine("     ,DC_MONEY ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME )");
                sb.AppendLine("  values ( ");
                sb.AppendLine("     '" + txt_give_date + "' ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine("     ,'" + gubun + "' ");
                sb.AppendLine("     ,'" + custCd + "' ");
                sb.AppendLine("     ," + giveMoney.Replace(",", "") + " ");
                sb.AppendLine("     ," + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     ," + dcMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,'" + comm + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                sb.AppendLine(" ) ");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE = BALANCE - " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");


                bool isCustDay = wDm.isCustDayTotal(txt_give_date, custCd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(txt_give_date, custCd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" PAY_MONEY = PAY_MONEY + " + giveMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY + " + dcMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY + " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + txt_give_date + "'  AND CUST_CD = '" + custCd + "'  ");

                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(txt_give_date, custCd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(txt_give_date, custCd, totalMoney.Replace(",", ""), "-"));


                //sb.AppendLine("update F_SALES set");
                //sb.AppendLine("     COMPLETE_YN = 'Y' ");
                //sb.AppendLine("     where SALES_DATE = '" + grdSalesDetail.Rows[0].Cells["SALES_DATE"].Value + "' ");
                //sb.AppendLine("     and SALES_CD = '" + grdSalesDetail.Rows[0].Cells["SALES_CD"].Value + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COLLECT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {

                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateGive(
             string dateGive
                        , string giveCd
                        , string custCd
                        , string giveMoney
                        , string dcMoney
                        , string comm
                        , string balance
                        , string totalMoney
                        , string gubun
                        , string totalMoneyTemp
                        , string sooMoneyTemp
                        , string dcMoneyTemp
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                wnDm wDm = new wnDm();


                sb.AppendLine("update  F_GIVE set");
                sb.AppendLine("     GIVE_GUBUN =  '" + gubun + "'");
                sb.AppendLine("     ,GIVE_MONEY =" + giveMoney.Replace(",", "") + "");
                sb.AppendLine("     ,TOTAL_MONEY =" + totalMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,DC_MONEY =" + dcMoney.Replace(",", "") + " ");
                sb.AppendLine("     ,COMMENT ='" + comm + "' ");
                sb.AppendLine("     ,INSTAFF = '' ");
                sb.AppendLine("     ,UPTIME  = convert(varchar, getdate(), 120)");
                sb.AppendLine("     where GIVE_DATE = '" + dateGive + "'");
                sb.AppendLine("     and GIVE_CD = '" + giveCd + "'");



                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ) + " + double.Parse(totalMoneyTemp).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");

                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("     BALANCE  =  (select  BALANCE ");
                sb.AppendLine("     from N_CUST_CODE ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ) - " + double.Parse(totalMoney).ToString() + " ");
                sb.AppendLine("     where CUST_CD = '" + custCd + "' ");


                bool isCustDay = wDm.isCustDayTotal(dateGive, custCd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(dateGive, custCd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" PAY_MONEY = PAY_MONEY - " + sooMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY - " + dcMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY - " + totalMoneyTemp.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + dateGive + "'  AND CUST_CD = '" + custCd + "'  ");


                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" PAY_MONEY = PAY_MONEY + " + giveMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_DC_MONEY = PAY_DC_MONEY + " + dcMoney.Replace(",", "") + " ");
                sb.AppendLine(" ,PAY_TOTAL_MONEY = PAY_TOTAL_MONEY + " + totalMoney.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + dateGive + "'  AND CUST_CD = '" + custCd + "'  ");

                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(dateGive, custCd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(dateGive, custCd, totalMoneyTemp.Replace(",", ""), "+"));
                sb.AppendLine(wDm.CustDayTotal_Change_Balance(dateGive, custCd, totalMoney.Replace(",", ""), "-"));


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public DataTable fn_Sales_Day_Ledger_List(string condition, string s_date, string e_date)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   ");

            sb.AppendLine(" select '매출' as bun ");
            sb.AppendLine(" ,A.SALES_DATE");
            sb.AppendLine(" ,A.SALES_DATE AS 일자명칭");
            sb.AppendLine(" ,A.SALES_CD  ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and Z.SALES_GUBUN = S_CODE ) AS INPUT_GUBUN  ");
            sb.AppendLine(" ,Z.CUST_CD");
            sb.AppendLine(" ,C.CUST_NM");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='900' and A.TAX_CD = S_CODE) AS TAX_NM");
            sb.AppendLine(" ,C.TAX_CD ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='910' and Z.TAX_CD = S_CODE) AS VAT_NM");
            sb.AppendLine(" ,B.VAT_CD ");
            sb.AppendLine(" ,B.ITEM_NM AS PRODUCT_NM ");
            sb.AppendLine(" , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT ");
            sb.AppendLine(" , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE");
            sb.AppendLine(" , case when Z.TAX_CD = '1' and A.TAX_CD = '1' ");
            sb.AppendLine("  then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )  ");
            sb.AppendLine("  else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY");
            sb.AppendLine("  ,case when A.TAX_CD = '2' OR Z.TAX_CD = '2'  ");
            sb.AppendLine("  then 0");
            sb.AppendLine("  else case when Z.TAX_CD = '0' ");
            sb.AppendLine("  then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1 ");
            sb.AppendLine("  else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,case when A.TAX_CD = '1'");
            sb.AppendLine("  then  ");
            sb.AppendLine("  		case when Z.TAX_CD = '2'  ");
            sb.AppendLine("  			then");
            sb.AppendLine("  				(A.TOTAL_AMT*A.TOTAL_PRICE)");
            sb.AppendLine("  			else");
            sb.AppendLine("  				case when Z.TAX_CD ='1' ");
            sb.AppendLine("  				then (A.TOTAL_AMT*A.TOTAL_PRICE) ");
            sb.AppendLine("  				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end  ");
            sb.AppendLine("  				end");
            sb.AppendLine("  else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY ");
            sb.AppendLine(" ,0			AS SOO_MONEY");
            sb.AppendLine(" ,0			AS DC_MONEY ");
            sb.AppendLine(" ,0			AS TOTAL_SOO_MONEY");
            sb.AppendLine(" ,0			AS BALANCE  ");
            sb.AppendLine(" , B.SPEC  ");
            sb.AppendLine("   from F_SALES Z");
            sb.AppendLine("   left outer join F_SALES_DETAIL A");
            sb.AppendLine("   on Z.SALES_DATE = A.SALES_DATE  ");
            sb.AppendLine(" and Z.SALES_CD = A.SALES_CD ");
            sb.AppendLine("   left outer join N_ITEM_CODE B");
            sb.AppendLine("   on A.ITEM_CD = B.ITEM_CD  ");
            sb.AppendLine("   left outer join N_CUST_CODE C");
            sb.AppendLine("   on Z.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("   left outer join F_ITEM_INPUT D  ");
            sb.AppendLine("   on D.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("   and D.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine("   where Z.SALES_DATE >= '" + s_date + "' and  Z.SALES_DATE <= '" + e_date + "'");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("   union all  ");
            sb.AppendLine(" select ");
            sb.AppendLine("   '수금' as bun ");
            sb.AppendLine("   ,Z.SOO_DATE AS SALES_DATE ");
            sb.AppendLine("   ,Z.SOO_DATE AS 일자명칭");
            sb.AppendLine("   ,Z.SOO_CD AS SALES_CD  ");
            sb.AppendLine("   ,0 AS SEQ  ");
            sb.AppendLine("   ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and Z.SOO_GUBUN = S_CODE ) AS INPUT_GUBUN");
            sb.AppendLine("   ,Z.CUST_CD ");
            sb.AppendLine("   ,(SELECT CUST_NM FROM N_CUST_CODE WHERE Z.CUST_CD = CUST_CD ) AS CUST_NM  ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   ,0");
            sb.AppendLine("   ,0");
            sb.AppendLine("   ,0");
            sb.AppendLine("   ,0");
            sb.AppendLine("   ,0");
            sb.AppendLine("   ,SOO_MONEY ");
            sb.AppendLine("   ,DC_MONEY  ");
            sb.AppendLine("   ,TOTAL_MONEY  ");
            sb.AppendLine("   ,0 AS BALANCE ");
            sb.AppendLine("   ,''  ");
            sb.AppendLine("   FROM F_COLLECT Z ");
            sb.AppendLine("   where Z.SOO_DATE >= '" + s_date + "' and  Z.SOO_DATE <= '" + e_date + "' ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("   union all  ");
            sb.AppendLine("   select  ");
            sb.AppendLine(" 'ㄱ' as bun  ");
            sb.AppendLine("   ,A.SALES_DATE AS SALES_DATE  ");
            sb.AppendLine("   ,'-- 전잔고 --' AS 일자명칭  ");
            sb.AppendLine("   ,0 AS SALES_CD");
            sb.AppendLine("   ,0 AS SEQ  ");
            sb.AppendLine("   ,'' AS  INPUT_GUBUN ");
            sb.AppendLine("   ,A.CUST_CD AS CUST_CD  ");
            sb.AppendLine("   ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD ) + ' 전잔고' AS CUST_NM  ");
            sb.AppendLine("   ,'' AS TAX_NM ");
            sb.AppendLine("   ,'' AS TAX_CD ");
            sb.AppendLine("   ,'' AS  VAT_NM");
            sb.AppendLine("   ,'' AS VAT_CD ");
            sb.AppendLine("   ,'' AS  PRODUCT_NM  ");
            sb.AppendLine("   ,0 AS TOTAL_AMT  ");
            sb.AppendLine("   ,0 AS TOTAL_PRICE");
            sb.AppendLine("   ,0 AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine("   ,0 AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("   ,0 AS TOTAL_MONEY");
            sb.AppendLine("   ,0			AS SOO_MONEY");
            sb.AppendLine("   ,0			AS DC_MONEY ");
            sb.AppendLine("   ,0			AS TOTAL_SOO_MONEY");
            sb.AppendLine("   ,AVG(BALANCE) AS BALANCE  ");
            sb.AppendLine(" , '' AS SPEC ");
            sb.AppendLine(" FROM ( ");
            sb.AppendLine(" select ");
            sb.AppendLine(" ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE < Z.SALES_DATE order by INPUT_DATE DESC ),0) AS BALANCE ");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" ,Z.SALES_DATE ");
            sb.AppendLine("   from F_SALES Z ");
            sb.AppendLine("   left outer join T_CUST_DAY_TOTAL T  ");
            sb.AppendLine("   on Z.CUST_CD = T.CUST_CD");
            sb.AppendLine("   where 1=1");
            sb.AppendLine("   and Z.SALES_DATE >= '" + s_date + "' and  Z.SALES_DATE <= '" + e_date + "'");
            sb.AppendLine("   group by Z.CUST_CD, Z.SALES_DATE ");
            sb.AppendLine("   union all");
            sb.AppendLine(" select ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE < Z.SOO_DATE order by INPUT_DATE DESC ),0) AS BALANCE  ");
            sb.AppendLine("   		,Z.CUST_CD ");
            sb.AppendLine("   		,Z.SOO_DATE");
            sb.AppendLine("   from F_COLLECT Z ");
            sb.AppendLine("   left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine("   on Z.CUST_CD = T.CUST_CD  ");
            sb.AppendLine("   where 1=1  ");
            sb.AppendLine("   and Z.SOO_DATE >= '" + s_date + "' and  Z.SOO_DATE <= '" + e_date + "'");
            sb.AppendLine(" group by Z.CUST_CD, Z.SOO_DATE ");
            sb.AppendLine("  ");
            sb.AppendLine(" ) A group by A.CUST_CD , A.SALES_DATE");
            sb.AppendLine("  ");
            sb.AppendLine(" union all ");
            sb.AppendLine("  ");
            sb.AppendLine(" select 'ㅎ' as bun ");
            sb.AppendLine(" ,A.SALES_DATE AS SALES_DATE ");
            sb.AppendLine(" ,'=== 소계 ===' AS 일자명칭 ");
            sb.AppendLine(" ,0 AS SALES_CD  ");
            sb.AppendLine(" ,0 AS SEQ ");
            sb.AppendLine(" ,'' AS  INPUT_GUBUN");
            sb.AppendLine(" ,A.CUST_CD AS CUST_CD ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD ) + ' 소계' AS CUST_NM");
            sb.AppendLine(" ,'' AS TAX_NM");
            sb.AppendLine(" ,'' AS TAX_CD");
            sb.AppendLine(" ,'' AS  VAT_NM  ");
            sb.AppendLine(" ,'' AS VAT_CD");
            sb.AppendLine(" ,'' AS  PRODUCT_NM ");
            sb.AppendLine(" ,0 AS TOTAL_AMT ");
            sb.AppendLine(" ,0 AS TOTAL_PRICE  ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_SUPPLY_MONEY),0) AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_TAX_MONEY),0) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_MONEY),0) AS TOTAL_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(SOO_MONEY),0) AS SOO_MONEY  ");
            sb.AppendLine(" ,ISNULL(AVG(DC_MONEY),0) AS DC_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_SOO_MONEY),0) AS TOTAL_SOO_MONEY  ");
            sb.AppendLine(" ,ISNULL(AVG(BALANCE),0) AS BALANCE");
            sb.AppendLine(" , '' AS FROZEN_NM  ");
            sb.AppendLine("   from (  ");
            sb.AppendLine("   select ISNULL((SELECT top 1 S_RS_SUPPLY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 S_RS_TAX_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 S_RS_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS TOTAL_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS SOO_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_DC_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS DC_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS TOTAL_SOO_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SALES_DATE order by INPUT_DATE),0) AS BALANCE");
            sb.AppendLine(" ,Z.SALES_DATE");
            sb.AppendLine(" ,Z.CUST_CD");
            sb.AppendLine(" FROM F_SALES Z  ");
            sb.AppendLine("   left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine("   on Z.CUST_CD = T.CUST_CD  ");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("   and Z.SALES_DATE >= '" + s_date + "' and  Z.SALES_DATE <= '" + e_date + "'  ");
            sb.AppendLine("   group by Z.CUST_CD, Z.SALES_DATE");
            sb.AppendLine("   union all  ");
            sb.AppendLine("   select ISNULL((SELECT top 1 S_RS_SUPPLY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 S_RS_TAX_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 S_RS_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS TOTAL_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS SOO_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_DC_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS DC_MONEY  ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 COL_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.SOO_DATE order by INPUT_DATE),0) AS BALANCE ");
            sb.AppendLine(" ,Z.SOO_DATE  ");
            sb.AppendLine(" ,Z.CUST_CD");
            sb.AppendLine(" FROM F_COLLECT Z");
            sb.AppendLine("   left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine("   on Z.CUST_CD = T.CUST_CD  ");
            sb.AppendLine("  where 1=1");
            sb.AppendLine("   and Z.SOO_DATE >= '" + s_date + "' and  Z.SOO_DATE <= '" + e_date + "'");
            sb.AppendLine("   group by Z.CUST_CD, Z.SOO_DATE  ");
            sb.AppendLine("  ");
            sb.AppendLine("   ) A group by A.CUST_CD , A.SALES_DATE ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine(" union all ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine(" select 'ㅎ' as bun ");
            sb.AppendLine(" ,SALES_DATE AS SALES_DATE");
            sb.AppendLine(" ,'=== 합계 ===' AS 일자명칭 ");
            sb.AppendLine(" ,0 AS SALES_CD  ");
            sb.AppendLine(" ,0 AS SEQ ");
            sb.AppendLine(" ,'' AS  INPUT_GUBUN");
            sb.AppendLine(" ,'9999999' AS CUST_CD ");
            sb.AppendLine(" ,SALES_DATE+' 판매합계' AS CUST_NM");
            sb.AppendLine(" ,'' AS TAX_NM");
            sb.AppendLine(" ,'' AS TAX_CD");
            sb.AppendLine(" ,'' AS  VAT_NM  ");
            sb.AppendLine(" ,'' AS VAT_CD");
            sb.AppendLine(" ,'' AS  PRODUCT_NM ");
            sb.AppendLine(" ,0 AS TOTAL_AMT ");
            sb.AppendLine(" ,0 AS TOTAL_PRICE  ");
            sb.AppendLine(" ,SUM(A.TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,SUM(A.TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,SUM(A.TOTAL_MONEY) AS TOTAL_MONEY");
            sb.AppendLine(" ,SUM(SOO_MONEY) AS SOO_MONEY");
            sb.AppendLine(" ,SUM(DC_MONEY) AS DC_MONEY  ");
            sb.AppendLine(" ,SUM(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY");
            sb.AppendLine(" ,0  ");
            sb.AppendLine(" , '' AS FROZEN_NM  ");
            sb.AppendLine("   from (  ");
            sb.AppendLine("  select");
            sb.AppendLine("  					Z.SALES_DATE  ");
            sb.AppendLine("  					,Z.CUST_CD ");
            sb.AppendLine("  ,Z.ALL_SUPPLY_MONEY AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine("  ,Z.ALL_TAX_MONEY AS TOTAL_TAX_MONEY ");
            sb.AppendLine("  ,Z.ALL_TOTAL_MONEY AS TOTAL_MONEY");
            sb.AppendLine("  ,0 AS SOO_MONEY");
            sb.AppendLine("  ,0 AS DC_MONEY ");
            sb.AppendLine("  ,0 AS TOTAL_SOO_MONEY");
            sb.AppendLine(" FROM F_SALES Z  ");
            sb.AppendLine("   where 1=1  ");
            sb.AppendLine("  			and Z.SALES_DATE >= '" + s_date + "' and  Z.SALES_DATE <= '" + e_date + "' ");
            sb.AppendLine("  ");
            sb.AppendLine("  			union all ");
            sb.AppendLine("  			 ");
            sb.AppendLine("  			select ");
            sb.AppendLine("  					Z.SOO_DATE ");
            sb.AppendLine("  					,Z.CUST_CD ");
            sb.AppendLine("  ,0 AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine("  ,0 AS TOTAL_TAX_MONEY");
            sb.AppendLine("  ,0 AS TOTAL_MONEY ");
            sb.AppendLine("  ,SOO_MONEY AS SOO_MONEY ");
            sb.AppendLine("  ,DC_MONEY AS DC_MONEY");
            sb.AppendLine("  ,TOTAL_MONEY AS TOTAL_SOO_MONEY  ");
            sb.AppendLine(" FROM F_COLLECT Z");
            sb.AppendLine("   where 1=1  ");
            sb.AppendLine("  			and Z.SOO_DATE >= '" + s_date + "' and  Z.SOO_DATE <= '" + e_date + "'  ");
            sb.AppendLine("  )  A group by SALES_DATE");
            sb.AppendLine(" order by SALES_DATE, CUST_CD, bun  ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Buy_Day_Ledger_List(string condition, string s_date, string e_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine(" select '매입' as bun ");
            sb.AppendLine(" ,A.BUY_DATE AS SALES_DATE");
            sb.AppendLine(" ,A.BUY_DATE AS 일자명칭");
            sb.AppendLine(" ,A.BUY_CD AS SALES_CD");
            sb.AppendLine(" ,A.SEQ AS SEQ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1100' and Z.BUY_GUBUN = S_CODE ) AS INPUT_GUBUN ");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" ,C.CUST_NM ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='900' and A.TAX_CD = S_CODE) AS TAX_NM");
            sb.AppendLine(" ,A.TAX_CD");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='910' and Z.VAT_CD = S_CODE) AS VAT_NM");
            sb.AppendLine(" ,Z.VAT_CD");
            sb.AppendLine(" ,B.RAW_MAT_NM AS PRODUCT_NM");
            sb.AppendLine(" , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT ");
            sb.AppendLine(" , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE ");
            sb.AppendLine(" , ISNULL(case when Z.VAT_CD = '1' and A.TAX_CD = '1' ");
            sb.AppendLine("  then (ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) )");
            sb.AppendLine("  else (A.TOTAL_AMT * A.TOTAL_PRICE) end,0) as TOTAL_SUPPLY_MONEY ");
            sb.AppendLine("  ,ISNULL(case when A.TAX_CD = '2'");
            sb.AppendLine("  then 0");
            sb.AppendLine("  else case when Z.VAT_CD = '0' OR Z.VAT_CD = '2'");
            sb.AppendLine("  then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1");
            sb.AppendLine("  else (A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) end end,0) as TOTAL_TAX_MONEY ");
            sb.AppendLine("  ,ISNULL(case when A.TAX_CD = '1'");
            sb.AppendLine("  then");
            sb.AppendLine("  		case when Z.VAT_CD = '2'");
            sb.AppendLine("  			then");
            sb.AppendLine("  				(A.TOTAL_AMT*A.TOTAL_PRICE) ");
            sb.AppendLine("  			else");
            sb.AppendLine("  				case when Z.VAT_CD ='1' ");
            sb.AppendLine("  				then (A.TOTAL_AMT*A.TOTAL_PRICE)");
            sb.AppendLine("  				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end");
            sb.AppendLine("  				end ");
            sb.AppendLine("  else (A.TOTAL_AMT * A.TOTAL_PRICE) end,0) AS TOTAL_MONEY");
            sb.AppendLine(" ,0			 AS SOO_MONEY ");
            sb.AppendLine(" ,0			 AS DC_MONEY");
            sb.AppendLine(" ,0			 AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,0			 AS BALANCE ");
            sb.AppendLine(" , B.SPEC ");
            sb.AppendLine(" from F_BUY Z ");
            sb.AppendLine(" left outer join F_BUY_DETAIL A ");
            sb.AppendLine(" on Z.BUY_DATE = A.BUY_DATE ");
            sb.AppendLine(" and Z.BUY_CD = A.BUY_CD");
            sb.AppendLine(" left outer join N_CUST_CODE C");
            sb.AppendLine(" on Z.CUST_CD = C.CUST_CD ");
            sb.AppendLine(" left outer join F_RAW_DETAIL D ");
            sb.AppendLine(" on D.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and D.INPUT_CD = A.INPUT_CD");
            sb.AppendLine(" and D.SEQ = A.INPUT_SEQ");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on D.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" or A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(" and Z.BUY_DATE >= '" + s_date + "' and Z.BUY_DATE <= '" + e_date + "' ");
            sb.AppendLine("  and BUY_GUBUN != '3'");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  select");
            sb.AppendLine(" '지급' as bun");
            sb.AppendLine(" ,Z.GIVE_DATE AS SALES_DATE ");
            sb.AppendLine(" ,Z.GIVE_DATE AS 일자명칭 ");
            sb.AppendLine(" ,Z.GIVE_CD AS SALES_CD ");
            sb.AppendLine(" ,0 AS SEQ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and Z.GIVE_GUBUN = S_CODE ) AS INPUT_GUBUN");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE Z.CUST_CD = CUST_CD ) AS CUST_NM ");
            sb.AppendLine(" ,''");
            sb.AppendLine(" ,''");
            sb.AppendLine(" ,''");
            sb.AppendLine(" ,''");
            sb.AppendLine(" ,''");
            sb.AppendLine(" ,0 ");
            sb.AppendLine(" ,0 ");
            sb.AppendLine(" ,0 ");
            sb.AppendLine(" ,0 ");
            sb.AppendLine(" ,0 ");
            sb.AppendLine(" ,GIVE_MONEY");
            sb.AppendLine(" ,DC_MONEY");
            sb.AppendLine(" ,TOTAL_MONEY ");
            sb.AppendLine(" ,0 AS BALANCE");
            sb.AppendLine(" ,''");
            sb.AppendLine(" FROM F_GIVE Z");
            sb.AppendLine(" where Z.GIVE_DATE >= '" + s_date + "' and Z.GIVE_DATE <= '" + e_date + "' ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine("  union all ");
            sb.AppendLine("  ");
            sb.AppendLine("  select");
            sb.AppendLine("  'ㄱ' as bun ");
            sb.AppendLine(" ,A.BUY_DATE AS SALES_DATE");
            sb.AppendLine(" ,'-- 전잔고 --' AS 일자명칭");
            sb.AppendLine(" ,0 AS SALES_CD ");
            sb.AppendLine(" ,0 AS SEQ");
            sb.AppendLine(" ,'' AS INPUT_GUBUN");
            sb.AppendLine(" ,A.CUST_CD AS CUST_CD");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD ) + ' 전잔고' AS CUST_NM ");
            sb.AppendLine(" ,'' AS TAX_NM");
            sb.AppendLine(" ,'' AS TAX_CD");
            sb.AppendLine(" ,'' AS VAT_NM ");
            sb.AppendLine(" ,'' AS VAT_CD");
            sb.AppendLine(" ,'' AS PRODUCT_NM ");
            sb.AppendLine(" ,0 AS TOTAL_AMT");
            sb.AppendLine(" ,0 AS TOTAL_PRICE");
            sb.AppendLine(" ,0 AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,0 AS TOTAL_TAX_MONEY");
            sb.AppendLine(" ,0 AS TOTAL_MONEY");
            sb.AppendLine(" ,0			 AS SOO_MONEY ");
            sb.AppendLine(" ,0			 AS DC_MONEY");
            sb.AppendLine(" ,0			 AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,AVG(BALANCE) AS BALANCE ");
            sb.AppendLine(" , '' AS FROZEN_NM");
            sb.AppendLine("  FROM (");
            sb.AppendLine(" select ");
            sb.AppendLine(" ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE < Z.BUY_DATE order by INPUT_DATE DESC ),0) AS BALANCE");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" ,Z.BUY_DATE");
            sb.AppendLine(" from F_BUY Z ");
            sb.AppendLine(" left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine(" on Z.CUST_CD = T.CUST_CD ");
            sb.AppendLine(" where 1=1");
            sb.AppendLine(" and Z.BUY_DATE >= '" + s_date + "' and Z.BUY_DATE <= '" + e_date + "' ");
            sb.AppendLine(" group by Z.CUST_CD, Z.BUY_DATE ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE < Z.GIVE_DATE order by INPUT_DATE DESC ),0) AS BALANCE");
            sb.AppendLine(" 		,Z.CUST_CD");
            sb.AppendLine(" 		,Z.GIVE_DATE");
            sb.AppendLine(" from F_GIVE Z");
            sb.AppendLine(" left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine(" on Z.CUST_CD = T.CUST_CD ");
            sb.AppendLine(" where 1=1");
            sb.AppendLine(" and Z.GIVE_DATE >= '" + s_date + "' and Z.GIVE_DATE <= '" + e_date + "' ");
            sb.AppendLine(" group by Z.CUST_CD, Z.GIVE_DATE");
            sb.AppendLine(" ) A group by A.CUST_CD , A.BUY_DATE");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  ");
            sb.AppendLine(" select 'ㅎ' as bun ");
            sb.AppendLine(" ,A.BUY_DATE AS SALES_DATE");
            sb.AppendLine(" ,'=== 소계 ===' AS 일자명칭");
            sb.AppendLine(" ,0 AS SALES_CD ");
            sb.AppendLine(" ,0 AS SEQ");
            sb.AppendLine(" ,'' AS INPUT_GUBUN");
            sb.AppendLine(" ,A.CUST_CD AS CUST_CD");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD ) + ' 소계' AS CUST_NM ");
            sb.AppendLine(" ,'' AS TAX_NM");
            sb.AppendLine(" ,'' AS TAX_CD");
            sb.AppendLine(" ,'' AS VAT_NM ");
            sb.AppendLine(" ,'' AS VAT_CD");
            sb.AppendLine(" ,'' AS PRODUCT_NM ");
            sb.AppendLine(" ,0 AS TOTAL_AMT");
            sb.AppendLine(" ,0 AS TOTAL_PRICE");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_SUPPLY_MONEY),0) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_TAX_MONEY),0) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_MONEY),0) AS TOTAL_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(SOO_MONEY),0) AS SOO_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(DC_MONEY),0) AS DC_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(TOTAL_SOO_MONEY),0) AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,ISNULL(AVG(BALANCE),0) AS BALANCE ");
            sb.AppendLine(" , '' AS FROZEN_NM");
            sb.AppendLine(" from ( ");
            sb.AppendLine(" select ISNULL((SELECT top 1 P_RS_SUPPLY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 P_RS_TAX_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS TOTAL_TAX_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 P_RS_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS TOTAL_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS SOO_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_DC_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS DC_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.BUY_DATE order by INPUT_DATE),0) AS BALANCE ");
            sb.AppendLine(" ,Z.BUY_DATE");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" FROM F_BUY Z ");
            sb.AppendLine(" left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine(" on Z.CUST_CD = T.CUST_CD ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(" and Z.BUY_DATE >= '" + s_date + "' and Z.BUY_DATE <= '" + e_date + "' ");
            sb.AppendLine(" group by Z.CUST_CD, Z.BUY_DATE ");
            sb.AppendLine(" union all");
            sb.AppendLine(" select ISNULL((SELECT top 1 P_RS_SUPPLY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 P_RS_TAX_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 P_RS_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS TOTAL_MONEY ");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS SOO_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_DC_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS DC_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 PAY_TOTAL_MONEY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS TOTAL_SOO_MONEY");
            sb.AppendLine(" ,ISNULL((SELECT top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL where CUST_CD = Z.CUST_CD and INPUT_DATE = Z.GIVE_DATE order by INPUT_DATE),0) AS BALANCE");
            sb.AppendLine(" ,Z.GIVE_DATE ");
            sb.AppendLine(" ,Z.CUST_CD ");
            sb.AppendLine(" FROM F_GIVE Z");
            sb.AppendLine(" left outer join T_CUST_DAY_TOTAL T ");
            sb.AppendLine(" on Z.CUST_CD = T.CUST_CD ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(" and Z.GIVE_DATE >= '" + s_date + "' and Z.GIVE_DATE <= '" + e_date + "' ");
            sb.AppendLine(" group by Z.CUST_CD, Z.GIVE_DATE");
            sb.AppendLine("  ");
            sb.AppendLine(" ) A group by A.CUST_CD , A.BUY_DATE");
            sb.AppendLine("  ");
            sb.AppendLine(" union all");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine(" select ");
            sb.AppendLine(" 'ㅎ' as bun");
            sb.AppendLine(" ,BUY_DATE AS SALES_DATE");
            sb.AppendLine(" ,'=== 합계 ===' AS 일자명칭");
            sb.AppendLine(" ,0 AS BUY_CD ");
            sb.AppendLine(" ,0 AS SEQ");
            sb.AppendLine(" ,'' AS INPUT_GUBUN");
            sb.AppendLine(" ,'9999999' AS CUST_CD");
            sb.AppendLine(" ,BUY_DATE+' 구매합계' AS CUST_NM ");
            sb.AppendLine(" ,'' AS TAX_NM");
            sb.AppendLine(" ,'' AS TAX_CD");
            sb.AppendLine(" ,'' AS VAT_NM ");
            sb.AppendLine(" ,'' AS VAT_CD");
            sb.AppendLine(" ,'' AS PRODUCT_NM ");
            sb.AppendLine(" ,0 AS TOTAL_AMT");
            sb.AppendLine(" ,0 AS TOTAL_PRICE");
            sb.AppendLine(" ,SUM(A.TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,SUM(A.TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine(" ,SUM(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine(" ,SUM(SOO_MONEY) AS SOO_MONEY ");
            sb.AppendLine(" ,SUM(DC_MONEY) AS DC_MONEY ");
            sb.AppendLine(" ,SUM(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY ");
            sb.AppendLine(" ,0 AS BALANCE");
            sb.AppendLine(" , '' AS FROZEN_NM");
            sb.AppendLine("  FROM (");
            sb.AppendLine(" select ");
            sb.AppendLine(" 					Z.BUY_DATE");
            sb.AppendLine(" 					,Z.CUST_CD");
            sb.AppendLine(" ,Z.ALL_SUPPLY_MONEY AS TOTAL_SUPPLY_MONEY");
            sb.AppendLine(" ,Z.ALL_TAX_MONEY AS TOTAL_TAX_MONEY");
            sb.AppendLine(" ,Z.ALL_TOTAL_MONEY AS TOTAL_MONEY");
            sb.AppendLine(" ,0 AS SOO_MONEY");
            sb.AppendLine(" ,0 AS DC_MONEY ");
            sb.AppendLine(" ,0 AS TOTAL_SOO_MONEY");
            sb.AppendLine(" FROM F_BUY Z ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(" 			and Z.BUY_DATE >= '" + s_date + "' and Z.BUY_DATE <= '" + e_date + "'");
            sb.AppendLine("  ");
            sb.AppendLine(" 			union all ");
            sb.AppendLine(" 			");
            sb.AppendLine(" 			select");
            sb.AppendLine(" 					Z.GIVE_DATE ");
            sb.AppendLine(" 					,Z.CUST_CD");
            sb.AppendLine(" ,0 AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine(" ,0 AS TOTAL_TAX_MONEY");
            sb.AppendLine(" ,0 AS TOTAL_MONEY");
            sb.AppendLine(" ,GIVE_MONEY AS SOO_MONEY ");
            sb.AppendLine(" ,DC_MONEY AS DC_MONEY");
            sb.AppendLine(" ,TOTAL_MONEY AS TOTAL_SOO_MONEY");
            sb.AppendLine(" FROM F_GIVE Z");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(" 			and Z.GIVE_DATE >= '" + s_date + "' and Z.GIVE_DATE <= '" + e_date + "'");
            sb.AppendLine(" ) A group by BUY_DATE ");
            sb.AppendLine(" order by SALES_DATE, CUST_CD, bun");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public int Insert_Escalation_Card_Soo(string escalation_date, string s_date, string e_date, DataGridView grd, string flagship)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                bool isChecked = false;
                for (int i = 0; i < grd.Rows.Count; i++)
                {
                    if ((bool)grd.Rows[i].Cells["선택"].Value == true && (grd.Rows[i].Cells["거래처명"].Value != null && !grd.Rows[i].Cells["거래처명"].Value.ToString().Equals("=== 합계 ===")))
                    {
                        isChecked = true;
                        break;
                    }
                }
                if (isChecked)
                {
                    for (int i = 0; i < grd.Rows.Count; i++)
                    {
                        if ((bool)grd.Rows[i].Cells["선택"].Value == true && (grd.Rows[i].Cells["거래처명"].Value != null && !grd.Rows[i].Cells["거래처명"].Value.ToString().Equals("=== 합계 ===")))
                        {
                            string cust_cd = grd.Rows[i].Cells["코드"].Value.ToString();
                            string vat_cd = "";
                            string tax_cd = grd.Rows[i].Cells["부가세코드"].Value.ToString();
                            string all_supply_money = "";
                            string all_tax_money = "";
                            string all_total_money = "";
                            string card_Accept = "";
                            if (grd.Rows[i].Cells["카드적용액"].Value == null || grd.Rows[i].Cells["카드적용액"].Value.ToString().Equals(""))
                            {
                                card_Accept = "0";
                            }
                            else
                            {
                                card_Accept = grd.Rows[i].Cells["카드적용액"].Value.ToString().Replace(",", "");
                            }

                            all_supply_money = grd.Rows[i].Cells["공급가액2"].Value.ToString().Replace(",", "");
                            all_tax_money = grd.Rows[i].Cells["부가세2"].Value.ToString().Replace(",", "");
                            all_total_money = grd.Rows[i].Cells["합계금액2"].Value.ToString().Replace(",", "");

                            if (grd.Rows[i].Cells["구분"].Value.ToString().Equals("면세"))
                            {
                                vat_cd = "2";
                            }
                            else
                            {
                                vat_cd = "1";
                            }
                            string condition = "WHERE SALES_DATE >= '" + s_date + "' AND SALES_DATE <= '" + e_date + "' AND A.CUST_CD = '" + cust_cd + "' AND A.VAT_CD = '" + vat_cd + "' ";
                            DataTable dt = fn_Select_Bill_Escalation_Detail(condition);


                            sb.AppendLine("declare @BILL_CD" + i + " int ");
                            sb.AppendLine("select @BILL_CD" + i + " =ISNULL(MAX(BILL_CD),0)+1 from F_BILL_INPUT ");
                            sb.AppendLine("where BILL_DATE = '" + escalation_date + "' ");

                            sb.AppendLine("INSERT INTO F_BILL_INPUT ( ");
                            sb.AppendLine(" BILL_DATE ");
                            sb.AppendLine(" ,BILL_CD ");
                            sb.AppendLine(" ,CUST_CD ");
                            sb.AppendLine(" ,TAX_CD ");
                            sb.AppendLine(" ,VAT_CD ");
                            sb.AppendLine(" ,PUBLISH_YN ");
                            sb.AppendLine(" ,COMMENT ");
                            sb.AppendLine(" ,ALL_SUPPLY_MONEY ");
                            sb.AppendLine(" ,ALL_TAX_MONEY ");
                            sb.AppendLine(" ,ALL_TOTAL_MONEY ");
                            sb.AppendLine(" ,CARD_SOO ");
                            sb.AppendLine(" ,INPUT_GUBUN ");
                            sb.AppendLine(" ,CAL_AUTO ");
                            sb.AppendLine(" ,ESCALATION_YN ");
                            sb.AppendLine(" ,PRINT_PRODUCT ");
                            sb.AppendLine(" ,INSTAFF ");
                            sb.AppendLine(" ,INTIME ");
                            sb.AppendLine(" ) VALUES ( ");
                            sb.AppendLine(" '" + escalation_date + "' ");
                            sb.AppendLine(" ,@BILL_CD" + i + " ");
                            sb.AppendLine(" ,'" + cust_cd + "' ");
                            sb.AppendLine(" ,'" + tax_cd + "' ");
                            sb.AppendLine(" ,'" + vat_cd + "' ");
                            sb.AppendLine(" ,'N' ");
                            sb.AppendLine(" ,'' ");
                            sb.AppendLine(" ,'" + all_supply_money + "' ");
                            sb.AppendLine(" ,'" + all_tax_money + "' ");
                            sb.AppendLine(" ,'" + all_total_money + "' ");
                            sb.AppendLine(" ,'" + card_Accept + "' ");
                            sb.AppendLine(" ,'1' ");
                            sb.AppendLine(" ,'N' ");
                            sb.AppendLine(" ,'Y' ");
                            sb.AppendLine(" ,'" + flagship + "' ");
                            sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(") ");

                            for (int j = 0; j < dt.Rows.Count; j++)
                            {
                                sb.AppendLine("declare @BILL_SEQ" + i + "AND" + j + " int ");
                                sb.AppendLine("select @BILL_SEQ" + i + "AND" + j + " =ISNULL(MAX(BILL_SEQ),0)+1 from F_BILL_DETAIL ");
                                sb.AppendLine("where BILL_DATE = '" + escalation_date + "' and BILL_CD = @BILL_CD" + i + " ");

                                sb.AppendLine("INSERT INTO F_BILL_DETAIL ( ");
                                sb.AppendLine(" BILL_DATE ");
                                sb.AppendLine(" ,BILL_CD ");
                                sb.AppendLine(" ,BILL_SEQ ");
                                sb.AppendLine(" ,PRODUCT_GUBUN ");
                                sb.AppendLine(" ,PRODUCT_CD ");
                                sb.AppendLine(" ,TOTAL_AMT ");
                                sb.AppendLine(" ,TOTAL_PRICE ");
                                sb.AppendLine(" ,SUPPLY_MONEY ");
                                sb.AppendLine(" ,TAX_MONEY ");
                                sb.AppendLine(" ,TOTAL_MONEY ");
                                sb.AppendLine(" ,VAT_CD ");
                                sb.AppendLine(" ,SALES_DATE ");
                                sb.AppendLine(" ,SALES_CD ");
                                sb.AppendLine(" ,SALES_SEQ ");
                                sb.AppendLine(" ) VALUES ( ");
                                sb.AppendLine(" '" + escalation_date + "' ");
                                sb.AppendLine(" ,@BILL_CD" + i + " ");
                                sb.AppendLine(" ,@BILL_SEQ" + i + "AND" + j + " ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["PRODUCT_GUBUN"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["PRODUCT_CD"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_AMT"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_PRICE"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_SUPPLY_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_TAX_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + vat_cd + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_DATE"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_CD"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_SEQ"].ToString() + "' ");
                                sb.AppendLine(") ");

                                sb.AppendLine("UPDATE F_SALES_DETAIL SET ESCALATION_YN = 'Y'  ");
                                sb.AppendLine(" WHERE SALES_DATE = '" + dt.Rows[j]["SALES_DATE"].ToString() + "'  ");
                                sb.AppendLine(" AND SALES_CD = '" + dt.Rows[j]["SALES_CD"].ToString() + "'  ");
                                sb.AppendLine(" AND SEQ = '" + dt.Rows[j]["SALES_SEQ"].ToString() + "'  ");
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("최소 하나 이상의 이관 대상을 선택해주십시오");
                    return 1;
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());



                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_ESCALATION");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Insert_Escalation_Not_Card_Soo(string escalation_date, string s_date, string e_date, DataGridView grd, string flagship)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                bool isChecked = false;
                for (int i = 0; i < grd.Rows.Count; i++)
                {
                    if ((bool)grd.Rows[i].Cells["선택"].Value == true && (grd.Rows[i].Cells["거래처명"].Value != null && !grd.Rows[i].Cells["거래처명"].Value.ToString().Equals("=== 합계 ===")))
                    {
                        isChecked = true;
                        break;
                    }
                }
                if (isChecked)
                {
                    for (int i = 0; i < grd.Rows.Count; i++)
                    {
                        if ((bool)grd.Rows[i].Cells["선택"].Value == true && (grd.Rows[i].Cells["거래처명"].Value != null && !grd.Rows[i].Cells["거래처명"].Value.ToString().Equals("=== 합계 ===")))
                        {
                            string cust_cd = grd.Rows[i].Cells["코드"].Value.ToString();
                            string vat_cd = "";
                            string tax_cd = grd.Rows[i].Cells["부가세코드"].Value.ToString();
                            string all_supply_money = "";
                            string all_tax_money = "";
                            string all_total_money = "";
                            string card_Accept = "";
                            if (grd.Rows[i].Cells["카드적용액"].Value == null || grd.Rows[i].Cells["카드적용액"].Value.ToString().Equals(""))
                            {
                                card_Accept = "0";
                            }
                            else
                            {
                                card_Accept = grd.Rows[i].Cells["카드적용액"].Value.ToString().Replace(",", "");
                            }

                            all_supply_money = grd.Rows[i].Cells["공급가액"].Value.ToString().Replace(",", "");
                            all_tax_money = grd.Rows[i].Cells["부가세"].Value.ToString().Replace(",", "");
                            all_total_money = grd.Rows[i].Cells["합계금액"].Value.ToString().Replace(",", "");

                            if (grd.Rows[i].Cells["구분"].Value.ToString().Equals("면세"))
                            {
                                vat_cd = "2";
                            }
                            else
                            {
                                vat_cd = "1";
                            }
                            string condition = "WHERE SALES_DATE >= '" + s_date + "' AND SALES_DATE <= '" + e_date + "' AND A.CUST_CD = '" + cust_cd + "' AND A.VAT_CD = '" + vat_cd + "' ";
                            DataTable dt = fn_Select_Bill_Escalation_Detail(condition);

                            sb.AppendLine("declare @BILL_CD" + i + " int ");
                            sb.AppendLine("select @BILL_CD" + i + " =ISNULL(MAX(BILL_CD),0)+1 from F_BILL_INPUT ");
                            sb.AppendLine("where BILL_DATE = '" + escalation_date + "' ");

                            sb.AppendLine("INSERT INTO F_BILL_INPUT ( ");
                            sb.AppendLine(" BILL_DATE ");
                            sb.AppendLine(" ,BILL_CD ");
                            sb.AppendLine(" ,CUST_CD ");
                            sb.AppendLine(" ,TAX_CD ");
                            sb.AppendLine(" ,VAT_CD ");
                            sb.AppendLine(" ,PUBLISH_YN ");
                            sb.AppendLine(" ,COMMENT ");
                            sb.AppendLine(" ,ALL_SUPPLY_MONEY ");
                            sb.AppendLine(" ,ALL_TAX_MONEY ");
                            sb.AppendLine(" ,ALL_TOTAL_MONEY ");
                            sb.AppendLine(" ,CARD_SOO ");
                            sb.AppendLine(" ,INPUT_GUBUN ");
                            sb.AppendLine(" ,CAL_AUTO ");
                            sb.AppendLine(" ,ESCALATION_YN ");
                            sb.AppendLine(" ,PRINT_PRODUCT ");
                            sb.AppendLine(" ,INSTAFF ");
                            sb.AppendLine(" ,INTIME ");
                            sb.AppendLine(" ) VALUES ( ");
                            sb.AppendLine(" '" + escalation_date + "' ");
                            sb.AppendLine(" ,@BILL_CD" + i + " ");
                            sb.AppendLine(" ,'" + cust_cd + "' ");
                            sb.AppendLine(" ,'" + tax_cd + "' ");
                            sb.AppendLine(" ,'" + vat_cd + "' ");
                            sb.AppendLine(" ,'N' ");
                            sb.AppendLine(" ,'' ");
                            sb.AppendLine(" ,'" + all_supply_money + "' ");
                            sb.AppendLine(" ,'" + all_tax_money + "' ");
                            sb.AppendLine(" ,'" + all_total_money + "' ");
                            sb.AppendLine(" ,'" + card_Accept + "' ");
                            sb.AppendLine(" ,'1' ");
                            sb.AppendLine(" ,'N' ");
                            sb.AppendLine(" ,'Y' ");
                            sb.AppendLine(" ,'" + flagship + "' ");
                            sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(") ");

                            for (int j = 0; j < dt.Rows.Count; j++)
                            {
                                sb.AppendLine("declare @BILL_SEQ" + i + "AND" + j + " int ");
                                sb.AppendLine("select @BILL_SEQ" + i + "AND" + j + " =ISNULL(MAX(BILL_SEQ),0)+1 from F_BILL_DETAIL ");
                                sb.AppendLine("where BILL_DATE = '" + escalation_date + "' and BILL_CD = @BILL_CD" + i + " ");

                                sb.AppendLine("INSERT INTO F_BILL_DETAIL ( ");
                                sb.AppendLine(" BILL_DATE ");
                                sb.AppendLine(" ,BILL_CD ");
                                sb.AppendLine(" ,BILL_SEQ ");
                                sb.AppendLine(" ,PRODUCT_CD ");
                                sb.AppendLine(" ,TOTAL_AMT ");
                                sb.AppendLine(" ,TOTAL_PRICE ");
                                sb.AppendLine(" ,SUPPLY_MONEY ");
                                sb.AppendLine(" ,TAX_MONEY ");
                                sb.AppendLine(" ,TOTAL_MONEY ");
                                sb.AppendLine(" ,VAT_CD ");
                                sb.AppendLine(" ,SALES_DATE ");
                                sb.AppendLine(" ,SALES_CD ");
                                sb.AppendLine(" ,SALES_SEQ ");
                                sb.AppendLine(" ) VALUES ( ");
                                sb.AppendLine(" '" + escalation_date + "' ");
                                sb.AppendLine(" ,@BILL_CD" + i + " ");
                                sb.AppendLine(" ,@BILL_SEQ" + i + "AND" + j + " ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["ITEM_CD"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_AMT"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_PRICE"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_SUPPLY_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_TAX_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["TOTAL_MONEY"].ToString() + "' ");
                                sb.AppendLine(" ,'" + vat_cd + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_DATE"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_CD"].ToString() + "' ");
                                sb.AppendLine(" ,'" + dt.Rows[j]["SALES_SEQ"].ToString() + "' ");
                                sb.AppendLine(") ");

                                sb.AppendLine("UPDATE F_SALES_DETAIL SET ESCALATION_YN = 'Y'  ");
                                sb.AppendLine(" WHERE SALES_DATE = '" + dt.Rows[j]["SALES_DATE"].ToString() + "'  ");
                                sb.AppendLine(" AND SALES_CD = '" + dt.Rows[j]["SALES_CD"].ToString() + "'  ");
                                sb.AppendLine(" AND SEQ = '" + dt.Rows[j]["SALES_SEQ"].ToString() + "'  ");
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("최소 하나 이상의 이관 대상을 선택해주십시오");
                    return 1;
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "INSERT_ESCALATION");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Select_Bill_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  SELECT   ");
            sb.AppendLine("  A.BILL_DATE   ");
            sb.AppendLine("  ,A.BILL_CD   ");
            sb.AppendLine("  ,A.CUST_CD   ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD ) AS CUST_NM   ");
            sb.AppendLine("  ,(SELECT STAFF_CD FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD ) AS STAFF_CD   ");
            sb.AppendLine("  ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = (SELECT STAFF_CD FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD )) AS STAFF_NM   ");
            sb.AppendLine("  ,A.TAX_CD   ");
            sb.AppendLine("  ,A.VAT_CD   ");
            sb.AppendLine("  ,A.PRINT_PRODUCT   ");
            sb.AppendLine("  ,D.CNT   ");
            sb.AppendLine("  ,A.PUBLISH_YN   ");
            sb.AppendLine("  ,A.INPUT_GUBUN   ");
            sb.AppendLine("  ,A.ESCALATION_YN   ");
            sb.AppendLine("  ,A.CAL_AUTO   ");
            sb.AppendLine("  ,A.ALL_SUPPLY_MONEY   ");
            sb.AppendLine("  ,A.ALL_TAX_MONEY   ");
            sb.AppendLine("  ,A.ALL_TOTAL_MONEY   ");
            sb.AppendLine("  ,A.CARD_SOO   ");
            sb.AppendLine("  ,A.INSTAFF   ");
            sb.AppendLine("  ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE A.INSTAFF = STAFF_CD ) AS INSTAFF_NM   ");
            sb.AppendLine("  ,A.INTIME   ");
            sb.AppendLine("  FROM F_BILL_INPUT A   ");
            sb.AppendLine("  LEFT OUTER JOIN (SELECT COUNT(*) AS CNT, BILL_DATE, BILL_CD FROM F_BILL_DETAIL GROUP BY BILL_DATE, BILL_CD ) D ");
            sb.AppendLine("  ON D.BILL_DATE = A.BILL_DATE ");
            sb.AppendLine("  AND D.BILL_CD = A.BILL_CD ");

            sb.AppendLine("  LEFT OUTER JOIN N_CUST_CODE C ");
            sb.AppendLine("  ON A.CUST_CD = C.CUST_CD ");

            sb.AppendLine("  WHERE 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine("  ORDER BY A.BILL_DATE desc, A.BILL_CD desc  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Bill_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("      SELECT                                           ");
            sb.AppendLine("       BILL_DATE                                       ");
            sb.AppendLine("       ,BILL_CD                                        ");
            sb.AppendLine("       ,BILL_SEQ                                       ");
            sb.AppendLine("       ,'2' AS PRODUCT_GUBUN                                     ");
            sb.AppendLine("       ,PRODUCT_CD                                     ");
            sb.AppendLine("       ,N.ITEM_NM AS PRODUCT_NM                        ");
            sb.AppendLine("       ,N.SPEC AS SPEC                                 ");
            sb.AppendLine("       ,TOTAL_AMT                                      ");
            sb.AppendLine("       ,TOTAL_PRICE                                    ");
            sb.AppendLine("       ,TOTAL_MONEY                                    ");
            sb.AppendLine("       ,A.VAT_CD                                       ");
            sb.AppendLine("       ,SALES_DATE                                     ");
            sb.AppendLine("       ,SALES_CD                                       ");
            sb.AppendLine("       ,SALES_SEQ                                      ");
            sb.AppendLine("       ,SOO_DATE                                       ");
            sb.AppendLine("       ,SOO_CD                                         ");
            sb.AppendLine("      FROM F_BILL_DETAIL A                             ");
            sb.AppendLine("      left outer join N_ITEM_CODE N                    ");
            sb.AppendLine("      on A.PRODUCT_CD = N.ITEM_CD                      ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_Bill_Input(
            string bill_date
            , string cust_cd
            , string input_gubun
            , string tax_gubun
            , string flagship
            , string auto_cal
            , string supply_money
            , string tax_money
            , string total_money
            , string vat_cd
            , conDataGridView BillGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("declare @BILL_CD int ");
                sb.AppendLine("select @BILL_CD = ISNULL(MAX(BILL_CD),0)+1 FROM F_BILL_INPUT ");
                sb.AppendLine(" WHERE BILL_DATE = '" + bill_date + "' ");

                sb.AppendLine("insert into F_BILL_INPUT (");
                sb.AppendLine("     BILL_DATE ");
                sb.AppendLine("     ,BILL_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,PUBLISH_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,CARD_SOO ");
                sb.AppendLine("     ,INPUT_GUBUN ");
                sb.AppendLine("     ,ESCALATION_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,CAL_AUTO ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine("     ,PRINT_PRODUCT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + bill_date + "' ");
                sb.AppendLine("  ,@BILL_CD ");
                sb.AppendLine("  ,'" + cust_cd + "' ");
                sb.AppendLine("  ,'" + tax_gubun + "' ");
                sb.AppendLine("  ,'N' ");
                sb.AppendLine("  ,'' ");
                sb.AppendLine("  ,'" + supply_money.Replace(",", "") + "' ");
                sb.AppendLine("  ,'" + tax_money.Replace(",", "") + "' ");
                sb.AppendLine("  ,'" + total_money.Replace(",", "") + "' ");
                sb.AppendLine("  ,'0' ");
                sb.AppendLine("  ,'" + input_gubun + "' ");
                sb.AppendLine("  ,'N' ");
                sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("  ,'" + auto_cal + "' ");
                sb.AppendLine("  ,'" + vat_cd + "' ");
                sb.AppendLine("  ,'" + flagship + "' ");
                sb.AppendLine(" ) ");


                for (int i = 0; i < BillGrid.Rows.Count; i++)
                {
                    sb.AppendLine("declare @SEQ" + i + " int ");
                    sb.AppendLine("select @SEQ" + i + " = ISNULL(MAX(BILL_SEQ),0)+1 FROM F_BILL_DETAIL ");
                    sb.AppendLine(" WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = @BILL_CD ");

                    string proGubun = "";
                    if (BillGrid.Rows[i].Cells["품목구분"].Value.ToString().Equals("상품"))
                    {
                        proGubun = "1";
                    }
                    else if (BillGrid.Rows[i].Cells["품목구분"].Value.ToString().Equals("제품"))
                    {
                        proGubun = "2";
                    }
                    else
                    {
                        proGubun = "3";
                    }

                    if (BillGrid.Rows[i].Cells["SALES_DATE"].Value == null)
                    {
                    }
                    if (BillGrid.Rows[i].Cells["SOO_DATE"].Value == null)
                    {
                    }

                    sb.AppendLine("insert into F_BILL_DETAIL (");
                    sb.AppendLine("     BILL_DATE ");
                    sb.AppendLine("     ,BILL_CD ");
                    sb.AppendLine("     ,BILL_SEQ ");
                    sb.AppendLine("     ,PRODUCT_CD ");
                    sb.AppendLine("     ,TOTAL_AMT ");
                    sb.AppendLine("     ,TOTAL_PRICE ");
                    sb.AppendLine("     ,SUPPLY_MONEY ");
                    sb.AppendLine("     ,TAX_MONEY ");
                    sb.AppendLine("     ,TOTAL_MONEY ");
                    sb.AppendLine("     ,VAT_CD ");

                    if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("     ,SALES_DATE ");
                        sb.AppendLine("     ,SALES_CD ");
                        sb.AppendLine("     ,SALES_SEQ ");
                    }

                    if (BillGrid.Rows[i].Cells["SOO_DATE"].Value != null && !BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("     ,SOO_DATE ");
                        sb.AppendLine("     ,SOO_CD ");
                    }

                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + bill_date + "' ");
                    sb.AppendLine("  ,@BILL_CD ");
                    sb.AppendLine("  ,@SEQ" + i + " ");
                    sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["상품코드"].Value.ToString() + "' ");
                    sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["총수량"].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["단가"].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine("  ,'0' ");
                    sb.AppendLine("  ,'0' ");
                    sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["금액"].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["과세구분"].Value.ToString() + "' ");

                    if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_CD"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_SEQ"].Value.ToString() + "' ");
                    }

                    if (BillGrid.Rows[i].Cells["SOO_DATE"].Value != null && !BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SOO_CD"].Value.ToString() + "' ");
                    }

                    sb.AppendLine(" ) ");

                    if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine(" UPDATE F_SALES_DETAIL SET ESCALATION_YN = 'Y' ");
                        sb.AppendLine(" WHERE SALES_DATE = '" + BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString() + "' and SALES_CD = '" + BillGrid.Rows[i].Cells["SALES_CD"].Value.ToString() + "' AND SEQ = '" + BillGrid.Rows[i].Cells["SALES_SEQ"].Value.ToString() + "' ");
                    }


                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_BILL_INPUT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int update_Bill_Input(
            string bill_date
            , string bill_cd
            , string cust_cd
            , string input_gubun
            , string tax_gubun
            , string flagship
            , string auto_cal
            , string supply_money
            , string tax_money
            , string total_money
            , string vat_cd
            , conDataGridView BillGrid
            , DataTable del_dt
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("UPDATE F_BILL_INPUT SET   ");
                sb.AppendLine("     TAX_CD           =   '" + tax_gubun + "'    ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY = '" + supply_money.Replace(",", "") + "'          ");
                sb.AppendLine("     ,ALL_TAX_MONEY    = '" + tax_money.Replace(",", "") + "'         ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY  = '" + total_money.Replace(",", "") + "'          ");
                sb.AppendLine("     ,INPUT_GUBUN      =  '" + input_gubun + "'     ");
                sb.AppendLine("     ,UPSTAFF          =  '" + Common.p_strStaffNo + "'           ");
                sb.AppendLine("     ,UPTIME           =  convert(varchar, getdate(), 120)       ");
                sb.AppendLine("     ,CAL_AUTO         =  '" + auto_cal + "'     ");
                sb.AppendLine("     ,VAT_CD           =  '" + vat_cd + "'         ");
                sb.AppendLine("     ,PRINT_PRODUCT    =  '" + flagship + "'     ");
                sb.AppendLine(" WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "' ");


                for (int i = 0; i < BillGrid.Rows.Count; i++)
                {
                    if (BillGrid.Rows[i].Cells["SEQ"].Value == null || BillGrid.Rows[i].Cells["SEQ"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("declare @SEQ" + i + " int ");
                        sb.AppendLine("select @SEQ" + i + " = ISNULL(MAX(BILL_SEQ),0)+1 FROM F_BILL_DETAIL ");
                        sb.AppendLine(" WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "' ");

                        sb.AppendLine("insert into F_BILL_DETAIL (");
                        sb.AppendLine("     BILL_DATE ");
                        sb.AppendLine("     ,BILL_CD ");
                        sb.AppendLine("     ,BILL_SEQ ");
                        sb.AppendLine("     ,PRODUCT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,TOTAL_PRICE ");
                        sb.AppendLine("     ,SUPPLY_MONEY ");
                        sb.AppendLine("     ,TAX_MONEY ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,VAT_CD ");

                        if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                        {
                            sb.AppendLine("     ,SALES_DATE ");
                            sb.AppendLine("     ,SALES_CD ");
                            sb.AppendLine("     ,SALES_SEQ ");
                        }

                        if (BillGrid.Rows[i].Cells["SOO_DATE"].Value != null && !BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString().Equals(""))
                        {
                            sb.AppendLine("     ,SOO_DATE ");
                            sb.AppendLine("     ,SOO_CD ");
                        }

                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("  '" + bill_date + "' ");
                        sb.AppendLine("  ,'" + bill_cd + "' ");
                        sb.AppendLine("  ,@SEQ" + i + " ");
                        sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["상품코드"].Value.ToString() + "' ");
                        sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["총수량"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["단가"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("  ,'0' ");
                        sb.AppendLine("  ,'0' ");
                        sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["금액"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("  ,'" + BillGrid.Rows[i].Cells["과세구분"].Value.ToString() + "' ");

                        if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                        {
                            sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString() + "' ");
                            sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_CD"].Value.ToString() + "' ");
                            sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SALES_SEQ"].Value.ToString() + "' ");
                        }

                        if (BillGrid.Rows[i].Cells["SOO_DATE"].Value != null && !BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString().Equals(""))
                        {
                            sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SOO_DATE"].Value.ToString() + "' ");
                            sb.AppendLine("     ,'" + BillGrid.Rows[i].Cells["SOO_CD"].Value.ToString() + "' ");
                        }

                        sb.AppendLine(" ) ");

                        if (BillGrid.Rows[i].Cells["SALES_DATE"].Value != null && !BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString().Equals(""))
                        {
                            sb.AppendLine(" UPDATE F_SALES_DETAIL SET ESCALATION_YN = 'Y' ");
                            sb.AppendLine(" WHERE SALES_DATE = '" + BillGrid.Rows[i].Cells["SALES_DATE"].Value.ToString() + "' and SALES_CD = '" + BillGrid.Rows[i].Cells["SALES_CD"].Value.ToString() + "' AND SEQ = '" + BillGrid.Rows[i].Cells["SALES_SEQ"].Value.ToString() + "' ");
                        }




                    }
                    else
                    {

                        sb.AppendLine("UPDATE F_BILL_DETAIL SET ");
                        sb.AppendLine("     PRODUCT_CD     =      '" + BillGrid.Rows[i].Cells["상품코드"].Value.ToString() + "' ");
                        sb.AppendLine("     ,TOTAL_AMT      =      '" + BillGrid.Rows[i].Cells["총수량"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,TOTAL_PRICE    =      '" + BillGrid.Rows[i].Cells["단가"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,SUPPLY_MONEY   =      '0' ");
                        sb.AppendLine("     ,TAX_MONEY      =      '0' ");
                        sb.AppendLine("     ,TOTAL_MONEY    =      '" + BillGrid.Rows[i].Cells["금액"].Value.ToString().Replace(",", "") + "' ");
                        sb.AppendLine("     ,VAT_CD         =      '" + BillGrid.Rows[i].Cells["과세구분"].Value.ToString() + "' ");


                        sb.AppendLine(" WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "' AND BILL_SEQ = '" + BillGrid.Rows[i].Cells["SEQ"].Value.ToString() + "' ");
                    }
                }


                for (int i = 0; i < del_dt.Rows.Count; i++)
                {
                    sb.AppendLine(" UPDATE F_SALES_DETAIL SET ESCALATION_YN = 'N'   ");
                    sb.AppendLine(" WHERE SALES_DATE = (SELECT ISNULL(SALES_DATE,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + del_dt.Rows[i]["BILL_DATE"].ToString() + "' AND BILL_CD = '" + del_dt.Rows[i]["BILL_CD"].ToString() + "' AND BILL_SEQ = '" + del_dt.Rows[i]["BILL_SEQ"].ToString() + "' )  ");
                    sb.AppendLine(" AND SALES_CD = (SELECT ISNULL(SALES_CD,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + del_dt.Rows[i]["BILL_DATE"].ToString() + "' AND BILL_CD = '" + del_dt.Rows[i]["BILL_CD"].ToString() + "' AND BILL_SEQ = '" + del_dt.Rows[i]["BILL_SEQ"].ToString() + "' )  ");
                    sb.AppendLine(" AND SEQ = (SELECT ISNULL(SALES_SEQ,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + del_dt.Rows[i]["BILL_DATE"].ToString() + "' AND BILL_CD = '" + del_dt.Rows[i]["BILL_CD"].ToString() + "' AND BILL_SEQ = '" + del_dt.Rows[i]["BILL_SEQ"].ToString() + "' )  ");

                    sb.AppendLine(" DELETE FROM F_BILL_DETAIL  ");
                    sb.AppendLine(" WHERE BILL_DATE = '" + del_dt.Rows[i]["BILL_DATE"].ToString() + "' AND BILL_CD = '" + del_dt.Rows[i]["BILL_CD"].ToString() + "' AND BILL_SEQ = '" + del_dt.Rows[i]["BILL_SEQ"].ToString() + "'   ");
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_BILL_INPUT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Delete_Bill_Input(string bill_date, string bill_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                DataTable dt = fn_Select_Bill_Detail_List(" WHERE A.BILL_DATE = '" + bill_date + "' and A.BILL_CD = '" + bill_cd + "' ");

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sb.AppendLine(" UPDATE F_SALES_DETAIL SET ");
                        sb.AppendLine(" ESCALATION_YN = 'N' ");
                        sb.AppendLine(" WHERE SALES_DATE = (SELECT ISNULL(SALES_DATE,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "'  AND BILL_SEQ = '" + dt.Rows[i]["BILL_SEQ"].ToString() + "'  ) ");
                        sb.AppendLine(" AND SALES_CD = (SELECT ISNULL(SALES_CD,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "'  AND BILL_SEQ = '" + dt.Rows[i]["BILL_SEQ"].ToString() + "'  ) ");
                        sb.AppendLine(" AND SEQ = (SELECT ISNULL(SALES_SEQ,0) FROM F_BILL_DETAIL WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "'  AND BILL_SEQ = '" + dt.Rows[i]["BILL_SEQ"].ToString() + "'  ) ");
                    }
                    sb.AppendLine(" DELETE FROM F_BILL_INPUT WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "' ");
                    sb.AppendLine(" DELETE FROM F_BILL_DETAIL WHERE BILL_DATE = '" + bill_date + "' AND BILL_CD = '" + bill_cd + "' ");
                }
                else
                {
                    return 9;
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "Delete_BILL_INPUT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Select_Bill_Escalation_Detail(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");

            sb.AppendLine("    select * from ( ");
            sb.AppendLine("   SELECT    ");
            sb.AppendLine("   A.SALES_DATE   ");
            sb.AppendLine("   ,A.SALES_CD   ");
            sb.AppendLine("   ,A.SEQ AS SALES_SEQ   ");
            sb.AppendLine("   ,A.ESCALATION_YN   ");
            sb.AppendLine("   ,B.CUST_CD   ");
            sb.AppendLine("   ,(SELECT CUST_NM FROM N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS CUST_NM   ");
            sb.AppendLine("   ,A.ITEM_CD   ");
            sb.AppendLine("   ,N.ITEM_NM AS PRODUCT_NM   ");
            sb.AppendLine("   ,'1' AS RAW_MAT_GUBUN   ");
            sb.AppendLine("   ,N.SPEC AS SPEC   ");
            sb.AppendLine("   ,N.UNIT_CD AS UNIT_CD   ");
            sb.AppendLine("   ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD) AS UNIT_NM   ");
            sb.AppendLine("   ,A.TOTAL_AMT   ");
            sb.AppendLine("   ,A.TOTAL_PRICE   ");
            sb.AppendLine("   ,B.TAX_CD  ");
            sb.AppendLine("   ,A.TAX_CD AS VAT_CD ");
            sb.AppendLine("   ,(SELECT S_CODE_NM FROM T_S_CODE WHERE B.TAX_CD = S_CODE AND L_CODE = '910') AS VAT_NM     ");
            sb.AppendLine("   ,(SELECT S_CODE_NM FROM T_S_CODE WHERE A.TAX_CD = S_CODE AND L_CODE = '900') AS TAX_NM     ");
            sb.AppendLine("   ,case when B.TAX_CD = '1' and A.TAX_CD = '1'           ");
            sb.AppendLine("    then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )         ");
            sb.AppendLine("    else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY    ");
            sb.AppendLine("   ,case when A.TAX_CD = '2' OR B.TAX_CD = '2'       ");
            sb.AppendLine("       					then 0         ");
            sb.AppendLine("       					else case when B.TAX_CD = '0'          ");
            sb.AppendLine("       					then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1           ");
            sb.AppendLine("       					else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY         ");
            sb.AppendLine("       				   ,case when A.TAX_CD = '1'        ");
            sb.AppendLine("       					then        ");
            sb.AppendLine("         					case when B.TAX_CD = '2'            ");
            sb.AppendLine("         						then         ");
            sb.AppendLine("         							(A.TOTAL_AMT*A.TOTAL_PRICE)         ");
            sb.AppendLine("         						else          ");
            sb.AppendLine("         							case when B.TAX_CD ='1'        ");
            sb.AppendLine("         							then (A.TOTAL_AMT*A.TOTAL_PRICE)         ");
            sb.AppendLine("         							else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end        ");
            sb.AppendLine("         							end          ");
            sb.AppendLine("       					else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY          ");
            sb.AppendLine("   FROM F_SALES_DETAIL A   ");
            sb.AppendLine("   left outer join F_SALES B   ");
            sb.AppendLine("   on A.SALES_DATE = B.SALES_DATE   ");
            sb.AppendLine("   and A.SALES_CD = B.SALES_CD   ");
            sb.AppendLine("   left outer join N_ITEM_CODE N   ");
            sb.AppendLine("   on N.ITEM_CD = A.ITEM_CD   ");
            sb.AppendLine("   and (A.ESCALATION_YN is null or A.ESCALATION_YN = 'N')  ");
            sb.AppendLine("   ) A   ");
            sb.AppendLine(condition);
            sb.AppendLine("   order by  A.SALES_DATE DESC, A.SALES_CD DESC   ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Bill_Escalation(string s_date, string e_date, string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("");
            sb.AppendLine("  SELECT ");
            sb.AppendLine("  A.CUST_CD ");
            sb.AppendLine("  ,A.TAX_CD ");
            sb.AppendLine("  ,A.CUST_NM");
            sb.AppendLine("  ,A.OWNER  ");
            sb.AppendLine("  ,A.SAUP_NO");
            sb.AppendLine("  ,A.VAT_CD ");
            sb.AppendLine("  ,A.VAT_NM ");
            sb.AppendLine("  ,ISSUE_RATIO ");
            sb.AppendLine("  ,A.TOTAL_SUPPLY_MONEY ");
            sb.AppendLine("  ,A.TOTAL_TAX_MONEY ");
            sb.AppendLine("  ,A.TOTAL_MONEY  ");
            sb.AppendLine("  ,A.TOTAL_SALES_MONEY  ");
            sb.AppendLine("  ,A.COUNT  ");
            sb.AppendLine("  ,A.SOO_CARD  ");
            sb.AppendLine("  ,A.SOO_ACCEPT_CARD ");
            sb.AppendLine("  ,case when A.TAX_CD !='2' and A.VAT_CD = '1'  ");
            sb.AppendLine("   		then ROUND((A.CARD_TOTAL_MONEY)/1.1 ,0 )");
            sb.AppendLine("   		else A.CARD_TOTAL_MONEY end as CARD_SUPPLY_MONEY ");
            sb.AppendLine("  ,case when A.VAT_CD = '2' OR A.TAX_CD = '2'");
            sb.AppendLine("   		then 0 ");
            sb.AppendLine("   		else ((A.CARD_TOTAL_MONEY) - ROUND((A.CARD_TOTAL_MONEY)/1.1 ,0 )) end as CARD_TAX_MONEY ");
            sb.AppendLine(" ,A.CARD_TOTAL_MONEY ");
            sb.AppendLine(" FROM (  ");
            sb.AppendLine("   	  SELECT");
            sb.AppendLine("   	  A.CUST_CD");
            sb.AppendLine("   	  ,A.TAX_CD");
            sb.AppendLine("   	  ,A.CUST_NM  ");
            sb.AppendLine("   	  ,A.OWNER ");
            sb.AppendLine("   	  ,A.SAUP_NO  ");
            sb.AppendLine("   	  ,A.VAT_CD");
            sb.AppendLine("   	  ,A.VAT_NM");
            sb.AppendLine("   	  ,ISSUE_RATIO");
            sb.AppendLine("   	  ,case when A.TAX_CD != '3' and A.VAT_CD = '1'");
            sb.AppendLine("   	  then ROUND(A.TOTAL_MONEY/1.1,0)  ");
            sb.AppendLine("   	  else A.TOTAL_MONEY end as TOTAL_SUPPLY_MONEY ");
            sb.AppendLine("   	  ,case when A.TAX_CD = '3' or A.VAT_CD = '2'  ");
            sb.AppendLine("   	  then 0");
            sb.AppendLine("   	  else A.TOTAL_MONEY - ROUND(A.TOTAL_MONEY/1.1,0) end as TOTAL_TAX_MONEY  ");
            sb.AppendLine("   	  ,A.TOTAL_MONEY ");
            sb.AppendLine("   	  ,A.TOTAL_SALES_MONEY ");
            sb.AppendLine("   	  ,A.COUNT ");
            sb.AppendLine("   	  ,A.SOO_CARD ");
            sb.AppendLine("   	  ,case when A.SOO_CARD = 0  ");
            sb.AppendLine("   		then 0 ");
            sb.AppendLine("   		else");
            sb.AppendLine("   			case when A.TOTAL_MONEY < A.SOO_CARD");
            sb.AppendLine("   				then A.TOTAL_MONEY  ");
            sb.AppendLine("   				else A.SOO_CARD  ");
            sb.AppendLine("   			end");
            sb.AppendLine("   		end ");
            sb.AppendLine("   		as SOO_ACCEPT_CARD ");
            sb.AppendLine("   	  ,A.TOTAL_MONEY - (case when A.SOO_CARD = 0");
            sb.AppendLine("   		then 0 ");
            sb.AppendLine("   		else");
            sb.AppendLine("   			case when A.TOTAL_MONEY < A.SOO_CARD");
            sb.AppendLine("   				then A.TOTAL_MONEY  ");
            sb.AppendLine("   				else A.SOO_CARD  ");
            sb.AppendLine("   			end");
            sb.AppendLine("   		end) AS CARD_TOTAL_MONEY ");
            sb.AppendLine("   ");
            sb.AppendLine("   	  FROM(  SELECT  ");
            sb.AppendLine("  			S.CUST_CD  ");
            sb.AppendLine("  			,(SELECT TAX_CD FROM N_CUST_CODE WHERE S.CUST_CD = CUST_CD) AS TAX_CD  ");
            sb.AppendLine("  			,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD) AS CUST_NM");
            sb.AppendLine("  			,(SELECT OWNER FROM N_CUST_CODE B WHERE CUST_CD = S.CUST_CD) AS OWNER  ");
            sb.AppendLine("  			,(SELECT SAUP_NO FROM N_CUST_CODE B WHERE CUST_CD = S.CUST_CD) AS SAUP_NO ");
            sb.AppendLine("  			,SD.TAX_CD  AS VAT_CD  ");
            sb.AppendLine("  			,(SELECT S_CODE_NM FROM T_S_CODE WHERE SD.TAX_CD = S_CODE AND L_CODE = '900') AS VAT_NM  ");
            sb.AppendLine("  			,(SELECT ISSUE_RATIO FROM N_CUST_CODE B WHERE CUST_CD = S.CUST_CD) AS ISSUE_RATIO  ");
            sb.AppendLine("  			,SUM(SX.TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY ");
            sb.AppendLine("  			,SUM(SX.TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY ");
            sb.AppendLine("  			,SUM(SX.TOTAL_MONEY) AS TOTAL_MONEY");
            sb.AppendLine("  			,SUM(SX.TOTAL_SALES_MONEY) AS TOTAL_SALES_MONEY");
            sb.AppendLine("  			,COUNT(SX.SEQ) AS COUNT");
            sb.AppendLine("  			,ISNULL((SELECT ISNULL(SUM(ISNULL(Z.TOTAL_MONEY,0)),0) FROM F_COLLECT Z WHERE Z.CUST_CD = S.CUST_CD and Z.SOO_GUBUN = '2' and Z.SOO_DATE>= '" + s_date + "' and Z.SOO_DATE <= '" + e_date + "' group by Z.CUST_CD),0) AS SOO_CARD ");
            sb.AppendLine("  			FROM F_SALES_DETAIL SD");
            sb.AppendLine("  			LEFT OUTER JOIN F_SALES S");
            sb.AppendLine("  			on S.SALES_DATE = SD.SALES_DATE");
            sb.AppendLine("  			and S.SALES_CD = SD.SALES_CD");
            sb.AppendLine("  			left outer join N_CUST_CODE C  ");
            sb.AppendLine("  			on S.CUST_CD = C.CUST_CD ");
            sb.AppendLine("  			left outer join (SELECT  ");
            sb.AppendLine("  				S.CUST_CD");
            sb.AppendLine("  				,SD.TAX_CD  ");
            sb.AppendLine("  				,S.SALES_DATE  ");
            sb.AppendLine("  				,S.SALES_CD ");
            sb.AppendLine("  				,SD.SEQ  ");
            sb.AppendLine("  				,case when S.TAX_CD = '1' and SD.TAX_CD = '1'");
            sb.AppendLine("  					then ROUND((SD.TOTAL_AMT * SD.TOTAL_PRICE/100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)/1.1) ,0 )");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) end as TOTAL_SUPPLY_MONEY");
            sb.AppendLine("  					,case when SD.TAX_CD = '2' OR S.TAX_CD = '2'");
            sb.AppendLine("  					then 0  ");
            sb.AppendLine("  					else case when S.TAX_CD = '0'");
            sb.AppendLine("  					then (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))*0.1 ");
            sb.AppendLine("  					else ((SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) - ROUND((SD.TOTAL_AMT * SD.TOTAL_PRICE) /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)/1.1 ,0 )) end end as TOTAL_TAX_MONEY  ");
            sb.AppendLine("  				,case when SD.TAX_CD = '1'  ");
            sb.AppendLine("  					then  ");
            sb.AppendLine(" 					case when S.TAX_CD = '2'");
            sb.AppendLine(" 						then ");
            sb.AppendLine(" 							(SD.TOTAL_AMT*SD.TOTAL_PRICE/100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))");
            sb.AppendLine(" 						else ");
            sb.AppendLine(" 							case when S.TAX_CD ='1'  ");
            sb.AppendLine(" 							then (SD.TOTAL_AMT*SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))");
            sb.AppendLine(" 							else (SD.TOTAL_AMT*SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))+((SD.TOTAL_AMT*SD.TOTAL_PRICE) /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)*0.1) end  ");
            sb.AppendLine(" 							end ");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) end AS TOTAL_MONEY  ");
            sb.AppendLine("  					");
            sb.AppendLine("  					,case when SD.TAX_CD = '1' ");
            sb.AppendLine("  					then  ");
            sb.AppendLine(" 					case when S.TAX_CD = '2'");
            sb.AppendLine(" 						then ");
            sb.AppendLine(" 							(SD.TOTAL_AMT*SD.TOTAL_PRICE)  ");
            sb.AppendLine(" 						else ");
            sb.AppendLine(" 							case when S.TAX_CD ='1'  ");
            sb.AppendLine(" 							then (SD.TOTAL_AMT*SD.TOTAL_PRICE)");
            sb.AppendLine(" 							else (SD.TOTAL_AMT*SD.TOTAL_PRICE)+((SD.TOTAL_AMT*SD.TOTAL_PRICE)*0.1) end  ");
            sb.AppendLine(" 							end ");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE) end AS TOTAL_SALES_MONEY  ");
            sb.AppendLine("  					");
            sb.AppendLine("   	  		");
            sb.AppendLine("  					from F_SALES S ");
            sb.AppendLine("  					left outer join F_SALES_DETAIL SD");
            sb.AppendLine("  					on S.SALES_DATE = SD.SALES_DATE  ");
            sb.AppendLine("  					and S.SALES_CD = SD.SALES_CD  ");
            sb.AppendLine("  					) SX  ");
            sb.AppendLine("  			ON SD.SALES_DATE = SX.SALES_DATE");
            sb.AppendLine("  			and SD.SALES_CD = SX.SALES_CD");
            sb.AppendLine("  			and SD.SEQ = SX.SEQ ");
            sb.AppendLine("  			where SD.SALES_DATE >= '" + s_date + "' and SD.SALES_DATE <= '" + e_date + "'   " + condition + "    " + "   AND (SD.ESCALATION_YN != 'Y' or SD.ESCALATION_YN is null ) ");
            sb.AppendLine("  			group by S.CUST_CD, SD.TAX_CD");
            sb.AppendLine("  			  ");
            sb.AppendLine("  			union all  ");
            sb.AppendLine("  			  ");
            sb.AppendLine("  			SELECT  ");
            sb.AppendLine("  			'9999999999' AS CUST_CD");
            sb.AppendLine("  			,'' AS TAX_CD ");
            sb.AppendLine("  			,'=== 합계 ===' AS CUST_NM");
            sb.AppendLine("  			,'' AS OWNER  ");
            sb.AppendLine("  			,'' AS SAUP_NO");
            sb.AppendLine("  			,'' AS VAT_CD ");
            sb.AppendLine("  			,'' AS VAT_NM ");
            sb.AppendLine("  			,'' AS ISSUE_RATIO  ");
            sb.AppendLine("  			,0 AS TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine("  			,0 AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("  			,0 AS TOTAL_MONEY");
            sb.AppendLine("  			,SUM(SX.TOTAL_SALES_MONEY) AS TOTAL_SALES_MONEY");
            sb.AppendLine("  			,COUNT(SX.SEQ) AS COUNT");
            sb.AppendLine("  			,ISNULL((SELECT ISNULL(SUM(ISNULL(Z.TOTAL_MONEY,0)),0) FROM F_COLLECT Z WHERE Z.SOO_GUBUN = '2' and Z.SOO_DATE>= '" + s_date + "' and Z.SOO_DATE <= '" + e_date + "' ),0) AS SOO_CARD");
            sb.AppendLine("  			FROM F_SALES_DETAIL SD");
            sb.AppendLine("  			LEFT OUTER JOIN F_SALES S");
            sb.AppendLine("  			on S.SALES_DATE = SD.SALES_DATE");
            sb.AppendLine("  			and S.SALES_CD = SD.SALES_CD");
            sb.AppendLine("  			left outer join (SELECT  ");
            sb.AppendLine("  				S.CUST_CD");
            sb.AppendLine("  				,SD.TAX_CD AS VAT_CD ");
            sb.AppendLine("  				,S.SALES_DATE  ");
            sb.AppendLine("  				,S.SALES_CD ");
            sb.AppendLine("  				,SD.SEQ  ");
            sb.AppendLine("  				,case when S.TAX_CD = '1' and SD.TAX_CD = '1'");
            sb.AppendLine("  					then ROUND((SD.TOTAL_AMT * SD.TOTAL_PRICE/100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)/1.1) ,0 )");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) end as TOTAL_SUPPLY_MONEY");
            sb.AppendLine("  					,case when SD.TAX_CD = '2' OR S.TAX_CD = '2'");
            sb.AppendLine("  					then 0  ");
            sb.AppendLine("  					else case when S.TAX_CD = '0'");
            sb.AppendLine("  					then (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))*0.1 ");
            sb.AppendLine("  					else ((SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) - ROUND((SD.TOTAL_AMT * SD.TOTAL_PRICE) /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)/1.1 ,0 )) end end as TOTAL_TAX_MONEY");
            sb.AppendLine("  				,case when SD.TAX_CD = '1'  ");
            sb.AppendLine("  					then  ");
            sb.AppendLine(" 					case when S.TAX_CD = '2'");
            sb.AppendLine(" 						then ");
            sb.AppendLine(" 							(SD.TOTAL_AMT*SD.TOTAL_PRICE/100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))");
            sb.AppendLine(" 						else ");
            sb.AppendLine(" 							case when S.TAX_CD ='1'  ");
            sb.AppendLine(" 							then (SD.TOTAL_AMT*SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))");
            sb.AppendLine(" 							else (SD.TOTAL_AMT*SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD))+((SD.TOTAL_AMT*SD.TOTAL_PRICE) /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)*0.1) end  ");
            sb.AppendLine(" 							end ");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE /100*(SELECT ISSUE_RATIO FROM N_CUST_CODE WHERE CUST_CD = S.CUST_CD)) end AS TOTAL_MONEY  ");
            sb.AppendLine("  					");
            sb.AppendLine("  					,case when SD.TAX_CD = '1'  ");
            sb.AppendLine("  					then");
            sb.AppendLine(" 					case when S.TAX_CD = '2' ");
            sb.AppendLine(" 						then  ");
            sb.AppendLine(" 							(SD.TOTAL_AMT*SD.TOTAL_PRICE)");
            sb.AppendLine(" 						else  ");
            sb.AppendLine(" 							case when S.TAX_CD ='1'");
            sb.AppendLine(" 							then (SD.TOTAL_AMT*SD.TOTAL_PRICE) ");
            sb.AppendLine(" 							else (SD.TOTAL_AMT*SD.TOTAL_PRICE)+((SD.TOTAL_AMT*SD.TOTAL_PRICE)*0.1) end");
            sb.AppendLine(" 							end  ");
            sb.AppendLine("  					else (SD.TOTAL_AMT * SD.TOTAL_PRICE) end AS TOTAL_SALES_MONEY");
            sb.AppendLine("   	  		 ");
            sb.AppendLine("  					from F_SALES S  ");
            sb.AppendLine("  					left outer join F_SALES_DETAIL SD ");
            sb.AppendLine("  					on S.SALES_DATE = SD.SALES_DATE");
            sb.AppendLine("  					and S.SALES_CD = SD.SALES_CD");
            sb.AppendLine("  					) SX");
            sb.AppendLine("  			ON SD.SALES_DATE = SX.SALES_DATE ");
            sb.AppendLine("  			and SD.SALES_CD = SX.SALES_CD ");
            sb.AppendLine("  			and SD.SEQ = SX.SEQ  ");
            sb.AppendLine("  			where SD.SALES_DATE >= '" + s_date + "' and SD.SALES_DATE <= '" + e_date + "'   " + condition + "    " + "   AND (SD.ESCALATION_YN != 'Y' or SD.ESCALATION_YN is null )");
            sb.AppendLine("   ) A");
            sb.AppendLine(" ) A ");
            sb.AppendLine(" WHERE A.CUST_NM IS NOT NULL ");
            sb.AppendLine(" order by A.CUST_CD , A.VAT_CD                                                                                                                                                                                   ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Info_Group_By_Staff(string start_date, string end_date, string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("      ");
            sb.AppendLine("   select   ");
            sb.AppendLine("  isnull((SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD),'기타') AS CUST_NM  ");
            sb.AppendLine("  ,isnull(SUM(A.현금),0) AS 현금  ");
            sb.AppendLine("  ,isnull(SUM(A.무통장),0) AS 무통장  ");
            sb.AppendLine("  ,isnull(SUM(A.카드),0) AS 카드  ");
            sb.AppendLine("  ,isnull(SUM(A.어음),0) AS 어음  ");
            sb.AppendLine("  ,isnull(SUM(A.DC_MONEY),0) AS 할인  ");
            sb.AppendLine("  ,isnull(SUM(A.ALL_TOTAL_MONEY),0) AS 매출  ");
            sb.AppendLine("  ,isnull(SUM(A.BUY_MONEY),0) AS 매입  ");
            sb.AppendLine("  ,isnull(SUM(A.GIVE_MONEY),0) AS 지급  ");
            sb.AppendLine("  ,isnull(SUM(A.BALANCE_DAY),0) AS 잔고  ");
            sb.AppendLine("  from (  ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  A.CUST_CD  ");
            sb.AppendLine("  ,A.SOO_GUBUN  ");
            sb.AppendLine("  ,A.DC_MONEY  ");
            sb.AppendLine("  ,case when A.SOO_GUBUN = 1 then A.TOTAL_MONEY else 0 end AS 현금  ");
            sb.AppendLine("  ,case when A.SOO_GUBUN = 3 then A.TOTAL_MONEY else 0 end AS 무통장  ");
            sb.AppendLine("  ,case when A.SOO_GUBUN = 2 then A.TOTAL_MONEY else 0 end AS 카드  ");
            sb.AppendLine("  ,case when A.SOO_GUBUN = 4 then A.TOTAL_MONEY else 0 end AS 어음  ");
            sb.AppendLine("  ,B.STAFF_CD   ");
            sb.AppendLine("  ,0 AS ALL_TOTAL_MONEY   ");
            sb.AppendLine("  ,0 AS BUY_MONEY  ");
            sb.AppendLine("  ,0 AS GIVE_MONEY  ");
            sb.AppendLine("  ,0 AS BALANCE_DAY  ");
            sb.AppendLine("  FROM F_COLLECT A   ");
            sb.AppendLine("  left outer join N_CUST_CODE B  ");
            sb.AppendLine("  on A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("  where A.SOO_DATE >= '" + start_date + "' and A.SOO_DATE <= '" + end_date + "'  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("    ");
            sb.AppendLine("  SELECT   ");
            sb.AppendLine("  A.CUST_CD  ");
            sb.AppendLine("  ,'' AS SOO_GUBUN  ");
            sb.AppendLine("  ,0 AS DC_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY2  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY3  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY4  ");
            sb.AppendLine("  ,B.STAFF_CD  ");
            sb.AppendLine("  ,A.ALL_TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BUY_MONEY  ");
            sb.AppendLine("  ,0 AS GIVE_MONEY  ");
            sb.AppendLine("  ,0 AS BALANCE_DAY  ");
            sb.AppendLine("  FROM F_SALES A  ");
            sb.AppendLine("  left outer join N_CUST_CODE B  ");
            sb.AppendLine("  on A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("  where A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("    ");
            sb.AppendLine("  SELECT   ");
            sb.AppendLine("  A.CUST_CD  ");
            sb.AppendLine("  ,'' AS SOO_GUBUN  ");
            sb.AppendLine("  ,0 AS DC_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY2  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY3  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY4  ");
            sb.AppendLine("  ,B.STAFF_CD  ");
            sb.AppendLine("  ,0 AS ALL_TOTAL_MONEY  ");
            sb.AppendLine("  ,A.ALL_TOTAL_MONEY AS BUY_MONEY  ");
            sb.AppendLine("  ,0 AS GIVE_MONEY  ");
            sb.AppendLine("  ,0 AS BALANCE_DAY  ");
            sb.AppendLine("  FROM F_BUY A  ");
            sb.AppendLine("  left outer join N_CUST_CODE B  ");
            sb.AppendLine("  on A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("  where A.BUY_DATE >= '" + start_date + "' and A.BUY_DATE <= '" + end_date + "'  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all   ");
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  A.CUST_CD  ");
            sb.AppendLine("  ,A.GIVE_GUBUN  ");
            sb.AppendLine("  ,0 AS DC_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY2  ");
            sb.AppendLine("  ,0 AS SOO_MONEY3  ");
            sb.AppendLine("  ,0 AS SOO_MONEY4  ");
            sb.AppendLine("  ,B.STAFF_CD  ");
            sb.AppendLine("  ,0 AS ALL_TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BUY_MONEY  ");
            sb.AppendLine("  ,A.TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BALANCE_DAY  ");
            sb.AppendLine("  FROM F_GIVE A   ");
            sb.AppendLine("  left outer join N_CUST_CODE B  ");
            sb.AppendLine("  on A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("  where A.GIVE_DATE >= '" + start_date + "' and A.GIVE_DATE <= '" + end_date + "'  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all   ");
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  A.CUST_CD  ");
            sb.AppendLine("  ,'' AS GIVE_GUBUN  ");
            sb.AppendLine("  ,0 AS DC_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY2  ");
            sb.AppendLine("  ,0 AS SOO_MONEY3  ");
            sb.AppendLine("  ,0 AS SOO_MONEY4  ");
            sb.AppendLine("  ,B.STAFF_CD  ");
            sb.AppendLine("  ,0 AS ALL_TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BUY_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY  ");
            sb.AppendLine("  ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where " + condition + " and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY  ");
            sb.AppendLine("  FROM T_CUST_DAY_TOTAL A   ");
            sb.AppendLine("  left outer join N_CUST_CODE B  ");
            sb.AppendLine("  on A.CUST_CD = B.CUST_CD  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all   ");
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  '' AS CUST_CD  ");
            sb.AppendLine("  ,'' AS GIVE_GUBUN  ");
            sb.AppendLine("  ,0 AS DC_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY  ");
            sb.AppendLine("  ,0 AS SOO_MONEY2  ");
            sb.AppendLine("  ,0 AS SOO_MONEY3  ");
            sb.AppendLine("  ,0 AS SOO_MONEY4  ");
            sb.AppendLine("  ,STAFF_CD  ");
            sb.AppendLine("  ,0 AS ALL_TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BUY_MONEY  ");
            sb.AppendLine("  ,0 AS TOTAL_MONEY  ");
            sb.AppendLine("  ,0 AS BALANCE_DAY  ");
            sb.AppendLine("  FROM N_STAFF_CODE  ");
            sb.AppendLine("    ");
            sb.AppendLine("    ");
            sb.AppendLine("  ) A  ");
            sb.AppendLine("    ");
            sb.AppendLine("    ");
            sb.AppendLine("  group by A.CUST_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Info_Date_List(string start_date, string end_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("         ");

            //sb.AppendLine("   select '(원료육)매출' AS GUBUN  ");
            //sb.AppendLine("           ,ISNULL(SUM(case when B.VAT_CD = '1'     ");
            //sb.AppendLine("           then        ");
            //sb.AppendLine("     		case when C.TAX_CD = '2'     ");
            //sb.AppendLine("     			then     ");
            //sb.AppendLine("     				(A.TOTAL_AMT*A.TOTAL_PRICE)        ");
            //sb.AppendLine("     			else        ");
            //sb.AppendLine("     				case when C.TAX_CD ='1'     ");
            //sb.AppendLine("     				then (A.TOTAL_AMT*A.TOTAL_PRICE)       ");
            //sb.AppendLine("     				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end       ");
            //sb.AppendLine("     				end      ");
            //sb.AppendLine("           else (A.TOTAL_AMT * A.TOTAL_PRICE) end ),0) AS TOTAL_MONEY     ");
            //sb.AppendLine("          from F_SALES Z    ");
            //sb.AppendLine("          left outer join F_SALES_DETAIL A     ");
            //sb.AppendLine("          on Z.SALES_DATE = A.SALES_DATE       ");
            //sb.AppendLine("              and Z.SALES_CD = A.SALES_CD      ");
            //sb.AppendLine("          left outer join N_RAW_CODE B         ");
            //sb.AppendLine("          on A.PRODUCT_CD = B.RAW_MAT_CD       ");
            //sb.AppendLine("          left outer join N_CUST_CODE C        ");
            //sb.AppendLine("          on Z.CUST_CD = C.CUST_CD             ");
            //sb.AppendLine("          left outer join F_RAW_DETAIL D       ");
            //sb.AppendLine("          on D.INPUT_DATE = A.INPUT_DATE       ");
            //sb.AppendLine("          and D.INPUT_CD = A.INPUT_CD      ");
            //sb.AppendLine("          and D.SEQ = A.INPUT_SEQ      ");
            //sb.AppendLine("         where A.PRODUCT_GUBUN = '1' and A.SALES_DATE  >= '" + start_date + "' AND A.SALES_DATE <= '" + end_date + "'  ");
            //sb.AppendLine("         union all    ");
            sb.AppendLine("         select   ");
            sb.AppendLine("         '(상,제품)매출' AS GUBUN  ");
            sb.AppendLine("           ,ISNULL(SUM(case when B.VAT_CD = '1'     ");
            sb.AppendLine("   		then     ");
            sb.AppendLine("   		case when C.TAX_CD = '2'         ");
            sb.AppendLine("   			then     ");
            sb.AppendLine("   				(A.TOTAL_AMT*A.TOTAL_PRICE)      ");
            sb.AppendLine("   			else       ");
            sb.AppendLine("   				case when C.TAX_CD ='1'     ");
            sb.AppendLine("   				then (A.TOTAL_AMT*A.TOTAL_PRICE)      ");
            sb.AppendLine("   				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end     ");
            sb.AppendLine("   				end       ");
            sb.AppendLine("   		else (A.TOTAL_AMT * A.TOTAL_PRICE) end ),0) AS TOTAL_MONEY       ");
            sb.AppendLine("          from F_SALES Z       ");
            sb.AppendLine("          left outer join F_SALES_DETAIL A       ");
            sb.AppendLine("          on Z.SALES_DATE = A.SALES_DATE    ");
            sb.AppendLine("              and Z.SALES_CD = A.SALES_CD         ");
            sb.AppendLine("          left outer join N_ITEM_CODE B    ");
            sb.AppendLine("          on A.ITEM_CD = B.ITEM_CD     ");
            sb.AppendLine("          left outer join N_CUST_CODE C      ");
            sb.AppendLine("          on Z.CUST_CD = C.CUST_CD       ");
            sb.AppendLine("          left outer join F_ITEM_INPUT D       ");
            sb.AppendLine("          on D.INPUT_DATE = A.INPUT_DATE       ");
            sb.AppendLine("          and D.INPUT_CD = A.INPUT_CD      ");
            sb.AppendLine("         where A.SALES_DATE  >= '" + start_date + "' AND A.SALES_DATE <= '" + end_date + "'   ");
            sb.AppendLine("   union all  ");
            sb.AppendLine("   SELECT '(전체)매출' AS GUBUN  ");
            sb.AppendLine("          ,ISNULL(SUM(S_TOTAL_MONEY),0) AS S_TOTAL_MONEY  ");
            sb.AppendLine("   FROM T_CUST_DAY_TOTAL A  ");
            sb.AppendLine("   where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'  ");
            sb.AppendLine("   union all   ");
            sb.AppendLine("   SELECT '수금' AS GUBUN  ");
            sb.AppendLine("          ,ISNULL(SUM(COL_TOTAL_MONEY),0) AS COL_TOTAL_MONEY  ");
            sb.AppendLine("   FROM T_CUST_DAY_TOTAL A  ");
            sb.AppendLine("   where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'  ");
            sb.AppendLine("   union all   ");
            sb.AppendLine("   SELECT '매입' AS GUBUN  ");
            sb.AppendLine("          ,ISNULL(SUM(P_TOTAL_MONEY),0) AS P_TOTAL_MONEY  ");
            sb.AppendLine("   FROM T_CUST_DAY_TOTAL A  ");
            sb.AppendLine("   where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'  ");
            sb.AppendLine("   union all   ");
            sb.AppendLine("   SELECT '지급' AS GUBUN  ");
            sb.AppendLine("          ,ISNULL(SUM(PAY_TOTAL_MONEY),0) AS GIVE_TOTAL_MONEY  ");
            sb.AppendLine("   FROM T_CUST_DAY_TOTAL A  ");
            sb.AppendLine("   where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'  ");
            sb.AppendLine("   union all   ");
            sb.AppendLine("   SELECT '할인' AS GUBUN  ");
            sb.AppendLine("          ,ISNULL(SUM(COL_DC_MONEY ),0) AS COL_DC_MONEY  ");
            sb.AppendLine("   FROM T_CUST_DAY_TOTAL A  ");
            sb.AppendLine("   where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'  ");
            //sb.AppendLine("   union all  ");
            //sb.AppendLine("   SELECT '지출' AS GUBUN  ");
            //sb.AppendLine("         ,ISNULL(SUM(MONEY),0) AS PAY_MONEY  ");
            //sb.AppendLine("   FROM F_PAY_DETAIL A  ");
            //sb.AppendLine("   WHERE PAY_DATE >= '" + start_date + "' AND PAY_DATE <= '" + end_date + "'  ");





            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Cust_Info_List(string start_date, string end_date, bool NotZero, bool NotActivity)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("      select   * FROM (     ");
            sb.AppendLine("      select               ");
            sb.AppendLine("     A.STAFF_CD            ");
            sb.AppendLine("     ,'1' AS gubun         ");
            sb.AppendLine("     ,A.STAFF_CD AS '사원명칭'           ");
            sb.AppendLine("     ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM         ");
            sb.AppendLine("     ,A.CUST_CD            ");
            sb.AppendLine("     ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM              ");
            sb.AppendLine("     ,SUM(A.현금)+SUM(A.무통장)+SUM(A.카드)+SUM(A.어음) AS 수금           ");
            sb.AppendLine("     ,SUM(A.DC_MONEY) AS 할인            ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY) AS 매출     ");
            sb.AppendLine("     ,SUM(A.BUY_MONEY) AS 매입           ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY) AS 현잔고       ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY_before) AS 이월잔고               ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY) AS 이익금                   ");
            sb.AppendLine("     ,(SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY))/case when SUM(A.ALL_TOTAL_MONEY)=0 then 1 else SUM(A.ALL_TOTAL_MONEY) end * 100 AS 이익율                ");
            sb.AppendLine("     from (                ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.SOO_GUBUN          ");
            sb.AppendLine("     ,A.DC_MONEY           ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 1 then A.TOTAL_MONEY else 0 end AS 현금                     ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 3 then A.TOTAL_MONEY else 0 end AS 무통장                   ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 2 then A.TOTAL_MONEY else 0 end AS 카드                     ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 4 then A.TOTAL_MONEY else 0 end AS 어음                     ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_COLLECT A      ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SOO_DATE >= '" + start_date + "' and A.SOO_DATE <= '" + end_date + "'                      ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY    ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_SALES A        ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'                  ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY AS BUY_MONEY     ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_BUY A          ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.BUY_DATE >= '" + start_date + "' and A.BUY_DATE <= '" + end_date + "'                      ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.GIVE_GUBUN         ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,A.TOTAL_MONEY        ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_GIVE A         ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.GIVE_DATE >= '" + start_date + "' and A.GIVE_DATE <= '" + end_date + "'                    ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE <= '" + end_date + "'    and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY                    ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE < '" + start_date + "' and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY_before                 ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("   	select                ");
            sb.AppendLine("   	B.CUST_CD AS CUST_CD                ");
            sb.AppendLine("   	,'' AS GIVE_GUBUN     ");
            sb.AppendLine("   	,0 AS DC_MONEY        ");
            sb.AppendLine("   	,0 AS SOO_MONEY       ");
            sb.AppendLine("   	,0 AS SOO_MONEY2      ");
            sb.AppendLine("   	,0 AS SOO_MONEY3      ");
            sb.AppendLine("   	,0 AS SOO_MONEY4      ");
            sb.AppendLine("   	,A.STAFF_CD           ");
            sb.AppendLine("   	,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("   	,0 AS BUY_MONEY       ");
            sb.AppendLine("   	,0 AS TOTAL_MONEY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY2    ");
            sb.AppendLine("   	FROM N_STAFF_CODE A                 ");
            sb.AppendLine("   	inner join N_CUST_CODE B            ");
            sb.AppendLine("   	on A.STAFF_CD = B.STAFF_CD          ");
            sb.AppendLine("     ) A                   ");
            sb.AppendLine("   where (SELECT CUST_GUBUN FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) = '1'      ");

            sb.AppendLine("     group by A.STAFF_CD  , A.CUST_CD    ");
            sb.AppendLine("           ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("      select               ");
            sb.AppendLine("     A.STAFF_CD AS STAFF_CD              ");
            sb.AppendLine("     ,'2' AS gubun         ");
            sb.AppendLine("     ,' ' AS 사원명칭       ");
            sb.AppendLine("     ,'--- 소계 ---' AS STAFF_NM         ");
            sb.AppendLine("     ,'' AS CUST_CD        ");
            sb.AppendLine("     ,'' AS CUST_NM        ");
            sb.AppendLine("     ,SUM(A.현금)+SUM(A.무통장)+SUM(A.카드)+SUM(A.어음) AS 수금           ");
            sb.AppendLine("     ,SUM(A.DC_MONEY) AS 할인            ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY) AS 매출     ");
            sb.AppendLine("     ,SUM(A.BUY_MONEY) AS 매입           ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY) AS 현잔고       ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY_before) AS 이월잔고               ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY) AS 이익금                   ");
            sb.AppendLine("     ,(SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY))/case when SUM(A.ALL_TOTAL_MONEY)=0 then 1 else SUM(A.ALL_TOTAL_MONEY) end * 100 AS 이익율                ");
            sb.AppendLine("     from (                ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.SOO_GUBUN          ");
            sb.AppendLine("     ,A.DC_MONEY           ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 1 then A.TOTAL_MONEY else 0 end AS 현금                     ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 3 then A.TOTAL_MONEY else 0 end AS 무통장                   ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 2 then A.TOTAL_MONEY else 0 end AS 카드                     ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 4 then A.TOTAL_MONEY else 0 end AS 어음                     ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_COLLECT A      ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SOO_DATE >= '" + start_date + "' and A.SOO_DATE <= '" + end_date + "'                      ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY    ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_SALES A        ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'                  ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY AS BUY_MONEY     ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_BUY A          ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.BUY_DATE >= '" + start_date + "' and A.BUY_DATE <= '" + end_date + "'                      ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.GIVE_GUBUN         ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,A.TOTAL_MONEY        ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_GIVE A         ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.GIVE_DATE >= '" + start_date + "' and A.GIVE_DATE <= '" + end_date + "'                    ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE <= '" + end_date + "'    and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY                    ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE < '" + start_date + "' and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY_before                 ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("   	select                ");
            sb.AppendLine("   	B.CUST_CD AS CUST_CD                ");
            sb.AppendLine("   	,'' AS GIVE_GUBUN     ");
            sb.AppendLine("   	,0 AS DC_MONEY        ");
            sb.AppendLine("   	,0 AS SOO_MONEY       ");
            sb.AppendLine("   	,0 AS SOO_MONEY2      ");
            sb.AppendLine("   	,0 AS SOO_MONEY3      ");
            sb.AppendLine("   	,0 AS SOO_MONEY4      ");
            sb.AppendLine("   	,A.STAFF_CD           ");
            sb.AppendLine("   	,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("   	,0 AS BUY_MONEY       ");
            sb.AppendLine("   	,0 AS TOTAL_MONEY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY2    ");
            sb.AppendLine("   	FROM N_STAFF_CODE A                 ");
            sb.AppendLine("   	inner join N_CUST_CODE B            ");
            sb.AppendLine("   	on A.STAFF_CD = B.STAFF_CD          ");
            sb.AppendLine("     ) A                   ");
            sb.AppendLine("   where (SELECT CUST_GUBUN FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) = '1'      ");
            sb.AppendLine("     group by A.STAFF_CD                 ");
            sb.AppendLine("           ");
            sb.AppendLine("    union all              ");
            sb.AppendLine("           ");
            sb.AppendLine("      select               ");
            sb.AppendLine("     '99999999' AS STAFF_CD              ");
            sb.AppendLine("     ,'9999' AS gubun      ");
            sb.AppendLine("     ,'' AS 사원명칭       ");
            sb.AppendLine("     ,'=== 합계 ===' AS STAFF_NM         ");
            sb.AppendLine("     ,'' AS CUST_CD        ");
            sb.AppendLine("     ,'' AS CUST_NM        ");
            sb.AppendLine("     ,SUM(A.현금)+SUM(A.무통장)+SUM(A.카드)+SUM(A.어음) AS 수금           ");
            sb.AppendLine("     ,SUM(A.DC_MONEY) AS 할인            ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY) AS 매출     ");
            sb.AppendLine("     ,SUM(A.BUY_MONEY) AS 매입           ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY) AS 현잔고       ");
            sb.AppendLine("     ,SUM(A.BALANCE_DAY_before) AS 이월잔고               ");
            sb.AppendLine("     ,SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY) AS 이익금                   ");
            sb.AppendLine("     ,(SUM(A.ALL_TOTAL_MONEY)-SUM(A.BUY_MONEY)-SUM(A.DC_MONEY))/case when SUM(A.ALL_TOTAL_MONEY)=0 then 1 else SUM(A.ALL_TOTAL_MONEY) end * 100 AS 이익율                ");
            sb.AppendLine("     from (                ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.SOO_GUBUN          ");
            sb.AppendLine("     ,A.DC_MONEY           ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 1 then A.TOTAL_MONEY else 0 end AS 현금         ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 3 then A.TOTAL_MONEY else 0 end AS 무통장                   ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 2 then A.TOTAL_MONEY else 0 end AS 카드         ");
            sb.AppendLine("     ,case when A.SOO_GUBUN = 4 then A.TOTAL_MONEY else 0 end AS 어음          ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_COLLECT A      ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SOO_DATE >= '" + start_date + "' and A.SOO_DATE <= '" + end_date + "'         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY    ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_SALES A        ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'        ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     SELECT                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS SOO_GUBUN      ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY2    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY3    ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY4    ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,A.ALL_TOTAL_MONEY AS BUY_MONEY     ");
            sb.AppendLine("     ,0 AS GIVE_MONEY      ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_BUY A          ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.BUY_DATE >= '" + start_date + "' and A.BUY_DATE <= '" + end_date + "'         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,A.GIVE_GUBUN         ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,A.TOTAL_MONEY        ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM F_GIVE A         ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     where A.GIVE_DATE >= '" + start_date + "' and A.GIVE_DATE <= '" + end_date + "'                    ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE <= '" + end_date + "'    and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY                    ");
            sb.AppendLine("     ,0 AS BALANCE_DAY_before            ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("     select                ");
            sb.AppendLine("     A.CUST_CD             ");
            sb.AppendLine("     ,'' AS GIVE_GUBUN     ");
            sb.AppendLine("     ,0 AS DC_MONEY        ");
            sb.AppendLine("     ,0 AS SOO_MONEY       ");
            sb.AppendLine("     ,0 AS SOO_MONEY2      ");
            sb.AppendLine("     ,0 AS SOO_MONEY3      ");
            sb.AppendLine("     ,0 AS SOO_MONEY4      ");
            sb.AppendLine("     ,B.STAFF_CD           ");
            sb.AppendLine("     ,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("     ,0 AS BUY_MONEY       ");
            sb.AppendLine("     ,0 AS TOTAL_MONEY     ");
            sb.AppendLine("     ,0 AS BALANCE_DAY     ");
            sb.AppendLine("     ,(SELECT top 1 isnull(BALANCE_DAY,0) FROM T_CUST_DAY_TOTAL where  INPUT_DATE < '" + start_date + "' and CUST_CD = A.CUST_CD order by INPUT_DATE desc) AS BALANCE_DAY_before                 ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL A             ");
            sb.AppendLine("     left outer join N_CUST_CODE B       ");
            sb.AppendLine("     on A.CUST_CD = B.CUST_CD            ");
            sb.AppendLine("     group by A.CUST_CD , B.STAFF_CD         ");
            sb.AppendLine("           ");
            sb.AppendLine("     union all             ");
            sb.AppendLine("           ");
            sb.AppendLine("   	select                ");
            sb.AppendLine("   	B.CUST_CD AS CUST_CD                ");
            sb.AppendLine("   	,'' AS GIVE_GUBUN     ");
            sb.AppendLine("   	,0 AS DC_MONEY        ");
            sb.AppendLine("   	,0 AS SOO_MONEY       ");
            sb.AppendLine("   	,0 AS SOO_MONEY2      ");
            sb.AppendLine("   	,0 AS SOO_MONEY3      ");
            sb.AppendLine("   	,0 AS SOO_MONEY4      ");
            sb.AppendLine("   	,A.STAFF_CD           ");
            sb.AppendLine("   	,0 AS ALL_TOTAL_MONEY               ");
            sb.AppendLine("   	,0 AS BUY_MONEY       ");
            sb.AppendLine("   	,0 AS TOTAL_MONEY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY     ");
            sb.AppendLine("   	,0 AS BALANCE_DAY2    ");
            sb.AppendLine("   	FROM N_STAFF_CODE A                 ");
            sb.AppendLine("   	inner join N_CUST_CODE B            ");
            sb.AppendLine("   	on A.STAFF_CD = B.STAFF_CD          ");
            sb.AppendLine("     ) A                   ");
            sb.AppendLine("   where (SELECT CUST_GUBUN FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) = '1'      ");
            sb.AppendLine(" ) A                   ");
            sb.AppendLine(" WHERE 1=1 and (SELECT USED_CD FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD) = '1'               ");
            if (NotZero)
            {
                //sb.AppendLine("     and (A.현잔고 != 0 and A.현잔고 is not null)           ");
            }
            if (NotActivity)
            {
                //sb.AppendLine("  and (A.현잔고 != A.이월잔고 or (A.매출 != 0 or A.수금 != 0) or 1=1 ) ");
            }
            sb.AppendLine("     order by STAFF_CD, gubun            ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Info_Profit_List(string start_date, string end_date)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("         SELECT    ");
            sb.AppendLine("     	SUM(S_TOTAL_MONEY) AS '매출액'   ");
            sb.AppendLine("     	,SUM(P_TOTAL_MONEY) AS '매입액'   ");
            sb.AppendLine("     	,SUM(PAY_MONEY) AS '지출액'   ");
            sb.AppendLine("     	,SUM(COL_DC_MONEY) AS '할인액'   ");
            sb.AppendLine("     	,SUM(S_TOTAL_MONEY)-SUM(P_TOTAL_MONEY)-SUM(PAY_MONEY)-SUM(COL_DC_MONEY) AS '이익금'   ");
            sb.AppendLine("     	,(SUM(S_TOTAL_MONEY)-SUM(P_TOTAL_MONEY)-SUM(PAY_MONEY)-SUM(COL_DC_MONEY))/ case when SUM(S_TOTAL_MONEY)=0 then 1 else SUM(S_TOTAL_MONEY) end *100 AS '이익율'   ");
            sb.AppendLine("     FROM (   ");
            sb.AppendLine("        SELECT ISNULL(SUM(S_TOTAL_MONEY),0) AS S_TOTAL_MONEY     ");
            sb.AppendLine("               ,0 AS P_TOTAL_MONEY   ");
            sb.AppendLine("               ,0 AS PAY_MONEY   ");
            sb.AppendLine("               ,0 AS COL_DC_MONEY   ");
            sb.AppendLine("        FROM T_CUST_DAY_TOTAL A     ");
            sb.AppendLine("        where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'     ");
            sb.AppendLine("        union all      ");
            sb.AppendLine("        SELECT 0 AS S_TOTAL_MONEY   ");
            sb.AppendLine("     	     ,ISNULL(SUM(P_TOTAL_MONEY),0) AS P_TOTAL_MONEY     ");
            sb.AppendLine("     	     ,0 AS PAY_MONEY   ");
            sb.AppendLine("              ,0 AS GIVE_DC_MONEY   ");
            sb.AppendLine("        FROM T_CUST_DAY_TOTAL A     ");
            sb.AppendLine("        where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'     ");
            //sb.AppendLine("        union all     ");
            //sb.AppendLine("        SELECT 0 AS S_TOTAL_MONEY   ");
            //sb.AppendLine("     		 ,0 AS P_TOTAL_MONEY   ");
            //sb.AppendLine("     		,ISNULL(SUM(MONEY),0) AS PAY_MONEY     ");
            //sb.AppendLine("     		,0 AS GIVE_DC_MONEY   ");
            //sb.AppendLine("        FROM F_PAY_DETAIL A     ");
            //sb.AppendLine("        WHERE PAY_DATE >= '" + start_date + "' AND PAY_DATE <= '" + end_date + "'     ");
            sb.AppendLine("        ");
            sb.AppendLine("        union all      ");
            sb.AppendLine("        SELECT  0 AS S_TOTAL_MONEY   ");
            sb.AppendLine("     		 ,0 AS P_TOTAL_MONEY   ");
            sb.AppendLine("     		 ,0 AS PAY_MONEY   ");
            sb.AppendLine("     		 ,ISNULL(SUM(COL_DC_MONEY ),0) AS COL_DC_MONEY     ");
            sb.AppendLine("        FROM T_CUST_DAY_TOTAL A     ");
            sb.AppendLine("        where INPUT_DATE >= '" + start_date + "' AND INPUT_DATE <= '" + end_date + "'     ");
            sb.AppendLine("     ) A       ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Product_Info_Sales_List(string start_date, string end_date, bool ChkGrade, bool NoActivity)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("         ");
            sb.AppendLine("    select     ");
            sb.AppendLine("    '1' AS GUBUN    ");
            sb.AppendLine("    ,A.ITEM_CD    ");
            sb.AppendLine("    ,A.ITEM_NM    ");
            sb.AppendLine("    ,A.SPEC    ");
            sb.AppendLine("    ,A.UNIT_NM    ");
            sb.AppendLine("    ,SUM(A.TOTAL_AMT) AS TOTAL_AMT    ");
            sb.AppendLine("    ,SUM(A.TOTAL_MONEY) AS TOTAL_MONEY    ");
            sb.AppendLine("    ,SUM(A.TOTAL_MONEY)/case when SUM(A.TOTAL_AMT)= 0 then 1 else SUM(A.TOTAL_AMT) end AS 평균단가    ");
            sb.AppendLine("        ");
            sb.AppendLine("        ");
            sb.AppendLine("    from (    ");
            sb.AppendLine("      select     ");
            sb.AppendLine("    A.ITEM_CD    ");
            sb.AppendLine("    ,N.ITEM_NM    ");
            sb.AppendLine("    ,N.SPEC AS SPEC    ");
            sb.AppendLine("    ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD ) AS UNIT_NM    ");
            sb.AppendLine("    ,A.TOTAL_AMT    ");
            sb.AppendLine("        ");
            sb.AppendLine("    ,case when C.TAX_CD = '1' and N.VAT_CD = '1'          ");
            sb.AppendLine("            then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )        ");
            sb.AppendLine("            else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY      ");
            sb.AppendLine("            ,case when N.VAT_CD = '2' OR C.TAX_CD = '2'      ");
            sb.AppendLine("            then 0        ");
            sb.AppendLine("            else case when C.TAX_CD = '0'         ");
            sb.AppendLine("            then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1          ");
            sb.AppendLine("            else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY        ");
            sb.AppendLine("           ,case when N.VAT_CD = '1'       ");
            sb.AppendLine("            then       ");
            sb.AppendLine("      		case when C.TAX_CD = '2'           ");
            sb.AppendLine("      			then        ");
            sb.AppendLine("      				(A.TOTAL_AMT*A.TOTAL_PRICE)        ");
            sb.AppendLine("      			else         ");
            sb.AppendLine("      				case when C.TAX_CD ='1'       ");
            sb.AppendLine("      				then (A.TOTAL_AMT*A.TOTAL_PRICE)        ");
            sb.AppendLine("      				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end       ");
            sb.AppendLine("      				end         ");
            sb.AppendLine("            else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY         ");
            sb.AppendLine("                ");
            sb.AppendLine("      from F_SALES_DETAIL A     ");
            sb.AppendLine("      left outer join F_SALES C    ");
            sb.AppendLine("      on A.SALES_DATE = C.SALES_DATE    ");
            sb.AppendLine("      and A.SALES_CD = C.SALES_CD    ");
            sb.AppendLine("      left outer join N_ITEM_CODE N    ");
            sb.AppendLine("      on A.ITEM_CD = N.ITEM_CD    ");
            sb.AppendLine("      left outer join F_ITEM_INPUT D    ");
            sb.AppendLine("      on A.INPUT_DATE = D.INPUT_DATE    ");
            sb.AppendLine("      and A.INPUT_CD = D.INPUT_CD    ");
            sb.AppendLine("      and A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'    ");

            if (!NoActivity)
            {
                sb.AppendLine("      union all     ");
                sb.AppendLine("          ");
                sb.AppendLine("        select     ");
                sb.AppendLine("    N.ITEM_CD    ");
                sb.AppendLine("    ,N.ITEM_NM    ");
                sb.AppendLine("    ,N.SPEC AS SPEC    ");
                sb.AppendLine("    ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD ) AS UNIT_NM    ");
                sb.AppendLine("    ,0 AS TOTAL_AMT    ");
                sb.AppendLine("    ,0 as TOTAL_SUPPLY_MONEY      ");
                sb.AppendLine("    ,0 as TOTAL_TAX_MONEY        ");
                sb.AppendLine("    ,0 AS TOTAL_MONEY         ");
                sb.AppendLine("      from N_ITEM_CODE N    ");
            }
            sb.AppendLine("    ) A    ");
            sb.AppendLine("    group by A.ITEM_CD, A.ITEM_NM, A.SPEC , A.UNIT_NM     ");
            sb.AppendLine("    union all   ");
            sb.AppendLine("      ");
            sb.AppendLine("    select   ");
            sb.AppendLine("    '2' AS GUBUN  ");
            sb.AppendLine("    ,'=== 합계 ===' AS ITEM_CD  ");
            sb.AppendLine("    ,'' AS ITEM_NM  ");
            sb.AppendLine("    ,'' AS SPEC  ");
            sb.AppendLine("    ,'' AS UNIT_NM  ");
            sb.AppendLine("    ,SUM(A.TOTAL_AMT) AS TOTAL_AMT  ");
            sb.AppendLine("    ,SUM(A.TOTAL_MONEY) AS TOTAL_MONEY  ");
            sb.AppendLine("    ,0 AS 평균단가  ");
            sb.AppendLine("      ");
            sb.AppendLine("      ");
            sb.AppendLine("    from (  ");
            sb.AppendLine("      select   ");
            sb.AppendLine("    A.ITEM_CD  ");
            sb.AppendLine("    ,N.ITEM_NM   ");
            sb.AppendLine("    ,N.SPEC AS SPEC  ");
            sb.AppendLine("    ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD ) AS UNIT_NM  ");
            sb.AppendLine("    ,A.TOTAL_AMT  ");
            sb.AppendLine("      ");
            sb.AppendLine("    ,case when C.TAX_CD = '1' and N.VAT_CD = '1'        ");
            sb.AppendLine("            then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )      ");
            sb.AppendLine("            else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY    ");
            sb.AppendLine("            ,case when N.VAT_CD = '2' OR C.TAX_CD = '2'    ");
            sb.AppendLine("            then 0      ");
            sb.AppendLine("            else case when C.TAX_CD = '0'       ");
            sb.AppendLine("            then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1        ");
            sb.AppendLine("            else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY      ");
            sb.AppendLine("           ,case when N.VAT_CD = '1'     ");
            sb.AppendLine("            then     ");
            sb.AppendLine("      		case when C.TAX_CD = '2'         ");
            sb.AppendLine("      			then      ");
            sb.AppendLine("      				(A.TOTAL_AMT*A.TOTAL_PRICE)      ");
            sb.AppendLine("      			else       ");
            sb.AppendLine("      				case when C.TAX_CD ='1'     ");
            sb.AppendLine("      				then (A.TOTAL_AMT*A.TOTAL_PRICE)      ");
            sb.AppendLine("      				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end     ");
            sb.AppendLine("      				end       ");
            sb.AppendLine("            else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY       ");
            sb.AppendLine("              ");
            sb.AppendLine("      from F_SALES_DETAIL A   ");
            sb.AppendLine("      left outer join F_SALES C  ");
            sb.AppendLine("      on A.SALES_DATE = C.SALES_DATE  ");
            sb.AppendLine("      and A.SALES_CD = C.SALES_CD  ");
            sb.AppendLine("      left outer join N_ITEM_CODE N  ");
            sb.AppendLine("      on A.ITEM_CD = N.ITEM_CD  ");
            sb.AppendLine("      left outer join F_ITEM_INPUT D  ");
            sb.AppendLine("      on A.INPUT_DATE = D.INPUT_DATE  ");
            sb.AppendLine("      and A.INPUT_CD = D.INPUT_CD  ");
            sb.AppendLine("      and A.SALES_DATE >= '" + start_date + "' and A.SALES_DATE <= '" + end_date + "'  ");
            sb.AppendLine("        ");
            sb.AppendLine("      union all   ");
            sb.AppendLine("        ");
            sb.AppendLine("        ");
            sb.AppendLine("        select   ");
            sb.AppendLine("    N.ITEM_CD  ");
            sb.AppendLine("    ,N.ITEM_NM   ");
            sb.AppendLine("    ,N.SPEC AS SPEC  ");
            sb.AppendLine("    ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD ) AS UNIT_NM  ");
            sb.AppendLine("    ,0 AS TOTAL_AMT  ");
            sb.AppendLine("    ,0 as TOTAL_SUPPLY_MONEY    ");
            sb.AppendLine("    ,0 as TOTAL_TAX_MONEY      ");
            sb.AppendLine("    ,0 AS TOTAL_MONEY       ");
            sb.AppendLine("      from N_ITEM_CODE N  ");
            sb.AppendLine("    ) A  ");
            if (ChkGrade)
            {
                sb.AppendLine(" ORDER BY GUBUN, TOTAL_MONEY DESC ");
            }
            else
            {
                sb.AppendLine(" ORDER BY GUBUN,  ITEM_CD ");
            }

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_일월매출수금할인_List()
        {
            DataTable dt;
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("     SELECT SUM(Z.매출계) AS 매출계   ");
            sb.AppendLine("     ,SUM(Z.수금계) AS 수금계   ");
            sb.AppendLine("     ,SUM(Z.할인계) AS 할인계   ");
            sb.AppendLine("     FROM(   ");
            sb.AppendLine("     SELECT SUM(S_TOTAL_MONEY - S_BACK_TOTAL_MONEY) AS 매출계   ");
            sb.AppendLine("     ,0 AS 수금계   ");
            sb.AppendLine("     ,0 AS 할인계   ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL   ");
            sb.AppendLine("     WHERE INPUT_DATE >= '2020-01-01' AND INPUT_DATE <= '2020-01-31'   ");

            sb.AppendLine("     UNION ALL   ");

            sb.AppendLine("     SELECT 0 AS 매출계   ");
            sb.AppendLine("     ,SUM(COL_TOTAL_MONEY )AS 수금계   ");
            sb.AppendLine("     ,0 AS 할인계   ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL   ");
            sb.AppendLine("     WHERE INPUT_DATE >= '2020-01-01' AND INPUT_DATE <= '2020-01-31'   ");

            sb.AppendLine("     UNION ALL   ");

            sb.AppendLine("     SELECT 0 AS 매출계   ");
            sb.AppendLine("     ,0 AS 수금계   ");
            sb.AppendLine("     ,SUM(COL_DC_MONEY) AS 할인계		   ");
            sb.AppendLine("     FROM T_CUST_DAY_TOTAL   ");
            sb.AppendLine("     WHERE INPUT_DATE >= '2020-01-01' AND INPUT_DATE <= '2020-01-31'   ");
            sb.AppendLine("     ) Z   ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }




        public DataTable fn_활동보고서_매출처별_List(string date)
        {
            DataTable dt;
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select      ");
            sb.AppendLine("A.SALES_DATE AS 일자명칭        ");
            sb.AppendLine(",A.SALES_CD          ");
            sb.AppendLine(",A.SEQ      ");
            //sb.AppendLine("-- ,A.PRODUCT_GUBUN AS 구분             ");
            sb.AppendLine(",(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1210' and Z.SALES_GUBUN = S_CODE ) AS INPUT_GUBUN        ");
            sb.AppendLine(",Z.CUST_CD         ");
            sb.AppendLine(",C.CUST_NM         ");
            sb.AppendLine(",(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='900' and Z.TAX_CD = S_CODE) AS TAX_NM         ");
            sb.AppendLine(",Z.TAX_CD            ");
            sb.AppendLine(",(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='910' and A.TAX_CD = S_CODE) AS VAT_NM          ");
            sb.AppendLine(",A.TAX_CD         ");
            sb.AppendLine(",B.ITEM_NM AS PRODUCT_NM          ");
            //sb.AppendLine("-- , (SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.UNIT_CD = UNIT_CD) AS UNIT_NM                ");
            sb.AppendLine(", case when Z.TAX_CD = '1' and A.TAX_CD = '1'            ");
            sb.AppendLine("then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )          ");
            sb.AppendLine("else (A.TOTAL_AMT * A.TOTAL_PRICE) end as SUPPLY_MONEY        ");
            sb.AppendLine(",case when A.TAX_CD = '2' OR Z.TAX_CD = '2'        ");
            sb.AppendLine("then 0          ");
            sb.AppendLine("else case when Z.TAX_CD = '0'           ");
            sb.AppendLine("then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1     ");
            sb.AppendLine("else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TAX_MONEY          ");
            sb.AppendLine(",case when A.TAX_CD = '1'         ");
            sb.AppendLine("then         ");
            sb.AppendLine("case when Z.TAX_CD = '2'             ");
            sb.AppendLine("then          ");
            sb.AppendLine("(A.TOTAL_AMT*A.TOTAL_PRICE)          ");
            sb.AppendLine("else           ");
            sb.AppendLine("case when Z.TAX_CD ='1'         ");
            sb.AppendLine("then (A.TOTAL_AMT*A.TOTAL_PRICE)   ");
            sb.AppendLine("else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end         ");
            sb.AppendLine("end           ");
            sb.AppendLine("else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY           ");
            sb.AppendLine(", ISNULL(E.S_TOTAL_MONEY - S_BACK_TOTAL_MONEY ,0)	AS SALES_MONEY      ");
            sb.AppendLine(", ISNULL(E.COL_TOTAL_MONEY,0)	AS SOO_MONEY          ");
            sb.AppendLine(", ISNULL(E.COL_DC_MONEY,0)	AS DC_MONEY            ");
            //sb.AppendLine("--, B.LABEL_NM          ");
            //sb.AppendLine("--, D.A_UNION_CD       ");
            sb.AppendLine(", ISNULL((E.BALANCE_DAY+E.BALANCE_CHANGE),0) AS BALANCE             ");
            sb.AppendLine("from F_SALES Z           ");
            sb.AppendLine("left outer join F_SALES_DETAIL A           ");
            sb.AppendLine("on Z.SALES_DATE = A.SALES_DATE        ");
            sb.AppendLine("and Z.SALES_CD = A.SALES_CD             ");
            sb.AppendLine("left outer join N_ITEM_CODE B        ");
            sb.AppendLine("on A.ITEM_CD = B.ITEM_CD         ");
            sb.AppendLine("left outer join N_CUST_CODE C          ");
            sb.AppendLine("on Z.CUST_CD = C.CUST_CD           ");

            sb.AppendLine("left outer join T_CUST_DAY_TOTAL E      ");
            sb.AppendLine("on Z.SALES_DATE = E.INPUT_DATE AND Z.CUST_CD = E.CUST_CD          ");
            sb.AppendLine(" LEFT OUTER JOIN F_ITEM_OUT_DETAIL G           ");
            sb.AppendLine("on A.OUTPUT_DATE = G.OUTPUT_DATE AND A.OUTPUT_CD = G.OUTPUT_CD AND A.OUTPUT_SEQ = G.SEQ              ");

            sb.AppendLine("where ");
            //sb.AppendLine("--A.PRODUCT_GUBUN = '2' and");
            sb.AppendLine("  Z.SALES_DATE = '" + date + "' ");
            sb.AppendLine("union all       ");
            sb.AppendLine("SELECT        ");
            sb.AppendLine("'=== 합계 ===' AS 일자명칭           ");
            sb.AppendLine(",'999999' AS SLAES_CD              ");
            sb.AppendLine(",'' AS SEQ            ");
            //sb.AppendLine("-- ,'' AS 구분      ");
            sb.AppendLine(",'' AS INPUT_GUBUN           ");
            sb.AppendLine(",'' AS CUST_CD             ");
            sb.AppendLine(",'' AS CUST_NM            ");
            sb.AppendLine(",'' AS TAX_CD           ");
            sb.AppendLine(",'' AS TAX_NM            ");
            sb.AppendLine(",'' AS VAT_CD             ");
            sb.AppendLine(",'' AS VAT_NM             ");
            sb.AppendLine(",'' AS  PRODUCT_NM           ");
            // sb.AppendLine("-- ,'' AS UNIT_NM              ");   
            sb.AppendLine(" ,sum(ISNULL(S_SUPPLY_MONEY,0)) AS TOTAL_SUPPLY_MONEY          ");
            sb.AppendLine(",sum(ISNULL(S_TAX_MONEY,0)) AS TOTAL_TAX_MONEY          ");
            sb.AppendLine(",sum(ISNULL(S_TOTAL_MONEY,0)) AS TOTAL_MONEY       ");
            sb.AppendLine(",SUM(ISNULL(S_TOTAL_MONEY,0)) AS SALES_MONEY         ");
            sb.AppendLine(",sum(ISNULL(COL_TOTAL_MONEY,0)) AS SOO_MONEY           ");
            sb.AppendLine(",sum(ISNULL(COL_DC_MONEY,0)) AS DC_MONEY           ");
            // sb.AppendLine("-- ,'' AS  LABEL_NM            ");
            // sb.AppendLine("-- ,'' AS  UNION_CD      ");
            sb.AppendLine(",SUM(ISNULL(BALANCE_DAY,0)+ISNULL(BALANCE_CHANGE,0))  AS  BALANCE             ");
            sb.AppendLine("FROM F_SALES A      ");
            sb.AppendLine("LEFT OUTER JOIN T_CUST_DAY_TOTAL B      ");
            sb.AppendLine("ON A.SALES_DATE = B.INPUT_DATE AND A.CUST_CD = B.CUST_CD      ");
            sb.AppendLine("WHERE A.SALES_DATE = '" + date + "'      ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int deleteEstimate(string esti_date, string esti_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ESTIMATE ");
                sb.AppendLine("    where ESTI_DATE = @ESTI_DATE ");
                sb.AppendLine("    and ESTI_CD = @ESTI_CD ");

                sb.AppendLine("delete from F_ESTIMATE_DETAIL ");
                sb.AppendLine("    where ESTI_DATE = @ESTI_DATE ");
                sb.AppendLine("    and ESTI_CD = @ESTI_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ESTI_DATE", esti_date);
                sCommand.Parameters.AddWithValue("@ESTI_CD", esti_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ESTIMATE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int insertEstimate(string esti_date, string cust_cd, string txt_comment, string tax_cd, conDataGridView estiGrid, conDataGridView SumGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq = ISNULL(MAX(ESTI_CD),0)+1 from F_ESTIMATE ");
                sb.AppendLine("where ESTI_DATE = '" + esti_date + "'  ");


                sb.AppendLine("INSERT INTO F_ESTIMATE ( ");
                sb.AppendLine(" ESTI_DATE ");
                sb.AppendLine("  ,ESTI_CD ");
                sb.AppendLine("  ,CUST_CD ");
                sb.AppendLine("  ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("  ,ALL_TAX_MONEY ");
                sb.AppendLine("  ,ALL_TOTAL_MONEY ");
                sb.AppendLine("  ,TAX_CD ");
                sb.AppendLine("  ,COMMENT ");
                sb.AppendLine("  ,INSTAFF ");
                sb.AppendLine("  ,INTIME ");
                sb.AppendLine("  ) VALUES ( ");
                sb.AppendLine("  '" + esti_date + "' ");
                sb.AppendLine("  ,@seq ");
                sb.AppendLine("  ,'" + cust_cd + "' ");
                sb.AppendLine("  , " + SumGrid.Rows[0].Cells["SUM_OUT_MONEY"].Value.ToString().Replace(",", "") + " ");
                sb.AppendLine("  , " + SumGrid.Rows[0].Cells["SUM_TAX"].Value.ToString().Replace(",", "") + " ");
                sb.AppendLine("  , " + SumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", "") + " ");
                sb.AppendLine("  ,'" + tax_cd + "' ");

                sb.AppendLine("  ,'" + txt_comment + "' ");
                sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("  ) ");

                if (estiGrid.Rows.Count < 1)
                {
                    MessageBox.Show("최소 하나 이상의 견적 품목을 등록해야합니다.");
                    return 1;
                }

                for (int i = 0; i < estiGrid.Rows.Count; i++)
                {
                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select @seq" + i + " = ISNULL(MAX(SEQ),0)+1 from F_ESTIMATE_DETAIL ");
                    sb.AppendLine("where ESTI_DATE = '" + esti_date + "' and ESTI_CD = @seq ");

                    sb.AppendLine("INSERT INTO F_ESTIMATE_DETAIL ( ");
                    sb.AppendLine(" ESTI_DATE ");
                    sb.AppendLine("  ,ESTI_CD ");
                    sb.AppendLine("  ,SEQ ");
                    sb.AppendLine("  ,PRODUCT_GUBUN ");
                    sb.AppendLine("  ,PRODUCT_CD ");
                    sb.AppendLine("  ,UNIT_CD ");
                    sb.AppendLine("  ,TOTAL_AMT ");
                    sb.AppendLine("  ,TOTAL_PRICE ");
                    sb.AppendLine("  ,VAT_CD ");
                    sb.AppendLine("  ,INSTAFF ");
                    sb.AppendLine("  ,INTIME ");
                    sb.AppendLine("  ) VALUES ( ");
                    sb.AppendLine("  '" + esti_date + "' ");
                    sb.AppendLine("  ,@seq ");
                    sb.AppendLine("  ,@seq" + i + " ");
                    sb.AppendLine("  ,'' ");
                    sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["ITEM_CD"].Value.ToString() + "' ");
                    sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["UNIT_CD"].Value.ToString() + "' ");
                    sb.AppendLine("  ," + estiGrid.Rows[i].Cells["OUT_AMT"].Value.ToString().Replace(",", "") + " ");
                    sb.AppendLine("  ," + estiGrid.Rows[i].Cells["OUT_PRICE"].Value.ToString().Replace(",", "") + " ");
                    sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["VAT_CD"].Value.ToString() + "' ");
                    sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine("  ) ");
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public int updateEstimate(string esti_date, string esti_cd, string cust_cd, string txt_comment, string tax_cd, conDataGridView estiGrid, conDataGridView SumGrid, DataTable delGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update F_ESTIMATE set");
                sb.AppendLine("      CUST_CD = '" + cust_cd + "' ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY = '" + SumGrid.Rows[0].Cells["SUM_OUT_MONEY"].Value.ToString().Replace(",", "") + "' ");
                sb.AppendLine("     ,ALL_TAX_MONEY = '" + SumGrid.Rows[0].Cells["SUM_TAX"].Value.ToString().Replace(",", "") + "' ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY = '" + SumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", "") + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = '" + txt_comment + "' ");
                sb.AppendLine("     ,TAX_CD = '" + tax_cd + "' ");
                sb.AppendLine(" where ESTI_DATE = '" + esti_date + "' and ESTI_CD= '" + esti_cd + "' ");

                if (estiGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < estiGrid.Rows.Count; i++)
                    {
                        string txt_seq = (string)estiGrid.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @seq" + i + " int ");
                            sb.AppendLine("select @seq" + i + " = ISNULL(MAX(SEQ),0)+1 from F_ESTIMATE_DETAIL ");
                            sb.AppendLine("where ESTI_DATE = '" + esti_date + "' and ESTI_CD = '" + esti_cd + "' ");

                            sb.AppendLine("INSERT INTO F_ESTIMATE_DETAIL ( ");
                            sb.AppendLine(" ESTI_DATE ");
                            sb.AppendLine("  ,ESTI_CD ");
                            sb.AppendLine("  ,SEQ ");
                            sb.AppendLine("  ,PRODUCT_GUBUN ");
                            sb.AppendLine("  ,PRODUCT_CD ");
                            sb.AppendLine("  ,UNIT_CD ");
                            sb.AppendLine("  ,TOTAL_AMT ");
                            sb.AppendLine("  ,TOTAL_PRICE ");
                            sb.AppendLine("  ,VAT_CD ");
                            sb.AppendLine("  ,INSTAFF ");
                            sb.AppendLine("  ,INTIME ");
                            sb.AppendLine("  ) VALUES ( ");
                            sb.AppendLine("  '" + esti_date + "' ");
                            sb.AppendLine("  ,'" + esti_cd + "' ");
                            sb.AppendLine("  ,@seq" + i + " ");
                            sb.AppendLine("  ,'" + (estiGrid.Rows[i].Cells["RAW_ITEM_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                            sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["ITEM_CD"].Value.ToString() + "' ");
                            sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["UNIT_CD"].Value.ToString() + "' ");
                            sb.AppendLine("  ," + estiGrid.Rows[i].Cells["OUT_AMT"].Value.ToString().Replace(",", "") + " ");
                            sb.AppendLine("  ," + estiGrid.Rows[i].Cells["OUT_PRICE"].Value.ToString().Replace(",", "") + " ");
                            sb.AppendLine("  ,'" + estiGrid.Rows[i].Cells["VAT_CD"].Value.ToString() + "' ");
                            sb.AppendLine("  ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  ) ");

                        }
                        else
                        {
                            sb.AppendLine("update F_ESTIMATE_DETAIL set");
                            sb.AppendLine("      PRODUCT_GUBUN =  '" + (estiGrid.Rows[i].Cells["RAW_ITEM_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                            sb.AppendLine("      ,PRODUCT_CD =  '" + estiGrid.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("      ,UNIT_CD =  '" + estiGrid.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)estiGrid.Rows[i].Cells["OUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_PRICE =  '" + ((string)estiGrid.Rows[i].Cells["OUT_PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,VAT_CD =  '" + estiGrid.Rows[i].Cells["VAT_CD"].Value.ToString() + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where ESTI_DATE = '" + esti_date + "' ");
                            sb.AppendLine(" and ESTI_CD = '" + esti_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + estiGrid.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }



                if (delGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < delGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ESTIMATE_DETAIL ");
                        sb.AppendLine("    where ESTI_DATE = '" + delGrid.Rows[i]["ESTI_DATE"].ToString() + "' ");
                        sb.AppendLine("     and ESTI_CD = '" + delGrid.Rows[i]["ESTI_CD"].ToString() + "' ");
                        sb.AppendLine("     and SEQ = '" + delGrid.Rows[i]["SEQ"].ToString() + "' ");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ESTI_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_활동보고서_상품별(string date)
        {
            DataTable dt;
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("             SELECT * FROM( SELECT  '제품' AS 구분                                                                                ");
            sb.AppendLine("       ,Z.ITEM_NM AS 제품명                                                                                                    ");
            sb.AppendLine("       ,Z.ITEM_CD AS 품목코드                                                                                                    ");
            sb.AppendLine("       ,G.UNIT_NM AS 단위                                                                                                        ");
            sb.AppendLine("       ,Z.ITEM_NM AS 품목명                                                                                                      ");
            sb.AppendLine("       ,'-' AS 원산지                                                                                                            ");
            sb.AppendLine("       ,SUM(ISNULL(A.TOTAL_AMT,0)) AS 입고량    ");
            sb.AppendLine("       ,SUM(ISNULL(F.DAYS_CURRENT_AMONUT,0)) + SUM(ISNULL(B.OUTPUT_AMT,0))- SUM(ISNULL(A.TOTAL_AMT,0)) AS 금일재고량          ");
            sb.AppendLine("       ,SUM(ISNULL(F.DAYS_CURRENT_AMONUT,0)) AS 당일재고량                                                                       ");
            sb.AppendLine("       ,SUM(ISNULL(B.OUTPUT_AMT,0)) AS 생산출고량                                                                                ");
            sb.AppendLine("       ,SUM(ISNULL(E.SUPPLY_MONEY,0)) AS 공급가                                                                                  ");
            sb.AppendLine("       ,SUM(ISNULL(E.TAX_MONEY,0)) AS 부가세                                                                                     ");
            sb.AppendLine("       ,SUM(ISNULL(E.TOTAL_MONEY,0)) AS 합계액                                                                                   ");
            sb.AppendLine(" , Z.BAL_STOCK       AS 현재고 ");
            sb.AppendLine(" FROM N_ITEM_CODE Z                                                                                                              ");
            sb.AppendLine(" LEFT OUTER JOIN (SELECT A.ITEM_CD                                                                                               ");
            sb.AppendLine("          ,SUM(ISNULL(INPUT_AMT,0)) AS TOTAL_AMT                                                                                 ");
            sb.AppendLine("      FROM F_ITEM_INPUT A                                                                                                        ");
            sb.AppendLine("      WHERE INPUT_DATE = '"+date+"'                                                                                            ");
            sb.AppendLine("      GROUP BY A.ITEM_CD) A                                                                                                      ");
            sb.AppendLine(" ON Z.ITEM_CD = A.ITEM_CD    -- 입고                                                                                             ");
            sb.AppendLine(" LEFT OUTER JOIN (SELECT ITEM_CD,                                                                                                ");
            sb.AppendLine("                   SUM(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT                                                                       ");
            sb.AppendLine("                   FROM F_ITEM_OUT_DETAIL                                                                                        ");
            sb.AppendLine("                   WHERE OUTPUT_DATE = '"+date+"' --AND OUTPUT_GUBUN = 1                                                       ");
            sb.AppendLine("                   GROUP BY ITEM_CD                                                                                              ");
            sb.AppendLine("                   ) B     -- 생산출고                                                                                           ");
            sb.AppendLine(" ON Z.ITEM_CD = B.ITEM_CD                                                                                                        ");
            sb.AppendLine(" --LEFT OUTER JOIN (SELECT ITEM_CD,                                                                                              ");
            sb.AppendLine("                   -- -SUM(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT                                                                   ");
            sb.AppendLine("                   --FROM F_ITEM_OUT                                                                                             ");
            sb.AppendLine("                   --WHERE OUTPUT_DATE = '"+date+"' AND OUTPUT_GUBUN = 3                                                       ");
            sb.AppendLine("                   --GROUP BY ITEM_CD -- 반품입고                                                                                ");
            sb.AppendLine("                   --) D                                                                                                         ");
            sb.AppendLine(" --ON Z.ITEM_CD = D.ITEM_CD                                                                                                      ");
            sb.AppendLine(" LEFT OUTER JOIN ( SELECT A.ITEM_CD                                                                                              ");
            sb.AppendLine("                      ,A.SUPPLY_MONEY                                                                                            ");
            sb.AppendLine("                      ,A.TAX_MONEY                                                                                               ");
            sb.AppendLine("                      ,A.TOTAL_MONEY                                                                                             ");
            sb.AppendLine("                FROM(   SELECT A.ITEM_CD                                                                                         ");
            sb.AppendLine("                            ,case when B.TAX_CD = '1' and C.VAT_CD = '1'                                                         ");
            sb.AppendLine("                            then ( (A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) )                ");
            sb.AppendLine("                            else (A.TOTAL_AMT * A.TOTAL_PRICE) end as SUPPLY_MONEY                                               ");
            sb.AppendLine("                            ,case when C.VAT_CD = '2'                                                                            ");
            sb.AppendLine("                            then 0                                                                                               ");
            sb.AppendLine("                            else case when B.TAX_CD = '0'  OR B.TAX_CD = '2'                                                     ");
            sb.AppendLine("                            then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1                                                               ");
            sb.AppendLine("                            else ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) end end as TAX_MONEY                               ");
            sb.AppendLine("                            ,case when C.VAT_CD = '1'                                                                            ");
            sb.AppendLine("                            then                                                                                                 ");
            sb.AppendLine("                            case when B.TAX_CD = '2'                                                                             ");
            sb.AppendLine("                            then                                                                                                 ");
            sb.AppendLine("                            (A.TOTAL_AMT*A.TOTAL_PRICE)                                                                          ");
            sb.AppendLine("                            else                                                                                                 ");
            sb.AppendLine("                            case when B.TAX_CD ='1'                                                                              ");
            sb.AppendLine("                            then (A.TOTAL_AMT*A.TOTAL_PRICE)                                                                     ");
            sb.AppendLine("                            else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end                               ");
            sb.AppendLine("                            end                                                                                                  ");
            sb.AppendLine("                            else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY                                                ");
            sb.AppendLine("                      FROM F_SALES_DETAIL A                                                                                      ");
            sb.AppendLine("                      LEFT OUTER JOIN F_SALES B                                                                                  ");
            sb.AppendLine("                      ON A.SALES_DATE = B.SALES_DATE AND A.SALES_CD = B.SALES_CD                                                 ");
            sb.AppendLine("                     LEFT OUTER JOIN N_ITEM_CODE C                                                                               ");
            sb.AppendLine("                     ON A.ITEM_CD = C.ITEM_CD                                                                                    ");
            sb.AppendLine("                      WHERE A.SALES_DATE = '"+date+"'  -- 출고 매출 공급,부가,합계액                                           ");
            sb.AppendLine("                  )A                                                                                                             ");
            sb.AppendLine("                   ) E                                                                                                           ");
            sb.AppendLine(" ON Z.ITEM_CD = E.ITEM_CD                                                                                                        ");
            sb.AppendLine(" LEFT OUTER JOIN (SELECT A.ITEM_CD                                                                                               ");
            sb.AppendLine("             ,SUM(ISNULL(A.INPUT_AMT,0)) - SUM(ISNULL(B.OUTPUT_AMT,0)) AS DAYS_CURRENT_AMONUT                                    ");
            sb.AppendLine("             FROM (SELECT ITEM_CD                                                                                                ");
            sb.AppendLine("             ,SUM(ISNULL(INPUT_AMT,0)) AS INPUT_AMT                                                                              ");
            sb.AppendLine("             FROM F_ITEM_INPUT                                                                                                   ");
            sb.AppendLine("             WHERE INPUT_DATE <= '"+date+"'                                                                                    ");
            sb.AppendLine("             GROUP BY ITEM_CD) A                                                                                                 ");
            sb.AppendLine("             LEFT OUTER JOIN (SELECT ITEM_CD                                                                                     ");
            sb.AppendLine("                         ,SUM(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT                                                                ");
            sb.AppendLine("                         FROM F_ITEM_OUT_DETAIL                                                                                  ");
            sb.AppendLine("                         WHERE OUTPUT_DATE <= '"+date+"'                                                                       ");
            sb.AppendLine("                         GROUP BY ITEM_CD) B                                                                                     ");
            sb.AppendLine("             ON A.ITEM_CD = B.ITEM_CD                                                                                            ");
            sb.AppendLine("             GROUP BY A.ITEM_CD ) F -- 당일재고량                                                                                ");
            sb.AppendLine(" ON Z.ITEM_CD = F.ITEM_CD                                                                                                        ");
            sb.AppendLine(" LEFT OUTER JOIN N_UNIT_CODE G                                                                                                   ");
            sb.AppendLine(" ON Z.UNIT_CD = G.UNIT_CD                                                                                                        ");
            sb.AppendLine(" GROUP BY Z.ITEM_CD, Z.ITEM_NM , G.UNIT_NM,z.BAL_STOCK) A                                                                                    ");
            sb.AppendLine(" WHERE A.입고량 > 0 OR A.생산출고량 > 0  OR  A.공급가 > 0 OR A.부가세 > 0 OR A.합계액 > 0                                        ");
            sb.AppendLine(" UNION ALL                                                                                                                       ");
            sb.AppendLine(" SELECT  '-' AS 구분                                                                                                             ");
            sb.AppendLine("       ,'-' AS 제품명                                                                                                          ");
            sb.AppendLine("       ,'-' AS 품목코드                                                                                                          ");
            sb.AppendLine("       ,'-' AS 단위                                                                                                              ");
            sb.AppendLine("       ,'=== 합계 ===' AS 품목명                                                                                                 ");
            sb.AppendLine("       ,'-' AS 원산지                                                                                                            ");
            sb.AppendLine("       ,0 AS 입고량  ");
            sb.AppendLine("       ,0 AS 전일재고량          ");
            sb.AppendLine("       ,0 AS 당일재고량                                                                                                          ");
            sb.AppendLine("       ,0 AS 생산출고량                                                                                                          ");
            sb.AppendLine("       ,ISNULL(A.ALL_SUPPLY_MONEY,0) AS 공급가                                                                                   ");
            sb.AppendLine("       ,ISNULL(A.ALL_TAX_MONEY,0) AS 부가세                                                                                      ");
            sb.AppendLine("       ,ISNULL(A.ALL_TOTAL_MONEY,0) AS 합계액                                                                                    ");
            sb.AppendLine("       ,0 AS 현재고          ");
            sb.AppendLine(" FROM (SELECT SUM(ISNULL(ALL_SUPPLY_MONEY,0)) AS ALL_SUPPLY_MONEY                                                                ");
            sb.AppendLine("          ,SUM(ISNULL(ALL_TAX_MONEY,0)) AS ALL_TAX_MONEY                                                                         ");
            sb.AppendLine("          ,SUM(ISNULL(ALL_TOTAL_MONEY,0)) AS ALL_TOTAL_MONEY                                                                     ");
            sb.AppendLine("      FROM F_SALES                                                                                                               ");
            sb.AppendLine("      WHERE SALES_DATE = '"+date+"') A                                                                                         ");
            sb.AppendLine("                                                                                                                                 ");
            sb.AppendLine(" ORDER BY 구분 DESC , 품목코드                                                                                                   ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Esti_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.ESTI_DATE");
            sb.AppendLine("     ,A.ESTI_CD ");
            sb.AppendLine("     ,ISNULL(B.ITEM_CD,0) AS ITEM_CNT ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,A.TAX_CD ");
            sb.AppendLine("     ,(select S_CODE_NM FROM T_S_CODE WHERE L_CODE ='220' AND S_CODE = (SELECT TAX_CD from N_CUST_CODE where  CUST_CD = A.CUST_CD) ) AS TAX_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from F_ESTIMATE A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT ESTI_DATE,ESTI_CD,COUNT(*) AS ITEM_CD FROM F_ESTIMATE_DETAIL ");
            sb.AppendLine(" GROUP BY ESTI_DATE,ESTI_CD) B ");
            sb.AppendLine(" ON A.ESTI_DATE = B.ESTI_DATE ");
            sb.AppendLine(" AND A.ESTI_CD = B.ESTI_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ESTI_DATE desc, A.ESTI_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Esti_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ESTI_DATE");
            sb.AppendLine("     ,A.ESTI_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.PRODUCT_CD AS ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM  ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.TOTAL_PRICE ");
            sb.AppendLine("     ,B.TYPE_CD  ");
            sb.AppendLine("     ,A.VAT_CD  ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE TYPE_CD = B.TYPE_CD) AS TYPE_NM  ");

            sb.AppendLine(" from F_ESTIMATE_DETAIL A ");
            sb.AppendLine(" INNER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" ON A.PRODUCT_CD = B.ITEM_CD ");

            sb.AppendLine(condition);


            sb.AppendLine(" order by A.ESTI_DATE,A.ESTI_CD,A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //2020-06-04 이재원 여기부터 추가

        public DataTable fn_Sales_Detail_List(string condition, string vat_gubun)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select   ");
            sb.AppendLine("  A.SALES_DATE  ");
            sb.AppendLine("  ,A.SALES_CD ");
            sb.AppendLine("  ,A.SEQ ");
            sb.AppendLine("  ,'2' AS PRODUCT_GUBUN ");
            sb.AppendLine("  ,A.ITEM_CD AS PRODUCT_CD ");
            sb.AppendLine("  ,A.TOTAL_AMT ");
            sb.AppendLine("  ,A.TOTAL_PRICE ");
            sb.AppendLine("  ,A.TOTAL_AMT * A.TOTAL_PRICE AS TOTAL_MONEY ");
            sb.AppendLine("  ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD ) AS PRODUCT_NM ");
            sb.AppendLine("  ,(SELECT SPEC FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD ) AS SPEC ");
            sb.AppendLine("  ,B.TAX_CD ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '910' AND S_CODE = B.TAX_CD) AS TAX_NM ");
            sb.AppendLine("  FROM F_SALES_DETAIL A ");
            sb.AppendLine("  LEFT OUTER JOIN F_SALES B ");
            sb.AppendLine("  ON A.SALES_DATE = B.SALES_DATE ");
            sb.AppendLine("  AND A.SALES_CD = B.SALES_CD ");
            sb.AppendLine(condition + " AND A.TAX_CD = '" + vat_gubun + "'  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_Bill_List_CustOrder(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" B.CUST_CD AS 코드 ");
            sb.AppendLine(" ,1 AS 순서 ");
            sb.AppendLine(" ,C.CUST_NM AS 매출처명 ");
            sb.AppendLine(" ,C.SAUP_NO AS 사업자번호 ");
            sb.AppendLine(" ,B.BILL_DATE AS 발행일자 ");
            sb.AppendLine(" ,B.BILL_CD AS 발행번호 ");
            sb.AppendLine(" ,case when B.VAT_CD = '2' then '면세' ");
            sb.AppendLine(" else case when B.TAX_CD = '0' then '별도' else case when B.TAX_CD = '1' then '포함' else '영세율' ");
            sb.AppendLine(" end end end AS 구분 ");
            sb.AppendLine(" ,ISNULL(B.ALL_SUPPLY_MONEY,0) AS 공급가액 ");
            sb.AppendLine(" ,ISNULL(B.ALL_TAX_MONEY,0) AS 부가세 ");
            sb.AppendLine(" ,ISNULL(B.ALL_TOTAL_MONEY,0) AS 합계금액 ");
            sb.AppendLine(" FROM F_BILL_INPUT B ");
            sb.AppendLine(" left outer join N_CUST_CODE C ");
            sb.AppendLine(" on C.CUST_CD = B.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("  ");
            sb.AppendLine(" union all  ");
            sb.AppendLine("  ");
            sb.AppendLine(" select  ");
            sb.AppendLine(" B.CUST_CD AS 코드 ");
            sb.AppendLine(" ,2 AS 순서 ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = B.CUST_CD)+' 소계' AS 매출처명 ");
            sb.AppendLine(" ,'' AS 사업자번호 ");
            sb.AppendLine(" ,'' AS 발행일자 ");
            sb.AppendLine(" ,'' AS 발행번호 ");
            sb.AppendLine(" ,'' AS 구분 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_SUPPLY_MONEY,0)),0) AS 공급가액 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_TAX_MONEY,0)),0) AS 부가세 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_TOTAL_MONEY,0)),0) AS 합계금액 ");
            sb.AppendLine(" FROM F_BILL_INPUT B ");
            sb.AppendLine(" left outer join N_CUST_CODE C ");
            sb.AppendLine(" on C.CUST_CD = B.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" group by B.CUST_CD ");
            sb.AppendLine("  ");
            sb.AppendLine(" union all  ");
            sb.AppendLine("  ");
            sb.AppendLine(" select  ");
            sb.AppendLine(" '9999999999' AS 코드 ");
            sb.AppendLine(" ,9 AS 순서 ");
            sb.AppendLine(" ,'합계' AS 매출처명 ");
            sb.AppendLine(" ,'' AS 사업자번호 ");
            sb.AppendLine(" ,'' AS 발행일자 ");
            sb.AppendLine(" ,'' AS 발행번호 ");
            sb.AppendLine(" ,'' AS 구분 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_SUPPLY_MONEY,0)),0) AS 공급가액 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_TAX_MONEY,0)),0) AS 부가세 ");
            sb.AppendLine(" ,ISNULL(SUM(ISNULL(B.ALL_TOTAL_MONEY,0)),0) AS 합계금액 ");
            sb.AppendLine(" FROM F_BILL_INPUT B ");
            sb.AppendLine(" left outer join N_CUST_CODE C ");
            sb.AppendLine(" on C.CUST_CD = B.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by B.CUST_CD , 순서 ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_Bill_List_DayOrder(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine(" select   ");
            sb.AppendLine("  B.CUST_CD AS 코드  ");
            sb.AppendLine("  ,1 AS 순서  ");
            sb.AppendLine("  ,C.CUST_NM AS 매출처명  ");
            sb.AppendLine("  ,C.SAUP_NO AS 사업자번호  ");
            sb.AppendLine("  ,B.BILL_DATE AS 발행일자  ");
            sb.AppendLine("  ,B.BILL_DATE AS 발행일자2  ");
            sb.AppendLine("  ,B.BILL_CD AS 발행번호  ");
            sb.AppendLine("  ,case when B.VAT_CD = '2' then '면세'  ");
            sb.AppendLine("  else case when B.TAX_CD = '0' then '별도' else case when B.TAX_CD = '1' then '포함' else '영세율'  ");
            sb.AppendLine("  end end end AS 구분  ");
            sb.AppendLine("  ,ISNULL(B.ALL_SUPPLY_MONEY,0) AS 공급가액  ");
            sb.AppendLine("  ,ISNULL(B.ALL_TAX_MONEY,0) AS 부가세  ");
            sb.AppendLine("  ,ISNULL(B.ALL_TOTAL_MONEY,0) AS 합계금액  ");
            sb.AppendLine("  FROM F_BILL_INPUT B  ");
            sb.AppendLine("  left outer join N_CUST_CODE C  ");
            sb.AppendLine("  on C.CUST_CD = B.CUST_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("    ");
            sb.AppendLine("  union all   ");
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  '' AS 코드  ");
            sb.AppendLine("  ,2 AS 순서  ");
            sb.AppendLine("  ,B.BILL_DATE+' 일계' AS 매출처명  ");
            sb.AppendLine("  ,'' AS 사업자번호  ");
            sb.AppendLine("  ,B.BILL_DATE AS 발행일자  ");
            sb.AppendLine("  ,'일계' AS 발행일자2  ");
            sb.AppendLine("  ,'' AS 발행번호 ");
            sb.AppendLine("  ,'' AS 구분  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_SUPPLY_MONEY,0)),0) AS 공급가액  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_TAX_MONEY,0)),0) AS 부가세  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_TOTAL_MONEY,0)),0) AS 합계금액  ");
            sb.AppendLine("  FROM F_BILL_INPUT B  ");
            sb.AppendLine("  left outer join N_CUST_CODE C  ");
            sb.AppendLine("  on C.CUST_CD = B.CUST_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("  group by B.BILL_DATE  ");
            sb.AppendLine("    ");
            sb.AppendLine("  union all   ");
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  '' AS 코드  ");
            sb.AppendLine("  ,9 AS 순서  ");
            sb.AppendLine("  ,'합계' AS 매출처명  ");
            sb.AppendLine("  ,'' AS 사업자번호  ");
            sb.AppendLine("  ,'9999-99-99' AS 발행일자  ");
            sb.AppendLine("  ,'합계' AS 발행일자2  ");
            sb.AppendLine("  ,'' AS 발행번호  ");
            sb.AppendLine("  ,'' AS 구분  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_SUPPLY_MONEY,0)),0) AS 공급가액  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_TAX_MONEY,0)),0) AS 부가세  ");
            sb.AppendLine("  ,ISNULL(SUM(ISNULL(B.ALL_TOTAL_MONEY,0)),0) AS 합계금액  ");
            sb.AppendLine("  FROM F_BILL_INPUT B  ");
            sb.AppendLine("  left outer join N_CUST_CODE C  ");
            sb.AppendLine("  on C.CUST_CD = B.CUST_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("  order by B.BILL_DATE , 순서  ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_Bill_List_NotEscalation(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" A.SALES_DATE AS 매출일자 ");
            sb.AppendLine(" ,A.SALES_CD AS 번호 ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = B.CUST_CD) AS 매출처명 ");
            sb.AppendLine(" ,'제품' AS 상품구분 ");
            sb.AppendLine(" ,ITEM_CD AS 상품코드 ");
            sb.AppendLine(" ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS 상품명 ");
            sb.AppendLine(" ,(SELECT SPEC FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS 규격 ");
            sb.AppendLine(" , A.TOTAL_AMT AS 수량 ");
            sb.AppendLine(" , A.TOTAL_PRICE AS 단가 ");
            sb.AppendLine(" , A.TOTAL_AMT * A.TOTAL_PRICE AS 금액 ");
            sb.AppendLine(" from F_SALES_DETAIL A ");
            sb.AppendLine(" left outer join F_SALES B ");
            sb.AppendLine(" ON B.SALES_DATE = A.SALES_DATE ");
            sb.AppendLine(" and B.SALES_CD = A.SALES_CD ");
            sb.AppendLine(condition + " and (A.ESCALATION_YN = 'N' or A.ESCALATION_YN is null) ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Bill_to_Excel_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  ");

            sb.AppendLine("    SELECT    ");
            sb.AppendLine("    A.BILL_DATE AS BILL_DATE ");
            sb.AppendLine("    ,REPLACE(A.BILL_DATE,'-','')  AS 작성일자 ");
            sb.AppendLine("    ,A.BILL_CD    ");
            sb.AppendLine("    ,A.CUST_CD    ");
            sb.AppendLine("    ,A.ALL_TOTAL_MONEY     ");
            sb.AppendLine("    ,case when A.VAT_CD = '2' then '05'  ");
            sb.AppendLine("     else case when A.TAX_CD = '2' then '02' else '01' end end AS 계산서종류 ");
            sb.AppendLine("    ,(SELECT SAUP_NO FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "') AS 공급자등록번호 ");
            sb.AppendLine("    ,'' AS 공급자종사업장번호 ");
            sb.AppendLine("    ,(SELECT COMPANY_NM FROM [SM_FACTORY_COM].dbo.T_COMP_LOGIN where COM_SAUP_NO = '" + Common.p_saupNo + "') AS 공급자상호 ");
            sb.AppendLine("    ,(SELECT CEO_NAME FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "') AS 공급자성명 ");
            sb.AppendLine("    ,(SELECT ADDR+' '+ADDR2 FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "')  AS 공급자사업장주소 ");
            sb.AppendLine("    ,(SELECT UPTAE FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "') AS 공급자업태 ");
            sb.AppendLine("    ,(SELECT JONGMOK FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "') AS 공급자종목 ");
            sb.AppendLine("    ,(SELECT MANAGER_EMAIL FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '" + Common.p_saupNo + "') AS 공급자이메일 ");
            sb.AppendLine("    ,(SELECT REPLACE(SAUP_NO,'-','') FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자등록번호 ");
            sb.AppendLine("    ,'' AS 공급받는자종사업장번호 ");
            sb.AppendLine("    ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자상호 ");
            sb.AppendLine("    ,(SELECT OWNER FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자성명 ");
            sb.AppendLine("    ,(SELECT ADDR FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자사업장주소 ");
            sb.AppendLine("    ,(SELECT UPTAE FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자업태 ");
            sb.AppendLine("    ,(SELECT JONGMOK FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자종목 ");
            sb.AppendLine("    ,(SELECT CUST_EMAIL FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자이메일1 ");
            sb.AppendLine("    ,'' AS 공급받는자이메일2 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY  AS 공급가액 ");
            sb.AppendLine("    ,A.ALL_TAX_MONEY  AS 세액 ");
            sb.AppendLine("    ,'' AS 비고 ");
            sb.AppendLine("    ,SUBSTRING(REPLACE(A.BILL_DATE,'-',''),7,2) AS 일자1 ");
            sb.AppendLine("    ,A.PRINT_PRODUCT AS 품목1 ");
            sb.AppendLine("    ,'' AS 규격1 ");
            sb.AppendLine("    ,1 AS 수량1 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY AS 단가1 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY AS 공급가액1 ");
            sb.AppendLine("    ,A.ALL_TAX_MONEY AS 세액1 ");
            sb.AppendLine("    ,'' AS 품목비고1 ");
            sb.AppendLine("    ,'' AS 일자2 ");
            sb.AppendLine("    ,'' AS 품목2 ");
            sb.AppendLine("    ,'' AS 규격2 ");
            sb.AppendLine("    ,'' AS 수량2 ");
            sb.AppendLine("    ,'' AS 단가2 ");
            sb.AppendLine("    ,'' AS 공급가액2 ");
            sb.AppendLine("    ,'' AS 세액2 ");
            sb.AppendLine("    ,'' AS 품목비고2 ");
            sb.AppendLine("    ,'' AS 일자3 ");
            sb.AppendLine("    ,'' AS 품목3 ");
            sb.AppendLine("    ,'' AS 규격3 ");
            sb.AppendLine("    ,'' AS 수량3 ");
            sb.AppendLine("    ,'' AS 단가3 ");
            sb.AppendLine("    ,'' AS 공급가액3 ");
            sb.AppendLine("    ,'' AS 세액3 ");
            sb.AppendLine("    ,'' AS 품목비고3 ");
            sb.AppendLine("    ,'' AS 일자4 ");
            sb.AppendLine("    ,'' AS 품목4 ");
            sb.AppendLine("    ,'' AS 규격4 ");
            sb.AppendLine("    ,'' AS 수량4 ");
            sb.AppendLine("    ,'' AS 단가4 ");
            sb.AppendLine("    ,'' AS 공급가액4 ");
            sb.AppendLine("    ,'' AS 세액4 ");
            sb.AppendLine("    ,'' AS 품목비고4 ");
            sb.AppendLine("    ,'' AS 현금 ");
            sb.AppendLine("    ,'' AS 수표 ");
            sb.AppendLine("    ,'' AS 어음 ");
            sb.AppendLine("    ,'' AS 외상미수금 ");
            sb.AppendLine("    ,'01' AS 영수청구  ");
            sb.AppendLine("    FROM F_BILL_INPUT A    ");
            sb.AppendLine("    LEFT OUTER JOIN (SELECT COUNT(*) AS CNT, BILL_DATE, BILL_CD FROM F_BILL_DETAIL GROUP BY BILL_DATE, BILL_CD ) D  ");
            sb.AppendLine("    ON D.BILL_DATE = A.BILL_DATE  ");
            sb.AppendLine("    AND D.BILL_CD = A.BILL_CD  ");
            sb.AppendLine("    LEFT OUTER JOIN N_CUST_CODE C  ");
            sb.AppendLine("    ON A.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("    WHERE 1=1   ");
            sb.AppendLine(condition);
            sb.AppendLine("    ORDER BY A.BILL_DATE , A.BILL_CD    ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int Delete_Excel_Input(string input_date, string input_cd, DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    sb.AppendLine(" UPDATE F_BILL_INPUT SET ");
                    sb.AppendLine(" PUBLISH_YN = 'N'  ");
                    sb.AppendLine(" WHERE BILL_DATE = '" + dgv.Rows[i].Cells["BILL_DATE"].Value.ToString() + "' ");
                    sb.AppendLine(" and BILL_CD = '" + dgv.Rows[i].Cells["BILL_CD"].Value.ToString() + "' ");
                }
                sb.AppendLine(" DELETE FROM F_BILL_EXCEL  ");
                sb.AppendLine("where PUBLISH_DATE = '" + input_date + "' ");
                sb.AppendLine("and PUBLISH_CD = '" + input_cd + "' ");

                sb.AppendLine(" DELETE FROM F_BILL_EXCEL_DETAIL  ");
                sb.AppendLine("where PUBLISH_DATE = '" + input_date + "' ");
                sb.AppendLine("and PUBLISH_CD = '" + input_cd + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "Delete_Excel_input");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Select_Excel_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  ");
            sb.AppendLine("    SELECT    ");
            sb.AppendLine("    A.BILL_DATE AS BILL_DATE ");
            sb.AppendLine("    ,REPLACE(A.BILL_DATE,'-','')  AS 작성일자 ");
            sb.AppendLine("    ,A.BILL_CD    ");
            sb.AppendLine("    ,A.CUST_CD    ");
            sb.AppendLine("    ,A.ALL_TOTAL_MONEY     ");
            sb.AppendLine("    ,case when A.VAT_CD = '2' then '05'  ");
            sb.AppendLine("     else case when A.TAX_CD = '2' then '02' else '01' end end AS 계산서종류 ");
            sb.AppendLine("    ,(SELECT SAUP_NO FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"') AS 공급자등록번호 ");
            sb.AppendLine("    ,'' AS 공급자종사업장번호 ");
            sb.AppendLine("    ,(SELECT COMPANY_NM FROM [SM_FACTORY_COM].dbo.T_COMP_LOGIN where COM_SAUP_NO = '"+Common.p_saupNo+"') AS 공급자상호 ");
            sb.AppendLine("    ,(SELECT CEO_NAME FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"') AS 공급자성명 ");
            sb.AppendLine("    ,(SELECT ADDR+' '+ADDR2 FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"')  AS 공급자사업장주소 ");
            sb.AppendLine("    ,(SELECT UPTAE FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"') AS 공급자업태 ");
            sb.AppendLine("    ,(SELECT JONGMOK FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"') AS 공급자종목 ");
            sb.AppendLine("    ,(SELECT MANAGER_EMAIL FROM [SM_FACTORY_COM].dbo.T_SAUP_CODE where SAUP_NO = '"+Common.p_saupNo+"') AS 공급자이메일 ");
            sb.AppendLine("    ,(SELECT REPLACE(SAUP_NO,'-','') FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자등록번호 ");
            sb.AppendLine("    ,'' AS 공급받는자종사업장번호 ");
            sb.AppendLine("    ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자상호 ");
            sb.AppendLine("    ,(SELECT OWNER FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자성명 ");
            sb.AppendLine("    ,(SELECT ADDR FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자사업장주소 ");
            sb.AppendLine("    ,(SELECT UPTAE FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자업태 ");
            sb.AppendLine("    ,(SELECT JONGMOK FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자종목 ");
            sb.AppendLine("    ,(SELECT CUST_EMAIL FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS 공급받는자이메일1 ");
            sb.AppendLine("    ,'' AS 공급받는자이메일2 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY  AS 공급가액 ");
            sb.AppendLine("    ,A.ALL_TAX_MONEY  AS 세액 ");
            sb.AppendLine("    ,'' AS 비고 ");
            sb.AppendLine("    ,SUBSTRING(REPLACE(A.BILL_DATE,'-',''),7,2) AS 일자1 ");
            sb.AppendLine("    ,A.PRINT_PRODUCT AS 품목1 ");
            sb.AppendLine("    ,'' AS 규격1 ");
            sb.AppendLine("    ,1 AS 수량1 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY AS 단가1 ");
            sb.AppendLine("    ,A.ALL_SUPPLY_MONEY AS 공급가액1 ");
            sb.AppendLine("    ,A.ALL_TAX_MONEY AS 세액1 ");
            sb.AppendLine("    ,'' AS 품목비고1 ");
            sb.AppendLine("    ,'' AS 일자2 ");
            sb.AppendLine("    ,'' AS 품목2 ");
            sb.AppendLine("    ,'' AS 규격2 ");
            sb.AppendLine("    ,'' AS 수량2 ");
            sb.AppendLine("    ,'' AS 단가2 ");
            sb.AppendLine("    ,'' AS 공급가액2 ");
            sb.AppendLine("    ,'' AS 세액2 ");
            sb.AppendLine("    ,'' AS 품목비고2 ");
            sb.AppendLine("    ,'' AS 일자3 ");
            sb.AppendLine("    ,'' AS 품목3 ");
            sb.AppendLine("    ,'' AS 규격3 ");
            sb.AppendLine("    ,'' AS 수량3 ");
            sb.AppendLine("    ,'' AS 단가3 ");
            sb.AppendLine("    ,'' AS 공급가액3 ");
            sb.AppendLine("    ,'' AS 세액3 ");
            sb.AppendLine("    ,'' AS 품목비고3 ");
            sb.AppendLine("    ,'' AS 일자4 ");
            sb.AppendLine("    ,'' AS 품목4 ");
            sb.AppendLine("    ,'' AS 규격4 ");
            sb.AppendLine("    ,'' AS 수량4 ");
            sb.AppendLine("    ,'' AS 단가4 ");
            sb.AppendLine("    ,'' AS 공급가액4 ");
            sb.AppendLine("    ,'' AS 세액4 ");
            sb.AppendLine("    ,'' AS 품목비고4 ");
            sb.AppendLine("    ,'' AS 현금 ");
            sb.AppendLine("    ,'' AS 수표 ");
            sb.AppendLine("    ,'' AS 어음 ");
            sb.AppendLine("    ,'' AS 외상미수금 ");
            sb.AppendLine("    ,'01' AS 영수청구  ");
            sb.AppendLine("    FROM F_BILL_EXCEL_DETAIL X ");
            sb.AppendLine("    inner join F_BILL_INPUT A     ");
            sb.AppendLine("    on X.BILL_CD = A.BILL_CD ");
            sb.AppendLine("    and X.BILL_DATE = A.BILL_DATE ");
            sb.AppendLine("    LEFT OUTER JOIN (SELECT COUNT(*) AS CNT, BILL_DATE, BILL_CD FROM F_BILL_DETAIL GROUP BY BILL_DATE, BILL_CD ) D  ");
            sb.AppendLine("    ON D.BILL_DATE = A.BILL_DATE  ");
            sb.AppendLine("    AND D.BILL_CD = A.BILL_CD  ");
            sb.AppendLine("    LEFT OUTER JOIN N_CUST_CODE C  ");
            sb.AppendLine("    ON A.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("    WHERE 1=1   ");
            sb.AppendLine(condition);
            sb.AppendLine("    ORDER BY A.BILL_DATE , A.BILL_CD    ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Excel_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" SELECT PUBLISH_DATE ");
            sb.AppendLine(" ,PUBLISH_CD ");
            sb.AppendLine(" ,TITLE ");
            sb.AppendLine(" ,VAT_CD ");
            sb.AppendLine(" FROM F_BILL_EXCEL ");
            sb.AppendLine(" WHERE 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("    ORDER BY PUBLISH_DATE desc , PUBLISH_CD desc    ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_Excel_input(string input_date, string excel_title, string vat_gubun, DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("declare @cd int ");
                sb.AppendLine("select @cd =ISNULL(MAX(PUBLISH_CD),0)+1 from F_BILL_EXCEL ");
                sb.AppendLine("where PUBLISH_DATE = '" + input_date + "' ");

                sb.AppendLine(" INSERT F_BILL_EXCEL ( ");
                sb.AppendLine(" PUBLISH_DATE ");
                sb.AppendLine(" ,PUBLISH_CD ");
                sb.AppendLine(" ,TITLE ");
                sb.AppendLine(" ,VAT_CD ");
                sb.AppendLine(" ,INTIME ");
                sb.AppendLine(" ,INSTAFF ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine(" '" + input_date + "' ");
                sb.AppendLine(" ,@cd ");
                sb.AppendLine(" ,'" + excel_title + "' ");
                sb.AppendLine(" ,'" + vat_gubun + "' ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_BILL_EXCEL_DETAIL ");
                    sb.AppendLine("where PUBLISH_DATE = '" + input_date + "' and PUBLISH_CD = @cd ");

                    sb.AppendLine(" INSERT F_BILL_EXCEL_DETAIL ( ");
                    sb.AppendLine(" PUBLISH_DATE ");
                    sb.AppendLine(" ,PUBLISH_CD ");
                    sb.AppendLine(" ,SEQ ");
                    sb.AppendLine(" ,BILL_DATE ");
                    sb.AppendLine(" ,BILL_CD ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine(" '" + input_date + "' ");
                    sb.AppendLine(" ,@cd ");
                    sb.AppendLine(" ,@seq" + i + " ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["BILL_DATE"].Value.ToString() + "' ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["BILL_CD"].Value.ToString() + "' ");
                    sb.AppendLine(" ) ");

                    sb.AppendLine(" UPDATE F_BILL_INPUT SET ");
                    sb.AppendLine(" PUBLISH_YN = 'Y' ");
                    sb.AppendLine(" WHERE BILL_DATE = '" + dgv.Rows[i].Cells["BILL_DATE"].Value.ToString() + "' and BILL_CD = '" + dgv.Rows[i].Cells["BILL_CD"].Value.ToString() + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_Excel_input");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Update_Excel_input(string input_date, string input_cd, string new_title)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" UPDATE F_BILL_EXCEL SET ");
                sb.AppendLine(" TITLE = '" + new_title + "' ");
                sb.AppendLine("where PUBLISH_DATE = '" + input_date + "' ");
                sb.AppendLine("and PUBLISH_CD = '" + input_cd + "' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_Excel_input");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int OutDelete(
            string dtp_outdate,
            string txt_num
            )
        {

            try
            {

                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("DELETE FROM F_PAY ");
                sb.AppendLine("    WHERE PAY_CD = '" + txt_num + "'  ");
                sb.AppendLine("    AND PAY_DATE = '" + dtp_outdate + "'  ");


                sb.AppendLine("DELETE FROM F_PAY_DETAIL ");
                sb.AppendLine("    WHERE PAY_CD = '" + txt_num + "'  ");
                sb.AppendLine("    AND PAY_DATE = '" + dtp_outdate + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_PAY_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else
                    return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 1;
            }
        }

        public int OutInsert(
            string outdate,
            string txt_comment,
            string staff_cd,
            DataGridView dgv_main
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine("Select * from F_HACCP_DOCS ");
                //sb.AppendLine("     WHERE DOCPATH = '" + destFile + "' and STAFF_CD = '" + staff_cd + "'  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 1;
                }

                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                sb = new StringBuilder();

                sb.AppendLine("DECLARE @PAY_CD INT ");
                sb.AppendLine("SELECT @PAY_CD = ISNULL(MAX(PAY_CD),0)+1 FROM F_PAY ");
                sb.AppendLine(" WHERE PAY_DATE = '" + outdate + "'   ");




                sb.AppendLine("INSERT INTO F_PAY( ");
                sb.AppendLine("PAY_DATE  ");
                sb.AppendLine(",PAY_CD  ");
                sb.AppendLine(",STAFF_CD  ");
                sb.AppendLine(",COMMENT  ");
                sb.AppendLine(",INSTAFF  ");
                sb.AppendLine(",INTIME  ");
                sb.AppendLine(") VALUES (  ");
                sb.AppendLine("'" + outdate + "'  ");
                sb.AppendLine(",@PAY_CD  ");
                sb.AppendLine(", '" + staff_cd + "' ");
                sb.AppendLine(", '" + txt_comment + "' ");
                sb.AppendLine(", '" + Common.p_strStaffNo + "'  ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < dgv_main.Rows.Count; i++)
                {
                    string mjukyo = "";
                    string mmoney = "";
                    string mid = "";
                    string mgubun = "";
                    if (dgv_main.Rows[i].Cells["JUKYO"].Value == null)
                    {
                        mjukyo = "";
                    }
                    else
                    {
                        mjukyo = dgv_main.Rows[i].Cells["JUKYO"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["MONEY"].Value == null)
                    {
                        mmoney = "";
                    }
                    else
                    {
                        mmoney = dgv_main.Rows[i].Cells["MONEY"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["ID"].Value == null)
                    {
                        mid = "";
                    }
                    else
                    {
                        mid = dgv_main.Rows[i].Cells["ID"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["GUBUN"].Value == null)
                    {
                        mgubun = "";
                    }
                    else
                    {
                        mgubun = dgv_main.Rows[i].Cells["GUBUN"].Value.ToString();
                    }


                    if (mid != "")
                    {
                        sb.AppendLine("DECLARE @SEQ" + i + " INT ");
                        sb.AppendLine("SELECT @SEQ" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_PAY_DETAIL ");
                        sb.AppendLine(" WHERE PAY_DATE = '" + outdate + "'   ");
                        sb.AppendLine(" AND PAY_CD = @PAY_CD   ");



                        sb.AppendLine("INSERT INTO F_PAY_DETAIL( ");
                        sb.AppendLine("PAY_DATE ");
                        sb.AppendLine(",PAY_CD ");
                        sb.AppendLine(",SEQ ");
                        sb.AppendLine(",ACCU_CD ");
                        sb.AppendLine(",JUKYO ");
                        sb.AppendLine(",MONEY ");
                        sb.AppendLine(",PAY_GUBUN ");
                        sb.AppendLine(",INSTAFF ");
                        sb.AppendLine(",INTIME ");
                        sb.AppendLine(") VALUES ( ");
                        sb.AppendLine("'" + outdate + "' ");
                        sb.AppendLine(",@PAY_CD ");
                        sb.AppendLine(",@SEQ" + i + "");
                        sb.AppendLine(",'" + mid + "' ");
                        sb.AppendLine(",'" + mjukyo + "' ");
                        sb.AppendLine(",'" + mmoney.Replace(",", "") + "' ");
                        sb.AppendLine(",'" + mgubun.Replace(",", "") + "' ");
                        sb.AppendLine(",'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert raw_chk");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }


        public DataTable OutMainSelect(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT A.* ");
            sb.AppendLine("     ,G.ACCU_NM     ");
            sb.AppendLine("     ,A.PAY_GUBUN     ");
            sb.AppendLine(" FROM F_PAY_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ACCOUNT_CODE G ON G.ACCU_CD = A.ACCU_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_PAY B ON B.PAY_DATE = A.PAY_DATE AND B.PAY_CD = A.PAY_CD ");
            sb.AppendLine(condition);


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable OutSrchSelect(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("      SELECT A.* ");
            sb.AppendLine("    , F.STAFF_NM   ");
            sb.AppendLine("    , B.ITEM_CNT    ");
            sb.AppendLine("    , B.TOTAL_MONEY   ");
            sb.AppendLine("     FROM F_PAY A   ");
            sb.AppendLine("      INNER JOIN N_STAFF_CODE F  ");
            sb.AppendLine("      ON F.STAFF_CD = A.STAFF_CD     ");
            sb.AppendLine("      LEFT OUTER JOIN (SELECT  ");
            sb.AppendLine("   		PAY_DATE ");
            sb.AppendLine("   		, PAY_CD ");
            sb.AppendLine("   		, COUNT(*) AS ITEM_CNT ");
            sb.AppendLine("   		, ISNULL(SUM(MONEY),0) AS TOTAL_MONEY     ");
            sb.AppendLine("   		FROM F_PAY_DETAIL  ");
            sb.AppendLine("   GROUP BY PAY_DATE, PAY_CD) B  ");
            sb.AppendLine("   ON B.PAY_DATE = A.PAY_DATE AND B.PAY_CD = A.PAY_CD  ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int OutUpdate(
            string outdate,
            string outcd,
            string txt_instaff,
            string txt_comment,
            DataGridView dgv_main,
            DataTable delGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("UPDATE  F_PAY SET  ");
                sb.AppendLine("COMMENT  = '" + txt_comment + "'  ");
                sb.AppendLine(",UPSTAFF  = '" + Common.p_strStaffNo + "'  ");
                sb.AppendLine(",UPTIME  = convert(varchar, getdate(), 120)   ");

                sb.AppendLine(" WHERE  PAY_DATE ='" + outdate + "'  ");
                sb.AppendLine(" and  PAY_CD ='" + outcd + "'  ");


                for (int i = 0; i < dgv_main.Rows.Count; i++)
                {
                    string mjukyo = "";
                    string mmoney = "";
                    string mid = "";
                    string mgubun = "";
                    if (dgv_main.Rows[i].Cells["JUKYO"].Value == null)
                    {
                        mjukyo = "";
                    }
                    else
                    {
                        mjukyo = dgv_main.Rows[i].Cells["JUKYO"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["MONEY"].Value == null)
                    {
                        mmoney = "";
                    }
                    else
                    {
                        mmoney = dgv_main.Rows[i].Cells["MONEY"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["ID"].Value == null)
                    {
                        mid = "";
                    }
                    else
                    {
                        mid = dgv_main.Rows[i].Cells["ID"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["GUBUN"].Value == null)
                    {
                        mgubun = "";
                    }
                    else
                    {
                        mgubun = dgv_main.Rows[i].Cells["GUBUN"].Value.ToString();
                    }

                    if (dgv_main.Rows[i].Cells["MAIN_SEQ"].Value != null && !dgv_main.Rows[i].Cells["MAIN_SEQ"].Value.ToString().Equals(""))
                    {
                        sb.AppendLine("UPDATE F_PAY_DETAIL SET ");
                        //sb.AppendLine("     PAY_DATE   = @STAFF_CD ");
                        //sb.AppendLine("     ,SEQ     = @STAFF_NM ");
                        sb.AppendLine("      ACCU_CD = '" + mid + "' ");
                        sb.AppendLine("     ,JUKYO  = '" + mjukyo + "'");
                        sb.AppendLine("     ,MONEY  = '" + mmoney.Replace(",", "") + "'");
                        sb.AppendLine("     ,UPSTAFF  = '" + Common.p_strStaffNo + "'");
                        sb.AppendLine("     ,UPTIME  = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" WHERE PAY_DATE = '" + outdate + "' ");
                        sb.AppendLine(" AND PAY_CD = '" + outcd + "'");
                        sb.AppendLine(" AND SEQ = '" + dgv_main.Rows[i].Cells["MAIN_SEQ"].Value + "'");

                    }

                    else
                    {



                        sb.AppendLine("DECLARE @SEQ" + i + " INT ");
                        sb.AppendLine("SELECT @SEQ" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_PAY_DETAIL ");
                        sb.AppendLine(" WHERE PAY_DATE = '" + outdate + "'   ");
                        sb.AppendLine(" and PAY_CD = '" + outcd + "'   ");

                        sb.AppendLine("INSERT INTO F_PAY_DETAIL( ");
                        sb.AppendLine("PAY_DATE ");
                        sb.AppendLine(",PAY_CD ");
                        sb.AppendLine(",SEQ ");
                        sb.AppendLine(",ACCU_CD ");
                        sb.AppendLine(",JUKYO ");
                        sb.AppendLine(",MONEY ");
                        sb.AppendLine(",PAY_GUBUN ");
                        sb.AppendLine(",INSTAFF ");
                        sb.AppendLine(",INTIME ");
                        sb.AppendLine(") VALUES ( ");
                        sb.AppendLine("'" + outdate + "' ");
                        sb.AppendLine(", '" + outcd + "' ");
                        sb.AppendLine(",@SEQ" + i + "");
                        sb.AppendLine(",'" + mid + "' ");
                        //sb.AppendLine(",'" + mgubun + "' ");
                        sb.AppendLine(",'" + mjukyo.Replace(",", "") + "' ");
                        sb.AppendLine(",'" + mmoney.Replace(",", "") + "' ");
                        sb.AppendLine(",'" + mgubun + "' ");
                        sb.AppendLine(",'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                    }
                    //sb.AppendLine(" AND SEQ = '" + dgv_srch.Rows[i].Cells["SEQ"].Value + "'");                                        
                }


                for (int i = 0; i < delGrid.Rows.Count; i++)
                {

                    sb.AppendLine("DELETE FROM F_PAY_DETAIL  ");
                    sb.AppendLine(" WHERE ");
                    sb.AppendLine(" PAY_DATE = '" + delGrid.Rows[i]["PAY_DATE"].ToString() + "'  ");
                    sb.AppendLine(" AND PAY_CD = '" + delGrid.Rows[i]["PAY_CD"].ToString() + "'  ");
                    sb.AppendLine(" AND SEQ = '" + delGrid.Rows[i]["SEQ"].ToString() + "'  ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_STOCK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Pay_Ledger_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   select A.PAY_DATE  ");
            sb.AppendLine("   ,A.PAY_DATE AS '일자명칭'  ");
            sb.AppendLine("   , A.PAY_CD  ");
            sb.AppendLine("   , A.STAFF_CD  ");
            sb.AppendLine("   , D.SEQ  ");
            sb.AppendLine("   , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM  ");
            sb.AppendLine("   , D.ACCU_CD  ");
            sb.AppendLine("   , (SELECT ACCU_NM FROM N_ACCOUNT_CODE WHERE D.ACCU_CD = ACCU_CD) AS ACCU_NM  ");
            sb.AppendLine("   , D.JUKYO  ");
            sb.AppendLine("   , ISNULL(D.MONEY,0) AS MONEY  ");
            sb.AppendLine("   , (SELECT S_CODE_NM FROM T_S_CODE where L_CODE ='1200' AND S_CODE = D.PAY_GUBUN) AS PAY_GUBUN  ");
            sb.AppendLine("   FROM F_PAY A   ");
            sb.AppendLine("   left outer join F_PAY_DETAIL D  ");
            sb.AppendLine("   on D.PAY_DATE = A.PAY_DATE  ");
            sb.AppendLine("   AND D.PAY_CD = A.PAY_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("   union all   ");
            sb.AppendLine("   select  ");
            sb.AppendLine("   O.PAY_DATE  ");
            sb.AppendLine("   ,'----- 소계 -----' AS '일자명칭'  ");
            sb.AppendLine("   , '999' AS PAY_CD  ");
            sb.AppendLine("   , O.STAFF_CD AS STAFF_CD  ");
            sb.AppendLine("   , '999'  ");
            sb.AppendLine("   , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = O.STAFF_CD) AS STAFF_NM  ");
            sb.AppendLine("   , O.ACCU_CD  ");
            sb.AppendLine("   , (SELECT ACCU_NM FROM N_ACCOUNT_CODE WHERE O.ACCU_CD = ACCU_CD) AS ACCU_NM  ");
            sb.AppendLine("   , '' AS JUKYO  ");
            sb.AppendLine("   , O.MONEY  ");
            sb.AppendLine("   , '' AS PAY_GUBUN  ");
            sb.AppendLine("   FROM (SELECT   ");
            sb.AppendLine("   MAX(A.PAY_DATE) AS PAY_DATE  ");
            sb.AppendLine("   ,MAX(A.PAY_CD) AS PAY_CD  ");
            sb.AppendLine("   ,MAX(D.SEQ) AS SEQ  ");
            sb.AppendLine("   ,STAFF_CD  ");
            sb.AppendLine("   ,ACCU_CD  ");
            sb.AppendLine("   ,ISNULL(SUM(MONEY),0) AS MONEY  ");
            sb.AppendLine("   FROM F_PAY A   ");
            sb.AppendLine("   left outer join F_PAY_DETAIL D  ");
            sb.AppendLine("   on D.PAY_DATE = A.PAY_DATE  ");
            sb.AppendLine("   AND D.PAY_CD = A.PAY_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("   group by STAFF_CD, ACCU_CD  ");
            sb.AppendLine("   ) O  ");
            sb.AppendLine("   union all   ");
            sb.AppendLine("   select  ");
            sb.AppendLine("   O.PAY_DATE  ");
            sb.AppendLine("   ,'==== 합계 ====' AS '일자명칭'  ");
            sb.AppendLine("   , '999' AS PAY_CD  ");
            sb.AppendLine("   , '' AS STAFF_CD  ");
            sb.AppendLine("   , '999'  ");
            sb.AppendLine("   , '' AS STAFF_NM  ");
            sb.AppendLine("   , '' AS ACCU_CD  ");
            sb.AppendLine("   , '' AS ACCU_NM  ");
            sb.AppendLine("   , '' AS JUKYO  ");
            sb.AppendLine("   , O.MONEY  ");
            sb.AppendLine("   , '' AS PAY_GUBUN  ");
            sb.AppendLine("   FROM (SELECT   ");
            sb.AppendLine("   '9999-99-99' AS PAY_DATE  ");
            sb.AppendLine("   ,MAX(A.PAY_CD) AS PAY_CD  ");
            sb.AppendLine("   ,MAX(D.SEQ) AS SEQ  ");
            sb.AppendLine("   ,ISNULL(SUM(MONEY),0) AS MONEY  ");
            sb.AppendLine("   FROM F_PAY A   ");
            sb.AppendLine("   left outer join F_PAY_DETAIL D  ");
            sb.AppendLine("   on D.PAY_DATE = A.PAY_DATE  ");
            sb.AppendLine("   AND D.PAY_CD = A.PAY_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine("   ) O  ");
            sb.AppendLine("   order by PAY_DATE,STAFF_CD,PAY_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }



        public int insertPoor(string poor_nm, string poor_gubun, string comment)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                if (poor_gubun.Equals("2"))
                {
                    sb.AppendLine(" declare @MAX int ");
                    sb.AppendLine(" declare @newKey nvarchar(10) ");
                    sb.AppendLine(" select @MAX = ISNULL(MAX(substring(POOR_CD,3,3)),0)+1 from N_POOR_CODE ");
                    sb.AppendLine(" where POOR_GUBUN = '2' ");
                    sb.AppendLine(" select @newKey = 'P-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");

                    sb.AppendLine("insert into N_POOR_CODE(");
                    sb.AppendLine("     POOR_GUBUN ");
                    sb.AppendLine("     ,POOR_CD ");
                    sb.AppendLine("     ,POOR_NM ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + poor_gubun + "' ");
                    sb.AppendLine("  ,@newKey ");
                    sb.AppendLine("  ,'" + poor_nm + "' ");
                    sb.AppendLine("  ,'" + comment + "' ");
                    sb.AppendLine(" ) ");
                }
                else
                {
                    sb.AppendLine(" declare @MAX int ");
                    sb.AppendLine(" declare @newKey nvarchar(10) ");
                    sb.AppendLine(" select @MAX = ISNULL(MAX(substring(POOR_CD,3,3)),0)+1 from N_POOR_CODE ");
                    sb.AppendLine(" where POOR_GUBUN = '1' ");
                    sb.AppendLine(" select @newKey = 'R-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");

                    sb.AppendLine("insert into N_POOR_CODE(");
                    sb.AppendLine("     POOR_GUBUN ");
                    sb.AppendLine("     ,POOR_CD ");
                    sb.AppendLine("     ,POOR_NM ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + poor_gubun + "' ");
                    sb.AppendLine("  ,@newKey ");
                    sb.AppendLine("  ,'" + poor_nm + "' ");
                    sb.AppendLine("  ,'" + comment + "' ");
                    sb.AppendLine(" ) ");
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POOR_CODE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int deletePoor(string poor_cd, string chk_gbn)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("delete from N_POOR_CODE ");
                sb.AppendLine("   WHERE POOR_CD = '" + poor_cd + "' and POOR_GUBUN = '" + chk_gbn + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POOR_CODE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Poor_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   select A.POOR_CD  ");
            sb.AppendLine("   ,A.POOR_NM  ");
            sb.AppendLine("   ,A.POOR_GUBUN  ");
            sb.AppendLine("   ,A.COMMENT  ");
            sb.AppendLine("   ,case when A.POOR_GUBUN = 1 then '원자재 수입' ELSE '공정' end as POOR_GUBUN_NM  ");
            sb.AppendLine("  FROM N_POOR_CODE A  ");
            sb.AppendLine(condition);
            sb.AppendLine("   order by A.POOR_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertRawChk_Stan(string chk_nm, string pass_value, string chk_tool, string chk_time, string poor_cd)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("  declare @MAX int  ");
                sb.AppendLine("  declare @newValue nvarchar(10) ");
                sb.AppendLine("  select @MAX = ISNULL(MAX(substring(CHK_CD,4,3)),0)+1 from N_RAW_CHK_STAN ");
                sb.AppendLine("  select @newValue = 'RC-'+ RIGHT('000'+CONVERT(nvarchar,@MAX),3) ");

                sb.AppendLine(" INSERT INTO N_RAW_CHK_STAN ( ");
                sb.AppendLine(" CHK_CD ");
                sb.AppendLine(" ,CHK_NM");
                sb.AppendLine(" ,PASS_VALUE");
                sb.AppendLine(" ,CHK_TOOL");
                sb.AppendLine(" ,CHK_TIME");
                sb.AppendLine(" ,POOR_CD");
                sb.AppendLine(" ,INTIME");
                sb.AppendLine(" ,INSTAFF");
                sb.AppendLine(" ) VALUES ( ");
                sb.AppendLine("  @newValue ");
                sb.AppendLine("  ,'" + chk_nm + "' ");
                sb.AppendLine("  ,'" + pass_value + "' ");
                sb.AppendLine("  ,'" + chk_tool + "' ");
                sb.AppendLine("  ,'" + chk_time + "' ");
                sb.AppendLine("  ,'" + poor_cd + "' ");
                sb.AppendLine("  ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("  ,'" + Common.p_strStaffNo + "'  ");
                sb.AppendLine("  )  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_raw_chk_stan");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int updateRawChk_Stan(string chk_cd, string chk_nm, string pass_value, string chk_tool, string chk_time, string poor_cd)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" UPDATE N_RAW_CHK_STAN SET ");
                sb.AppendLine(" CHK_NM     =  '" + chk_nm + "' ");
                sb.AppendLine(" ,PASS_VALUE =  '" + pass_value + "' ");
                sb.AppendLine(" ,CHK_TOOL   =  '" + chk_tool + "' ");
                sb.AppendLine(" ,CHK_TIME   =  '" + chk_time + "' ");
                sb.AppendLine(" ,POOR_CD    =  '" + poor_cd + "' ");
                sb.AppendLine(" ,UPTIME     =  convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,UPSTAFF    =  '" + Common.p_strStaffNo + "'  ");
                sb.AppendLine("  WHERE CHK_CD = '" + chk_cd + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_raw_chk_stan");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_RawChkStan_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("   select   ");
            sb.AppendLine("  A.CHK_CD   ");
            sb.AppendLine("  ,A.CHK_NM  ");
            sb.AppendLine("  ,A.PASS_VALUE  ");
            sb.AppendLine("  ,A.CHK_TOOL  ");
            sb.AppendLine("  ,A.CHK_TIME  ");
            sb.AppendLine("  ,A.POOR_CD  ");
            sb.AppendLine("  ,(SELECT POOR_NM FROM N_POOR_CODE WHERE POOR_CD = A.POOR_CD) AS POOR_NM  ");
            sb.AppendLine("  FROM N_RAW_CHK_STAN A  ");
            sb.AppendLine(condition);
            sb.AppendLine("   order by A.CHK_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int delete_RawChk_Stan(string chk_cd)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" DELETE FROM N_RAW_CHK_STAN  ");
                sb.AppendLine("  WHERE CHK_CD = '" + chk_cd + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_raw_chk_stan");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }

        public int Insert_raw_chk(
            string input_date
            , string input_cd
            , string input_seq
            , string input_amt
            , string chk_date
            , string pass_amt
            , string non_pass_amt
            , string pass_yn
            , conDataGridView dgv
            )
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("  ");
                sb.AppendLine(" INSERT INTO F_RAW_CHK (   ");
                sb.AppendLine(" INPUT_DATE                  ");
                sb.AppendLine(" ,INPUT_CD                  ");
                sb.AppendLine(" ,SEQ                  ");
                sb.AppendLine(" ,RAW_MAT_CD                  ");
                sb.AppendLine(" ,CHK_DATE                  ");
                sb.AppendLine(" ,CHK_AMT                  ");
                sb.AppendLine(" ,PASS_AMT                 ");
                sb.AppendLine(" ,NON_PASS_AMT             ");
                sb.AppendLine(" ,PASS_YN                  ");
                sb.AppendLine(" ,INSTAFF                  ");
                sb.AppendLine(" ,INTIME                   ");
                sb.AppendLine(" ) SELECT      ");
                sb.AppendLine(" INPUT_DATE  ");
                sb.AppendLine(" ,INPUT_CD   ");
                sb.AppendLine(" ,SEQ    ");
                sb.AppendLine(" ,RAW_MAT_CD   ");
                sb.AppendLine(" ,'" + chk_date + "'   ");
                sb.AppendLine(" ," + input_amt.Replace(",", "") + "   ");
                sb.AppendLine(" ," + pass_amt.Replace(",", "") + "   ");
                sb.AppendLine(" ," + non_pass_amt.Replace(",", "") + "    ");
                sb.AppendLine(" ,'" + pass_yn + "'   ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" FROM F_RAW_DETAIL         ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'     ");

                sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                sb.AppendLine(" CHECK_YN = 'Y' ");
                sb.AppendLine(" ,TOTAL_AMT = TEMP_AMT ");
                sb.AppendLine(" ,CURR_AMT = TEMP_AMT ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'     ");

                sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                sb.AppendLine(" BAL_STOCK = BAL_STOCK + (SELECT TEMP_AMT FROM F_RAW_DETAIL WHERE  ");
                sb.AppendLine(" INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'  )   ");
                sb.AppendLine(" WHERE RAW_MAT_CD = (SELECT RAW_MAT_CD FROM F_RAW_DETAIL WHERE   ");
                sb.AppendLine(" INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'  )   ");

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    if (dgv.Rows[i].Cells[1].Tag == null) continue;

                    sb.AppendLine(" declare @seq" + i + " int ");
                    sb.AppendLine(" select @seq" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_RAW_CHK_DETAIL ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and INPUT_SEQ = '" + input_seq + "'     ");

                    sb.AppendLine(" INSERT INTO F_RAW_CHK_DETAIL ( ");
                    sb.AppendLine(" INPUT_DATE ");
                    sb.AppendLine(" ,INPUT_CD ");
                    sb.AppendLine(" ,INPUT_SEQ ");
                    sb.AppendLine(" ,SEQ ");
                    sb.AppendLine(" ,CHK_CD ");
                    sb.AppendLine(" ,CHK_AMT ");
                    sb.AppendLine(" ,PASS_YN ");
                    sb.AppendLine(" ,ADD_PRINT_YN ");
                    sb.AppendLine(" ,COMMENT ");
                    sb.AppendLine(" ) VALUES ( ");
                    sb.AppendLine(" '" + input_date + "' ");
                    sb.AppendLine(" ,'" + input_cd + "' ");
                    sb.AppendLine(" ,'" + input_seq + "' ");
                    sb.AppendLine(" ,@seq" + i + " ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells[1].Tag.ToString() + "' ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["CHK_AMT"].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine(" ,'" + (dgv.Rows[i].Cells["PASS_YN"].Value == null || (bool)dgv.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                    sb.AppendLine(" ,'" + (dgv.Rows[i].Cells["ADD_PRINT"].Value == null || (bool)dgv.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                    sb.AppendLine(" ) ");
                }



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_raw_Chk");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }


        }

        public DataTable fn_raw_input_with_complete_Chk(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.INPUT_DATE");
            sb.AppendLine(" ,A.INPUT_CD");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.CHECK_YN");
            sb.AppendLine(" ,A.RAW_MAT_CD");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE RAW_MAT_CD = A.RAW_MAT_CD) AS RAW_MAT_NM ");
            sb.AppendLine(" ,(SELECT SPEC FROM N_RAW_CODE WHERE RAW_MAT_CD = A.RAW_MAT_CD) AS SPEC ");
            sb.AppendLine(" ,C.CUST_CD ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE C.CUST_CD = CUST_CD ) AS CUST_NM ");
            sb.AppendLine(" ,A.TEMP_AMT");
            sb.AppendLine(" ,B.CHK_DATE");
            sb.AppendLine(" ,B.CHK_AMT ");
            sb.AppendLine(" ,B.PASS_AMT");
            sb.AppendLine(" ,B.NON_PASS_AMT");
            sb.AppendLine(" ,B.PASS_YN ");
            sb.AppendLine(" ,B.INSTAFF");
            sb.AppendLine(" ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = B.INSTAFF) AS STAFF_NM");
            sb.AppendLine(" FROM F_RAW_DETAIL A");
            sb.AppendLine(" inner join F_RAW_CHK B ");
            sb.AppendLine(" on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = B.INPUT_CD");
            sb.AppendLine(" and A.SEQ = B.SEQ");
            sb.AppendLine(" left outer join F_RAW_INPUT C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");
            sb.AppendLine(" where 1=1");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.INPUT_DATE desc , A.INPUT_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_select_raw_chk_detail(string input_date, string input_cd, string input_seq)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select ");
            sb.AppendLine(" A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.CHK_CD ");
            sb.AppendLine(" ,(SELECT CHK_NM FROM N_RAW_CHK_STAN WHERE A.CHK_CD = CHK_CD) AS CHK_NM ");
            sb.AppendLine(" ,A.CHK_AMT ");
            sb.AppendLine(" ,A.PASS_YN ");
            sb.AppendLine(" ,A.ADD_PRINT_YN ");
            sb.AppendLine(" ,A.COMMENT ");
            sb.AppendLine(" ,N.PASS_VALUE ");
            sb.AppendLine(" ,N.CHK_TOOL ");
            sb.AppendLine(" ,N.CHK_TIME ");
            sb.AppendLine(" ,N.POOR_CD ");
            sb.AppendLine(" ,(SELECT POOR_NM FROM N_POOR_CODE WHERE POOR_CD = N.POOR_CD) AS POOR_NM ");
            sb.AppendLine(" FROM F_RAW_CHK_DETAIL A ");
            sb.AppendLine(" left outer join N_RAW_CHK_STAN N ");
            sb.AppendLine(" on N.CHK_CD = A.CHK_CD ");
            sb.AppendLine(" WHERE A.INPUT_DATE = '" + input_date + "' AND A.INPUT_CD = '" + input_cd + "' AND A.INPUT_SEQ = '" + input_seq + "' ");
            sb.AppendLine(" order by A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        internal int Update_raw_chk(
            string input_date
            , string input_cd
            , string input_seq
            , string input_amt
            , string chk_date
            , string pass_amt
            , string non_pass_amt
            , string pass_yn
            , conDataGridView dgv
            , string input_gubun
            )
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                if (input_gubun.Equals("Y"))
                {
                    sb.AppendLine(" delete from F_RAW_CHK ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' AND SEQ = '" + input_seq + "' ");

                    sb.AppendLine(" delete from F_RAW_CHK_DETAIL ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' AND INPUT_SEQ = '" + input_seq + "' ");
                }

                sb.AppendLine(" INSERT INTO F_RAW_CHK (   ");
                sb.AppendLine(" INPUT_DATE                  ");
                sb.AppendLine(" ,INPUT_CD                  ");
                sb.AppendLine(" ,SEQ                  ");
                sb.AppendLine(" ,RAW_MAT_CD                  ");
                sb.AppendLine(" ,CHK_DATE                  ");
                sb.AppendLine(" ,CHK_AMT                  ");
                sb.AppendLine(" ,PASS_AMT                 ");
                sb.AppendLine(" ,NON_PASS_AMT             ");
                sb.AppendLine(" ,PASS_YN                  ");
                sb.AppendLine(" ,INSTAFF                  ");
                sb.AppendLine(" ,INTIME                   ");
                sb.AppendLine(" ) SELECT      ");
                sb.AppendLine(" INPUT_DATE  ");
                sb.AppendLine(" ,INPUT_CD   ");
                sb.AppendLine(" ,SEQ    ");
                sb.AppendLine(" ,RAW_MAT_CD   ");
                sb.AppendLine(" ,'" + chk_date + "'   ");
                sb.AppendLine(" ," + input_amt.Replace(",", "") + "   ");
                sb.AppendLine(" ," + pass_amt.Replace(",", "") + "   ");
                sb.AppendLine(" ," + non_pass_amt.Replace(",", "") + "    ");
                sb.AppendLine(" ,'" + pass_yn + "'   ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" FROM F_RAW_DETAIL         ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'     ");

                if (input_gubun.Equals("P"))
                {
                    sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                    sb.AppendLine(" CHECK_YN = 'Y' ");
                    sb.AppendLine(" ,TOTAL_AMT = TEMP_AMT ");
                    sb.AppendLine(" ,CURR_AMT = TEMP_AMT ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and SEQ = '" + input_seq + "'     ");
                }


                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    if (dgv.Rows[i].Cells[1].Tag == null) continue;

                    sb.AppendLine(" declare @seq" + i + " int ");
                    sb.AppendLine(" select @seq" + i + " = ISNULL(MAX(SEQ),0)+1 FROM F_RAW_CHK_DETAIL ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "' and INPUT_CD = '" + input_cd + "' and INPUT_SEQ = '" + input_seq + "'     ");

                    sb.AppendLine(" INSERT INTO F_RAW_CHK_DETAIL ( ");
                    sb.AppendLine(" INPUT_DATE ");
                    sb.AppendLine(" ,INPUT_CD ");
                    sb.AppendLine(" ,INPUT_SEQ ");
                    sb.AppendLine(" ,SEQ ");
                    sb.AppendLine(" ,CHK_CD ");
                    sb.AppendLine(" ,CHK_AMT ");
                    sb.AppendLine(" ,PASS_YN ");
                    sb.AppendLine(" ,ADD_PRINT_YN ");
                    sb.AppendLine(" ,COMMENT ");
                    sb.AppendLine(" ) VALUES ( ");
                    sb.AppendLine(" '" + input_date + "' ");
                    sb.AppendLine(" ,'" + input_cd + "' ");
                    sb.AppendLine(" ,'" + input_seq + "' ");
                    sb.AppendLine(" ,@seq" + i + " ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells[1].Tag.ToString() + "' ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["CHK_AMT"].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine(" ,'" + (dgv.Rows[i].Cells["PASS_YN"].Value == null || (bool)dgv.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                    sb.AppendLine(" ,'" + (dgv.Rows[i].Cells["ADD_PRINT"].Value == null || (bool)dgv.Rows[i].Cells["PASS_YN"].Value == false ? "N" : "Y") + "' ");
                    sb.AppendLine(" ,'" + dgv.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                    sb.AppendLine(" ) ");
                }



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_raw_Chk");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public DataTable fn_flow_poor_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  SELECT               ");
            sb.AppendLine("  A.LOT_NO ,                       ");
            sb.AppendLine("  A.LOT_SUB ,                      ");
            sb.AppendLine("  A.F_STEP,                        ");
            sb.AppendLine("  A.POOR_CD AS 불량코드,           ");
            sb.AppendLine("  A.FLOW_CD AS 공정코드,           ");
            sb.AppendLine("  A.POOR_AMT AS 불량수량,          ");
            sb.AppendLine("  SUBSTRING(CONVERT(VARCHAR,INTIME,112),1,10) 불량등록일시,    ");
            sb.AppendLine("  B.FLOW_NM,                       ");
            sb.AppendLine("  C.POOR_NM                        ");
            sb.AppendLine("  FROM F_FLOW_POOR A               ");
            sb.AppendLine("  LEFT JOIN N_FLOW_CODE B          ");
            sb.AppendLine("  ON B.FLOW_CD = A.FLOW_CD         ");
            sb.AppendLine("  LEFT JOIN N_POOR_CODE C          ");
            sb.AppendLine("  ON C.POOR_CD = A.POOR_CD         ");
            sb.AppendLine("  WHERE C.POOR_GUBUN = '2'         ");
            sb.AppendLine(condition);
            sb.AppendLine("  order by LOT_NO desc, LOT_SUB         ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_raw_poor_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("            SELECT                                                 ");
            sb.AppendLine("A.INPUT_DATE,                                                      ");
            sb.AppendLine("A.RAW_MAT_CD ,                                                     ");
            sb.AppendLine("A.CHK_DATE AS 불량등록일시 ,                                       ");
            sb.AppendLine("A.CHK_AMT  ,                                                        ");
            sb.AppendLine("A.PASS_AMT,                                                        ");
            sb.AppendLine("A.NON_PASS_AMT,                                                    ");
            sb.AppendLine("CASE WHEN A.PASS_YN='Y' THEN '합격' ELSE '불합격' END AS 합격여부, ");
            sb.AppendLine("B.CHK_CD ,                                                         ");
            sb.AppendLine("B.CHK_AMT AS 불량수량 ,                                                        ");
            sb.AppendLine("B.PASS_YN ,                                                        ");
            sb.AppendLine("C.CHK_NM AS 검사항목,                                                       ");
            sb.AppendLine("C.CHK_TOOL AS 검사기구,                                                        ");
            sb.AppendLine("C.CHK_TIME AS 검사시기,                                                      ");
            sb.AppendLine("D.POOR_NM  ,                                                       ");
            sb.AppendLine("E.RAW_MAT_NM                                                       ");

            sb.AppendLine("FROM F_RAW_CHK A                                                   ");

            sb.AppendLine("LEFT JOIN                                                          ");
            sb.AppendLine("F_RAW_CHK_DETAIL B                                                 ");
            sb.AppendLine("ON B.INPUT_DATE = A.INPUT_DATE                                     ");
            sb.AppendLine("AND B.INPUT_CD =A.INPUT_CD                                         ");
            sb.AppendLine("AND B.INPUT_SEQ =A.SEQ                                             ");

            sb.AppendLine("LEFT JOIN                                                          ");
            sb.AppendLine("N_RAW_CHK_STAN C                                                   ");
            sb.AppendLine("ON C.CHK_CD = B.CHK_CD                                             ");

            sb.AppendLine("LEFT JOIN                                                          ");
            sb.AppendLine("N_POOR_CODE D                                                      ");
            sb.AppendLine("ON D.POOR_CD = C.POOR_CD                                           ");

            sb.AppendLine("LEFT JOIN                                                          ");
            sb.AppendLine("N_RAW_CODE E                                                      ");
            sb.AppendLine("ON E.RAW_MAT_CD = A.RAW_MAT_CD                                           ");

            sb.AppendLine("WHERE B.PASS_YN = 'N'                                              ");
            sb.AppendLine(condition);
            sb.AppendLine("ORDER BY A.INPUT_DATE DESC , A.INPUT_CD DESC                       ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable selectPriceInfoSearch(string custCd)
        {

            wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("           SELECT                                                        ");
            sb.AppendLine(" A.CUST_CD                                                               ");
            sb.AppendLine(", A.PROD_CD                                                              ");
            sb.AppendLine(", A.P_GUBUN                                                              ");
            sb.AppendLine(", isnull(A.B_BOX_PRICE,0) as B_BOX_PRICE                                 ");
            sb.AppendLine(", isnull(A.S_BOX_PRICE,0) as S_BOX_PRICE                                 ");
            sb.AppendLine(", isnull(A.UNIT_PRICE,0) as UNIT_PRICE                                   ");
            sb.AppendLine(", RAW_MAT_NM                                                           ");
            sb.AppendLine(", ITEM_NM                                                              ");
            sb.AppendLine(", A.UPSTAFF                                                              ");
            sb.AppendLine(", A.UPTIME                                                            ");
            sb.AppendLine(",RAW_MAT_CD                                                             ");
            sb.AppendLine(",ITEM_CD                                                           ");
            sb.AppendLine("FROM N_PRICE_INFO A                                                      ");

            sb.AppendLine("LEFT JOIN N_RAW_CODE B ON  A.P_GUBUN = '1' AND A.PROD_CD = B.RAW_MAT_CD  ");
            sb.AppendLine("LEFT JOIN N_ITEM_CODE C ON A.P_GUBUN = '2' AND A.PROD_CD = C.ITEM_CD     ");
            sb.AppendLine(" where a.CUST_CD = '" + custCd + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            sCommand.Parameters.AddWithValue("@CUST_CD", custCd);

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public int inUpPriceInfo(
     DataGridView dgv
    , string code)
        {
            //
            try
            {

                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    sb.AppendLine("declare @chk" + i + " int ");
                    sb.AppendLine("select @chk" + i + " = count(*) from N_PRICE_INFO ");
                    sb.AppendLine("where CUST_CD = '" + dgv.Rows[i].Cells[0].Value.ToString().Replace(",", "") + "' ");
                    sb.AppendLine(" and ITEM_CD = '" + dgv.Rows[i].Cells[1].Value.ToString().Replace(",", "") + "' ");

                    sb.AppendLine("IF(@chk" + i + ">0)  ");
                    sb.AppendLine("update N_PRICE_INFO set");
                    sb.AppendLine("      B_BOX_PRICE  = '" + dgv.Rows[i].Cells[3].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , S_BOX_PRICE =  '" + dgv.Rows[i].Cells[4].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , UNIT_PRICE  = '" + dgv.Rows[i].Cells[5].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , UPSTAFF = '" + dgv.Rows[i].Cells[8].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , UPTIME =  convert(varchar, getdate(), 120) ");
                    sb.AppendLine("where");
                    sb.AppendLine("      CUST_CD = '" + dgv.Rows[i].Cells[0].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     AND ITEM_CD =  '" + dgv.Rows[i].Cells[1].Value.ToString().Replace(",", "") + "'");

                    sb.AppendLine("ELSE ");
                    sb.AppendLine("insert into N_PRICE_INFO(");
                    sb.AppendLine("     CUST_CD");
                    sb.AppendLine("     , ITEM_CD");
                    sb.AppendLine("     , B_BOX_PRICE");
                    sb.AppendLine("     , S_BOX_PRICE");
                    sb.AppendLine("     , UNIT_PRICE");
                    sb.AppendLine("     , INSTAFF");
                    sb.AppendLine("     , INTIME");
                    sb.AppendLine(")");
                    sb.AppendLine("  values ( ");
                    sb.AppendLine("      '" + dgv.Rows[i].Cells[0].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , '" + dgv.Rows[i].Cells[1].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , '" + dgv.Rows[i].Cells[3].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , '" + dgv.Rows[i].Cells[4].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , '" + dgv.Rows[i].Cells[5].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , '" + dgv.Rows[i].Cells[6].Value.ToString().Replace(",", "") + "'");
                    sb.AppendLine("     , convert(varchar, getdate(), 120)  ");
                    sb.AppendLine(" ) ");


                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_CUST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());Popup.pop오류리포트 msg = new Popup.pop오류리포트(e.Message + " - " + e.ToString()); msg.ShowDialog();
                return 9;
            }
        }
        public int deletePriceInfo(string cust, string item)
        {

            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("delete from N_PRICE_INFO");
            sb.AppendLine(" where ");
            sb.AppendLine("     CUST_CD = @CUST ");
            sb.AppendLine("     AND ITEM_CD = @ITEM ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            sCommand.Parameters.AddWithValue("@CUST", cust);
            sCommand.Parameters.AddWithValue("@ITEM", item);



            int qResult = wAdo.SqlCommandEtc(sCommand, "insert_CUST_TB");
            if (qResult > 0)
            {
                return 0;  // 0 true, 1 false
            }
            else return 1;

        }

        public DataTable fn_Select_Raw_input_Poor_group_by_date_Day(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select  ");
            sb.AppendLine("   A.INPUT_DATE ");
            sb.AppendLine("   ,SUM(A.TEMP_AMT) AS INPUT_AMT ");
            sb.AppendLine("   ,ISNULL(SUM(ISNULL(C.NON_PASS_AMT,0)),0) as POOR_AMT ");
            sb.AppendLine("  from F_RAW_DETAIL A ");
            sb.AppendLine("  left outer join F_RAW_CHK C ");
            sb.AppendLine("  on C.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("  and C.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine("  and C.SEQ = A.SEQ ");
            sb.AppendLine("where 1=1 and (SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) is not null " + condition);
            sb.AppendLine("  group by A.INPUT_DATE ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Raw_input_Poor_group_by_cd(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select  ");
            sb.AppendLine("   A.RAW_MAT_CD ");
            sb.AppendLine("   ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS RAW_MAT_NM ");
            sb.AppendLine("   ,SUM(A.TEMP_AMT) AS INPUT_AMT ");
            sb.AppendLine("   ,ISNULL(SUM(ISNULL(C.NON_PASS_AMT,0)),0) as POOR_AMT ");
            sb.AppendLine("  from F_RAW_DETAIL A ");
            sb.AppendLine("  left outer join F_RAW_CHK C ");
            sb.AppendLine("  on C.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("  and C.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine("  and C.SEQ = A.SEQ ");
            sb.AppendLine("where 1=1 and (SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) is not null " + condition);
            sb.AppendLine("  group by A.RAW_MAT_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Raw_input_Detail_Poor(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine("   select   ");
            sb.AppendLine("    A.INPUT_DATE  ");
            sb.AppendLine("    ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = B.CUST_CD) AS CUST_NM ");
            sb.AppendLine("    ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS RAW_MAT_NM  ");
            sb.AppendLine("    ,A.TEMP_AMT AS INPUT_AMT  ");
            sb.AppendLine("    ,ISNULL(CONVERT(nvarchar,C.NON_PASS_AMT),'') as POOR_AMT  ");
            sb.AppendLine("    ,isnull((SELECT POOR_NM FROM N_POOR_CODE WHERE POOR_CD = (SELECT POOR_CD FROM N_RAW_CHK_STAN WHERE CD.CHK_CD = CHK_CD)),'') AS POOR_NM ");
            sb.AppendLine("    ,ISNULL(CD.POOR_COUNT,'') AS POOR_COUNT ");
            sb.AppendLine("    ,case when ISNULL(C.NON_PASS_AMT,0) / ISNULL(A.TEMP_AMT,0) * 100 = 0 then '' else convert(nvarchar,ISNULL(C.NON_PASS_AMT,0) / ISNULL(A.TEMP_AMT,0) * 100) end AS POOR_PER ");
            sb.AppendLine("   from F_RAW_DETAIL A  ");
            sb.AppendLine("   left outer join F_RAW_CHK C  ");
            sb.AppendLine("   on C.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("   and C.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine("   and C.SEQ = A.SEQ  ");
            sb.AppendLine("   left outer join (SELECT C.INPUT_DATE, C.INPUT_CD, C.INPUT_SEQ, ");
            sb.AppendLine("   (SELECT top 1 CHK_CD FROM F_RAW_CHK_DETAIL WHERE PASS_YN = 'N' and C.INPUT_DATE = INPUT_DATE and C.INPUT_CD = INPUT_CD and C.INPUT_SEQ = INPUT_SEQ) AS CHK_CD ");
            sb.AppendLine("   ,case when COUNT(*) > 1 then '외 '+convert(nvarchar,COUNT(*)-1)+'개 항목' else '' end AS POOR_COUNT ");
            sb.AppendLine("    FROM F_RAW_CHK_DETAIL C ");
            sb.AppendLine("    where C.PASS_YN = 'N'  ");
            sb.AppendLine("    group by INPUT_DATE,INPUT_CD,INPUT_SEQ ");
            sb.AppendLine("     )CD  ");
            sb.AppendLine("   on  C.INPUT_DATE = CD.INPUT_DATE  ");
            sb.AppendLine("   and C.INPUT_CD = CD.INPUT_CD  ");
            sb.AppendLine("   and C.SEQ = CD.INPUT_SEQ  ");
            sb.AppendLine("   left outer join F_RAW_INPUT B ");
            sb.AppendLine("   on B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("   and B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" where 1=1  " + condition + " ");
            sb.AppendLine(" and A.TEMP_AMT is not null and A.TEMP_AMT > 0 ");
            sb.AppendLine(" and (SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) is not null ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Item_input_Poor_group_by_date_Day(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select    ");
            sb.AppendLine("   A.INPUT_DATE      ");
            sb.AppendLine("   ,SUM(A.INPUT_AMT) AS INPUT_AMT  ");
            sb.AppendLine("   ,SUM(A.POOR_AMT) AS POOR_AMT  ");
            sb.AppendLine("    from (        ");
            sb.AppendLine("   	select       ");
            sb.AppendLine("   	A.INPUT_DATE      ");
            sb.AppendLine("   	,SUM(A.INPUT_AMT) AS INPUT_AMT  ");
            sb.AppendLine("   	,SUM(B.POOR_AMT) AS POOR_AMT     ");
            sb.AppendLine("   	FROM F_ITEM_INPUT A    ");
            sb.AppendLine("   	left outer join F_WORK_FLOW_DETAIL B ");
            sb.AppendLine("   	on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("   	and A.LOT_SUB = B.LOT_SUB  ");
            sb.AppendLine("   	and A.F_STEP = B.F_STEP  ");
            sb.AppendLine("   	and A.FLOW_CD =B.FLOW_CD  ");
            sb.AppendLine("   	where 1=1  ");
            sb.AppendLine(condition2);
            sb.AppendLine("   	group by A.INPUT_DATE  ");
            sb.AppendLine("   ) A    ");
            sb.AppendLine("  where 1=1  " + condition + " ");
            sb.AppendLine("   group by A.INPUT_DATE   ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Item_input_Poor_group_by_cd(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select  ");
            sb.AppendLine("  A.ITEM_CD ");
            sb.AppendLine("  ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS ITEM_NM ");
            sb.AppendLine("  ,SUM(A.INPUT_AMT) AS INPUT_AMT         ");
            sb.AppendLine("  ,SUM(F.POOR_AMT) AS POOR_AMT     ");
            sb.AppendLine("  FROM (SELECT LOT_NO , ITEM_CD, SUM(INPUT_AMT) AS INPUT_AMT FROM F_ITEM_INPUT A where 1=1 " + condition + " group by LOT_NO, ITEM_CD) A   ");
            sb.AppendLine("  left outer join (SELECT LOT_NO, SUM(POOR_AMT) AS POOR_AMT FROM F_WORK_FLOW_DETAIL group by LOT_NO) F     ");
            sb.AppendLine("  on A.LOT_NO = F.LOT_NO     ");
            sb.AppendLine("  where (SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) is not null    ");
            sb.AppendLine("  group by A.ITEM_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Item_input_Detail_Poor(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select   ");
            sb.AppendLine(" A.F_SUB_DATE AS FLOW_DATE  ");
            sb.AppendLine(" ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS ITEM_NM  ");
            sb.AppendLine(" , A.LOT_SUB AS LOT_SUB  ");
            sb.AppendLine(" , A.LOT_NO AS LOT_NO  ");
            sb.AppendLine(" ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE A.FLOW_CD = FLOW_CD) AS FLOW_NM  ");
            sb.AppendLine(" , A.FLOW_CD AS FLOW_CD  ");
            sb.AppendLine(" , A.F_SUB_AMT  ");
            sb.AppendLine(" , A.POOR_AMT  ");
            sb.AppendLine(" , ISNULL((select top 1 (SELECT POOR_NM FROM N_POOR_CODE WHERE POOR_CD = C.POOR_CD) AS POOR_NM FROM F_FLOW_POOR C  ");
            sb.AppendLine("    where C.LOT_NO = A.LOT_NO and C.LOT_SUB = A.LOT_SUB and C.F_STEP = A.F_STEP and C.FLOW_CD = A.FLOW_CD),'')   ");
            sb.AppendLine("    AS POOR_NM  ");
            sb.AppendLine(" , case when P.POOR_COUNT > 1 then '외 '+CONVERT(nvarchar,P.POOR_COUNT-1)+'개 항목' else '' end as COMMENT  ");
            sb.AppendLine(" , (A.POOR_AMT / (A.F_SUB_AMT+A.POOR_AMT) * 100) AS POOR_PER  ");
            sb.AppendLine("  from F_ITEM_INPUT C ");
            sb.AppendLine("  inner join F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("  on A.LOT_NO = C.LOT_NO  ");
            sb.AppendLine("  and A.LOT_SUB = C.LOT_SUB  ");
            sb.AppendLine("  and A.F_STEP = C.F_STEP  ");
            sb.AppendLine("  and A.FLOW_CD = C.FLOW_CD  ");
            sb.AppendLine("  left outer join (SELECT LOT_NO, LOT_SUB, F_STEP, FLOW_CD, COUNT(*) AS POOR_COUNT FROM F_FLOW_POOR  ");
            sb.AppendLine("  group by LOT_NO,LOT_SUB,F_STEP,FLOW_CD ) P  ");
            sb.AppendLine("  on A.LOT_NO = P.LOT_NO  ");
            sb.AppendLine("  and A.LOT_SUB = P.LOT_SUB  ");
            sb.AppendLine("  and A.F_STEP = P.F_STEP  ");
            sb.AppendLine("  and A.FLOW_CD = P.FLOW_CD  ");
            sb.AppendLine("  where (SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) is not null  ");
            sb.AppendLine(condition + condition2);
            sb.AppendLine("   and A.F_SUB_AMT > 0  ");
            sb.AppendLine("   order by A.F_SUB_DATE ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_flow_input_Poor_group_by_date_Day(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine(" select * FROM ( ");
            sb.AppendLine(" SELECT  ");
            sb.AppendLine(" F_SUB_DATE AS INPUT_DATE ");
            sb.AppendLine(" ,SUM(F_SUB_AMT) AS INPUT_AMT ");
            sb.AppendLine(" ,SUM(POOR_AMT) AS POOR_AMT ");
            sb.AppendLine(" FROM F_WORK_FLOW_DETAIL A ");
            sb.AppendLine(" where 1=1 " + condition2 + " ");
            sb.AppendLine(" group by A.F_SUB_DATE ");
            sb.AppendLine(" ) A  ");
            sb.AppendLine("  where 1=1  " + condition + "  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_flow_input_Poor_group_by_cd(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select  ");
            sb.AppendLine(" (SELECT FLOW_NM FROM N_FLOW_CODE WHERE A.FLOW_CD = FLOW_CD) AS FLOW_NM ");
            sb.AppendLine(" ,SUM(A.F_SUB_AMT) AS INPUT_AMT ");
            sb.AppendLine(" ,SUM(A.POOR_AMT) AS POOR_AMT ");
            sb.AppendLine(" FROM F_WORK_FLOW_DETAIL A ");
            sb.AppendLine(" where 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine(" group by A.FLOW_CD,A.F_STEP ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Select_Flow_input_Detail_Poor(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select   ");
            sb.AppendLine(" A.F_SUB_DATE AS FLOW_DATE  ");
            sb.AppendLine(" ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) AS ITEM_NM  ");
            sb.AppendLine(" , A.LOT_NO AS LOT_NO  ");
            sb.AppendLine(" ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE A.FLOW_CD = FLOW_CD) AS FLOW_NM  ");
            sb.AppendLine(" , A.FLOW_CD AS FLOW_CD  ");
            sb.AppendLine(" , A.F_SUB_AMT  ");
            sb.AppendLine(" , A.POOR_AMT  ");
            sb.AppendLine(" , ISNULL((select top 1 (SELECT POOR_NM FROM N_POOR_CODE WHERE POOR_CD = C.POOR_CD) AS POOR_NM FROM F_FLOW_POOR C  ");
            sb.AppendLine("    where C.LOT_NO = A.LOT_NO and C.LOT_SUB = A.LOT_SUB and C.F_STEP = A.F_STEP and C.FLOW_CD = A.FLOW_CD),'')   ");
            sb.AppendLine("    AS POOR_NM  ");
            sb.AppendLine(" , case when P.POOR_COUNT > 1 then '외 '+CONVERT(nvarchar,P.POOR_COUNT-1)+'개 항목' else '' end as COMMENT  ");
            sb.AppendLine(" , (A.POOR_AMT / (A.F_SUB_AMT+A.POOR_AMT) * 100) AS POOR_PER  ");
            sb.AppendLine("  from F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("  left outer join (SELECT LOT_NO, LOT_SUB, F_STEP, FLOW_CD, COUNT(*) AS POOR_COUNT FROM F_FLOW_POOR  ");
            sb.AppendLine("  group by LOT_NO,LOT_SUB,F_STEP,FLOW_CD ) P  ");
            sb.AppendLine("  on A.LOT_NO = P.LOT_NO  ");
            sb.AppendLine("  and A.LOT_SUB = P.LOT_SUB  ");
            sb.AppendLine("  and A.F_STEP = P.F_STEP  ");
            sb.AppendLine("  and A.FLOW_CD = P.FLOW_CD  ");
            sb.AppendLine("  where (SELECT ITEM_NM FROM N_ITEM_CODE WHERE A.ITEM_CD = ITEM_CD) is not null  ");
            sb.AppendLine(condition + condition2);
            sb.AppendLine("   and A.F_SUB_AMT > 0  ");
            sb.AppendLine("   order by A.F_SUB_DATE ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_select_processing_flow()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select   ");
            sb.AppendLine(" W.W_INST_DATE AS INST_DATE  ");
            sb.AppendLine(" ,W.DELIVERY_DATE AS DELI_DATE  ");
            sb.AppendLine(" ,W.ITEM_CD  ");
            sb.AppendLine(" ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE W.ITEM_CD = ITEM_CD) AS ITEM_NM  ");
            sb.AppendLine(" ,W.LOT_NO  ");
            sb.AppendLine(" ,(SELECT COUNT(*) FROM N_ITEM_FLOW WHERE ITEM_CD = W.ITEM_CD) AS FLOW_COUNT  ");
            sb.AppendLine(" ,W.INST_AMT AS INST_AMT  ");
            sb.AppendLine(" ,ISNULL(I.INPUT_AMT,0) AS INPUT_AMT  ");
            sb.AppendLine(" ,ISNULL(INPUT_AMT,0)/W.INST_AMT * 100 AS INPUT_PER  ");
            sb.AppendLine("  from F_WORK_FLOW A  ");
            sb.AppendLine(" inner join F_WORK_INST W  ");
            sb.AppendLine(" on A.LOT_NO = W.LOT_NO  ");
            sb.AppendLine(" left outer join (  ");
            sb.AppendLine(" 	SELECT LOT_NO,   ");
            sb.AppendLine(" 	ISNULL(SUM(INPUT_AMT),0) AS INPUT_AMT  ");
            sb.AppendLine(" 	FROM F_ITEM_INPUT   ");
            sb.AppendLine(" 	group by LOT_NO  ");
            sb.AppendLine(" ) I  ");
            sb.AppendLine(" on I.LOT_NO = A.LOT_NO  ");
            sb.AppendLine(" where A.COMPLETE_YN = 'S' and W.INST_AMT is not null and W.INST_AMT > 0  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Select_Item_input_Poor_group_by_date_Week(string s_date, string e_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" declare @minDay nvarchar(10) = '"+s_date+"'  ");
            sb.AppendLine(" declare @maxMinusOne nvarchar(10) = '" + e_date + "' ");

            sb.AppendLine(" CREATE TABLE #CALENDER(INPUT_DATE nvarchar(10)) ");
            sb.AppendLine(" insert into #CALENDER  ");
            sb.AppendLine(" 	select CONVERT(nvarchar(10), DATEADD(D,NUMBER,@minDay), 120) AS 'DATE' ");
            sb.AppendLine(" 	from master..spt_values ");
            sb.AppendLine(" 	WHERE TYPE ='P' ");
            sb.AppendLine("  and number <= DATEDIFF(D,@minDay,@maxMinusOne) ");

            sb.AppendLine(" declare @dayWeek int  ");
            sb.AppendLine(" select @dayWeek = (DATEPART(DW,@maxMinusOne)) ");

            sb.AppendLine(" SELECT * FROM ( ");
            sb.AppendLine(" select                                        ");
            sb.AppendLine("     DATEPART(ww, CONVERT(date,dateadd(day,-@dayWeek,C.INPUT_DATE))) AS INPUT_DATE ");
            sb.AppendLine("     ,MAX(C.INPUT_DATE) AS MAXDATE ");
            sb.AppendLine("     ,MIN(C.INPUT_DATE) AS MINDATE ");
            sb.AppendLine("     ,MIN(C.INPUT_DATE)+' ~ '+MAX(C.INPUT_DATE) AS DATE_RANGE    ");
            sb.AppendLine("    	,ISNULL(SUM(ISNULL(A.INPUT_AMT,0)),0) AS INPUT_AMT          ");
            sb.AppendLine("    	,ISNULL(SUM(ISNULL(B.POOR_AMT,0)),0) AS POOR_AMT            ");
            sb.AppendLine("    	FROM #CALENDER C                        ");
            sb.AppendLine("    	left outer join F_ITEM_INPUT A          ");
            sb.AppendLine("    	on C.INPUT_DATE = A.INPUT_DATE          ");
            sb.AppendLine("    	left outer join F_WORK_FLOW_DETAIL B    ");
            sb.AppendLine("    	on A.LOT_NO = B.LOT_NO      ");
            sb.AppendLine("    	and A.LOT_SUB = B.LOT_SUB   ");
            sb.AppendLine("    	and A.F_STEP = B.F_STEP     ");
            sb.AppendLine("    	and A.FLOW_CD =B.FLOW_CD    ");
            sb.AppendLine("    	where 1=1   ");
            sb.AppendLine("    	GROUP BY ");
            sb.AppendLine(" (DATEPART(ww, CONVERT(date,dateadd(day,-@dayWeek,C.INPUT_DATE))))     ");
            sb.AppendLine(" ) A ");
            sb.AppendLine("     ORDER BY A.MAXDATE ASC ");
            sb.AppendLine("  DROP TABLE #CALENDER ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Item_input_Poor_group_by_date_Month(string s_date, string e_date)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" declare @minDay nvarchar(10) = '"+s_date+"'   ");
            sb.AppendLine(" declare @maxMinusOne nvarchar(10) = '"+e_date+"'  ");
            sb.AppendLine(" CREATE TABLE #CALENDER(INPUT_DATE nvarchar(10))  ");
            sb.AppendLine(" insert into #CALENDER   ");
            sb.AppendLine(" 	select CONVERT(nvarchar(10), DATEADD(D,NUMBER,@minDay), 120) AS 'DATE'  ");
            sb.AppendLine(" 	from master..spt_values  ");
            sb.AppendLine(" 	WHERE TYPE ='P'  ");
            sb.AppendLine("  and number <= DATEDIFF(D,@minDay,@maxMinusOne)  ");
            sb.AppendLine("  ");
            sb.AppendLine("  ");
            sb.AppendLine(" select                                         ");
            sb.AppendLine("     MAX(C.INPUT_DATE) AS MAXDATE  ");
            sb.AppendLine("     ,MIN(C.INPUT_DATE) AS MINDATE ");
            sb.AppendLine("     ,MIN(C.INPUT_DATE)+' ~ '+MAX(C.INPUT_DATE) AS DATE_RANGE     ");
            sb.AppendLine("    	,ISNULL(SUM(ISNULL(A.INPUT_AMT,0)),0) AS INPUT_AMT          "); 
            sb.AppendLine("    	,ISNULL(SUM(ISNULL(B.POOR_AMT,0)),0) AS POOR_AMT             ");
            sb.AppendLine("    	FROM #CALENDER C                         ");
            sb.AppendLine("    	left outer join F_ITEM_INPUT A          "); 
            sb.AppendLine("    	on C.INPUT_DATE = A.INPUT_DATE           ");
            sb.AppendLine("    	left outer join F_WORK_FLOW_DETAIL B     ");
            sb.AppendLine("    	on A.LOT_NO = B.LOT_NO       ");
            sb.AppendLine("    	and A.LOT_SUB = B.LOT_SUB    ");
            sb.AppendLine("    	and A.F_STEP = B.F_STEP      ");
            sb.AppendLine("    	and A.FLOW_CD =B.FLOW_CD     ");
            sb.AppendLine("    	where 1=1    ");
            sb.AppendLine("    	GROUP BY SubString(C.INPUT_DATE,0,8) ");
            sb.AppendLine("  DROP TABLE  #CALENDER ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Order_Detail_List_notCompleted(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine("  select   ");
            sb.AppendLine("  J.DELIVERY_REQ_DATE AS 납품요구일    ");
            sb.AppendLine("  ,N.ITEM_NM AS 제품명                 ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE J.CUST_CD = CUST_CD ) 매출처                 ");
            sb.AppendLine("  ,A.JUMUN_DATE AS 수주일자            ");
            sb.AppendLine("  , A.JUMUN_CD AS 수주번호             ");
            sb.AppendLine("  , A.SEQ AS 수주순번                  ");
            sb.AppendLine("  ,N.BAL_STOCK AS 제품재고             ");
            sb.AppendLine("  ,A.AMOUNT AS 수주수량                ");
            sb.AppendLine("  ,NR.RAW_MAT_NM AS 자재명             ");
            sb.AppendLine("  ,NR.BAL_STOCK AS 자재재고            ");
            sb.AppendLine("  ,C.TOTAL_AMT * A.AMOUNT AS 예상소요량  ");
            sb.AppendLine("  ,case when N.BAL_STOCK >= A.AMOUNT then '납품가능'   ");
            sb.AppendLine("    ");
            sb.AppendLine("  else   ");
            sb.AppendLine("  	case when (WI.RAW_OUT_YN = 'Y' and WI.RAW_OUT_YN is not null) then   ");
            sb.AppendLine("  		case when WI.COMPLETE_YN = 'N' then  ");
            sb.AppendLine("  			 case when WF.COMPLETE_YN Is not null and WF.COMPLETE_YN = 'S' then '공정 진행중'   ");
            sb.AppendLine("  			 else '작업 대기' end   ");
            sb.AppendLine("  		else  '추가 생산 필요'  ");
            sb.AppendLine("          end   ");
            sb.AppendLine("      else case when NR.BAL_STOCK < C.TOTAL_AMT * A.AMOUNT then '발주 필요'  ");
            sb.AppendLine("  		  else '작업 대기(자재투입 필요)' end		    ");
            sb.AppendLine("  	end   ");
            sb.AppendLine("  end AS STATE_FLAG  ");
            sb.AppendLine("  		  ");
            sb.AppendLine("  		  ");
            sb.AppendLine("  FROM F_JUMUN_DETAIL A  ");
            sb.AppendLine("  left outer join F_JUMUN J  ");
            sb.AppendLine("  on J.JUMUN_DATE = A.JUMUN_DATE  ");
            sb.AppendLine("  and J.JUMUN_CD = A.JUMUN_CD  ");
            sb.AppendLine("  inner join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = A.ITEM_CD  ");
            sb.AppendLine("  left outer join N_ITEM_COMP C  ");
            sb.AppendLine("  on N.ITEM_CD = C.ITEM_CD  ");
            sb.AppendLine("  inner join N_RAW_CODE NR  ");
            sb.AppendLine("  on NR.RAW_MAT_CD = C.RAW_MAT_CD  ");
            sb.AppendLine("  left outer join F_PLAN P  ");
            sb.AppendLine("  on P.PLAN_DATE = J.PLAN_DATE      ");
            sb.AppendLine("  and P.PLAN_CD =J.PLAN_CD          ");
            sb.AppendLine("  LEFT OUTER JOIN F_WORK_INST WI    ");
            sb.AppendLine("  on WI.PLAN_NUM = P.PLAN_NUM       ");
            sb.AppendLine("  LEFT OUTER JOIN F_WORK_FLOW WF    ");
            sb.AppendLine("  on WI.LOT_NO = WF.LOT_NO          ");
            sb.AppendLine("  where J.COMPLETE_YN = 'N'         ");
            sb.AppendLine(condition);
            sb.AppendLine("  order by J.DELIVERY_REQ_DATE desc, J.JUMUN_DATE desc  ");
        
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_WorkDay_toip_list(string LotNo)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("  select   ");
            sb.AppendLine("  '투입' AS GUBUN ");
            sb.AppendLine("  ,O.OUTPUT_DATE AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_CD ) AS INPUT_CD ");
            sb.AppendLine("  ,'' AS INPUT_SEQ ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = RD.CUST_CD) AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM  ");
            sb.AppendLine("  ,N.RAW_MAT_NM  AS LABEL_NM ");
            sb.AppendLine("  ,'' AS CHUGJONG_NM  ");
            sb.AppendLine("  ,'' AS COUNTRY_NM  ");
            sb.AppendLine("  ,'' AS CLASS_NM  ");
            sb.AppendLine("  ,'' AS GRADE_NM  ");
            sb.AppendLine("  ,'' AS EXPRT_DATE  ");
            sb.AppendLine("  ,'' AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,'' AS UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD  ");
            sb.AppendLine("  ,'' AS LOSS_AMT  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,O.LOT_NO  ");
            sb.AppendLine("  from F_RAW_OUTPUT O  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = O.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= O.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ= O.INPUT_SEQ  ");
            sb.AppendLine("   left outer join F_RAW_INPUT RD  ");
            sb.AppendLine("  on D.INPUT_DATE = RD.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= RD.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N  ");
            sb.AppendLine("  on N.RAW_MAT_CD = D.RAW_MAT_CD  ");
            sb.AppendLine("  where O.LOT_NO like '" + LotNo + "%' ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_WorkDay_Made_list(string LotNo)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select   ");
            sb.AppendLine("  '생산' AS GUBUN ");
            sb.AppendLine("  ,I.INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_CD) AS INPUT_CD  ");
            sb.AppendLine("  ,'' AS INPUT_SEQ  ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine("  ,N.ITEM_NM AS LABEL_NM ");
            sb.AppendLine("  ,N.SPEC  ");
            sb.AppendLine("  ,'' AS CHUGJONG_NM  ");
            sb.AppendLine("  ,'' AS COUNTRY_NM  ");
            sb.AppendLine("  ,'' AS CLASS_NM  ");
            sb.AppendLine("  ,'' AS GRADE_NM  ");
            sb.AppendLine("  ,'' AS EXPRT_DATE  ");
            sb.AppendLine("  ,'' AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,'' AS UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD  ");
            sb.AppendLine("  ,'' AS LOSS_AMT  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,I.LOT_NO  ");
            sb.AppendLine("  FROM F_ITEM_INPUT I  ");
            sb.AppendLine("  left outer join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = I.ITEM_CD  ");
            sb.AppendLine("  where I.LOT_NO like '" + LotNo + "%' ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_select_Sensor_code(string deviceId, string h, string n, string c)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select   ");
            sb.AppendLine("  * ");
            sb.AppendLine("  , (SELECT S_LOC_NM FROM N_SENSOR_LOC WHERE A.S_LOC_CD = S_LOC_CD ) AS S_LOC_NM ");
            sb.AppendLine("  from N_SENSOR_CODE A ");
            sb.AppendLine("  WHERE A.DEVICE_ID = '"+deviceId+"' and A.H_IDX = '"+h+"' and A.N_IDX = '"+n+"' and A.CHANNEL = '"+c+"' " );
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        internal int insert_SensorCode(
            string device
            , string h
            , string n
            , string c
            , string nm
            , conComboBox cmb_tmp_loc
            , string inUpFlag
            , string btnText
            , string locTmpText
            , string tmp_lo
            , string tmp_hi
            , string hu_lo
            , string hu_hi
         )   
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                string LOC_CD = "";

                if(inUpFlag.Equals("insert"))
                {
                    sb.AppendLine(" declare @MAX int  ");
                    sb.AppendLine(" declare @newKey nvarchar(10) ");
                    sb.AppendLine(" select @MAX = ISNULL(MAX(substring(S_LOC_CD,4,3)),0)+1 from N_SENSOR_LOC  ");
                    sb.AppendLine(" select @newKey = 'SL-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");
                    sb.AppendLine(" insert into N_SENSOR_LOC (   ");
                    sb.AppendLine("  S_LOC_CD                    ");
                    sb.AppendLine("  ,S_LOC_NM                   ");
                    sb.AppendLine(" ) values (                   ");
                    sb.AppendLine("  @newKey                          ");
                    sb.AppendLine("  ,'"+locTmpText+"')                        ");
                    LOC_CD = "@newKey";
                }
                else if (!inUpFlag.Equals(""))
                {
                    sb.AppendLine("  update N_SENSOR_LOC set     ");
                    sb.AppendLine("  S_LOC_NM = '" + locTmpText + "'               ");
                    sb.AppendLine("  where S_LOC_CD = '" + inUpFlag.Split('#')[1] + "'         ");
                    LOC_CD = "'" + inUpFlag.Split('#')[1] + "'";
                }
                else
                {
                    LOC_CD = "'" + cmb_tmp_loc.SelectedValue.ToString() +"'";
                }

               
                sb.AppendLine(" declare @cnt int             ");
                sb.AppendLine(" select @cnt = count(*) from N_SENSOR_CODE  ");
                sb.AppendLine(" where device_id = '"+device+"' and H_IDX = '"+h+"' and N_IDX = '"+n+"'  AND CHANNEL = '"+c+"'  ");
                sb.AppendLine(" if @cnt > 0                  ");
                sb.AppendLine(" begin                        ");
                sb.AppendLine("  update N_SENSOR_CODE set    ");
                sb.AppendLine("    S_NM = '"+nm+"'                ");
                sb.AppendLine("    ,TMP_LOW = '"+tmp_lo+"'             ");
                sb.AppendLine("    ,TMP_HIGH = '"+tmp_hi+"'            ");
                sb.AppendLine("    ,HUMI_LOW = '"+hu_lo+"'            ");
                sb.AppendLine("    ,HUMI_HIGH = '"+hu_hi+"'           ");
                sb.AppendLine("    ,S_LOC_CD = "+LOC_CD+"            ");
                sb.AppendLine("   where device_id = '"+device+"' and H_IDX = '"+h+"' and N_IDX = '"+n+"'  AND CHANNEL = '"+c+"'  ");
                sb.AppendLine(" end ");
                sb.AppendLine(" else begin ");
                sb.AppendLine("  insert into N_SENSOR_CODE (    ");
                sb.AppendLine("   DEVICE_ID                     ");
                sb.AppendLine("   ,H_IDX                        ");
                sb.AppendLine("   ,N_IDX                        ");
                sb.AppendLine("   ,CHANNEL                      ");
                sb.AppendLine("   ,S_NM                         ");
                sb.AppendLine("   ,TMP_LOW                      ");
                sb.AppendLine("   ,TMP_HIGH                     ");
                sb.AppendLine("   ,HUMI_LOW                     ");
                sb.AppendLine("   ,HUMI_HIGH                    ");
                sb.AppendLine("   ,S_LOC_CD                     ");
                sb.AppendLine("   )values(                      ");
                sb.AppendLine("   '"+device+"'                            ");
                sb.AppendLine("   ,'"+h+"'                           ");
                sb.AppendLine("   ,'"+n+"'                           ");
                sb.AppendLine("   ,'"+c+"'                           ");
                sb.AppendLine("   ,'"+nm+"'                           ");
                sb.AppendLine("   ,'"+tmp_lo+"'                           ");
                sb.AppendLine("   ,'"+tmp_hi+"'                           ");
                sb.AppendLine("   ,'"+hu_lo+"'                           ");
                sb.AppendLine("   ,'"+hu_hi+"'                           ");
                sb.AppendLine("   ,"+LOC_CD+"                           ");
                sb.AppendLine("   )                             ");
                sb.AppendLine(" end                             ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_sensor");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public DataTable fn_Is_item_output(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select * from F_ITEM_OUT_DETAIL ");
            sb.AppendLine(" where 1=1  ");

            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_jumun_groupby_item(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select ");
            sb.AppendLine("     A.ITEM_CD ");
            sb.AppendLine("     , A.RS_AMT  ");
            sb.AppendLine("     , 'false' as CHK  ");
            sb.AppendLine("     , 0 as PRICE  ");
            sb.AppendLine("     , ROW_NUMBER() OVER( ORDER BY A.ITEM_CD ) AS NUMBER ");
            sb.AppendLine("     , B.ITEM_NM ");
            sb.AppendLine("     , B.UNIT_CD ");
            sb.AppendLine("     , C.UNIT_NM ");
            sb.AppendLine("     , B.BAL_STOCK");
            sb.AppendLine("     , B.SPEC ");
            sb.AppendLine("     , 0 as TOTAL_MONEY ");
            sb.AppendLine("     , '' as CUST_CD ");
            sb.AppendLine(" from (select ITEM_CD, sum(isnull(AMOUNT, 0)) as RS_AMT");
            sb.AppendLine(" from F_JUMUN_DETAIL  ");
            sb.AppendLine(" where 1 = 1 ");
            sb.AppendLine("and(");
            sb.AppendLine(condition);
            sb.AppendLine(" group by ITEM_CD) as A ");
            sb.AppendLine(" left outer join N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD =B.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE C ");
            sb.AppendLine(" on B.UNIT_CD = C.UNIT_CD");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_jumun_groupby_cust(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select ");
            sb.AppendLine("     A.ITEM_CD ");
            sb.AppendLine("     , A.RS_AMT  ");
            sb.AppendLine("     , 'false' as CHK  ");
            sb.AppendLine("     , 0 as PRICE  ");
            sb.AppendLine("     , ROW_NUMBER() OVER( ORDER BY A.ITEM_CD ) AS NUMBER ");
            sb.AppendLine("     , B.ITEM_NM ");
            sb.AppendLine("     , B.UNIT_CD ");
            sb.AppendLine("     , C.UNIT_NM ");
            sb.AppendLine("     , B.BAL_STOCK");
            sb.AppendLine("     , B.SPEC ");
            sb.AppendLine("     , A.CUST_CD ");
            sb.AppendLine("     , 0 as TOTAL_MONEY ");
            sb.AppendLine(" from (select ITEM_CD, sum(isnull(AMOUNT, 0)) as RS_AMT, B.CUST_CD ");
            sb.AppendLine(" from F_JUMUN_DETAIL A  ");
            sb.AppendLine("  left outer join F_JUMUN B ");
            sb.AppendLine("  on A.JUMUN_DATE = B.JUMUN_DATE ");
            sb.AppendLine("  and A.JUMUN_CD = B.JUMUN_CD ");
            sb.AppendLine("where 1 = 1 ");
            sb.AppendLine("and( ");
            sb.AppendLine( condition );
            sb.AppendLine(" group by ITEM_CD,CUST_CD) as A ");
            sb.AppendLine(" left outer join N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD =B.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE C ");
            sb.AppendLine(" on B.UNIT_CD = C.UNIT_CD");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_List_Only_Order(string condition)
        {
            StringBuilder sb = new StringBuilder();
            
            sb.AppendLine("select distinct A.RAW_MAT_CD");
            sb.AppendLine(" , RAW_MAT_NM");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            //sb.AppendLine("     , case when RAW_MAT_GUBUN = '1' then '원자재' ");
            //sb.AppendLine("             when RAW_MAT_GUBUN = '2' then '부자재' ");
            //sb.AppendLine("             else '포장자재' end as RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" , INPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine(" , OUTPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            sb.AppendLine(" , LINE_CD ");
            sb.AppendLine(" , CVR_RATIO ");
            sb.AppendLine(" , INPUT_PRICE ");
            sb.AppendLine(" , OUTPUT_PRICE ");
            sb.AppendLine(" , RAW_STORAGE ");
            sb.AppendLine(" , EX_STAN_QUALITY ");
            sb.AppendLine(" , USED_CD ");
            sb.AppendLine(" , A.CUST_CD ");
            sb.AppendLine(" , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM ");
            sb.AppendLine(" , BASIC_STOCK ");
            sb.AppendLine(" , CHECK_GUBUN ");
            sb.AppendLine(" , PART_NO ");
            sb.AppendLine(" , BAL_STOCK ");
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" , ST_STATUS_YN");
            sb.AppendLine(" , TAX_CD");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" inner join F_ORDER_DETAIL C ");
            sb.AppendLine(" on A.RAW_MAT_CD = C.RAW_MAT_CD  ");
            sb.AppendLine(" INNER join F_ORDER B ");
            sb.AppendLine(" ON C.ORDER_DATE = B.ORDER_DATE  ");
            sb.AppendLine(" AND C.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine(" and B.COMPLETE_YN = 'N' ");
            sb.AppendLine(" left outer join (SELECT ORDER_DATE, ORDER_CD, ORDER_SEQ, ISNULL(SUM(TEMP_AMT),0) AS TEMP_AMT from F_RAW_DETAIL group by ORDER_DATE,ORDER_CD,ORDER_SEQ) D  ");
            sb.AppendLine(" on C.ORDER_DATE = D.ORDER_DATE  ");
            sb.AppendLine(" and C.ORDER_CD = D.ORDER_CD  ");
            sb.AppendLine(" and C.SEQ = D.ORDER_SEQ  ");
            sb.AppendLine(condition);
            sb.AppendLine(" and (D.TEMP_AMT < C.TOTAL_AMT or TEMP_AMT is null)  ");
            sb.AppendLine(" order by RAW_MAT_CD ");
            
            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable newRawChkCode()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  declare @MAX int  ");
            sb.AppendLine("  declare @newValue nvarchar(10) ");
            sb.AppendLine("  select @MAX = ISNULL(MAX(substring(CHK_CD,4,3)),0)+1 from N_RAW_CHK_STAN ");
            sb.AppendLine("  select @newValue = 'RC-'+ RIGHT('000'+CONVERT(nvarchar,@MAX),3) ");

            sb.AppendLine(" select @newValue AS NEW_RC ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int del_accu(string accu_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" DELETE FROM N_ACCOUNT_CODE ");
                sb.AppendLine(" WHERE ACCU_CD = '"+accu_cd+"'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "delete account");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int insertAccu(string accu_cd, string accu_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" INSERT INTO N_ACCOUNT_CODE ( ");
                sb.AppendLine(" ACCU_CD ");
                sb.AppendLine(" ,ACCU_NM ");
                sb.AppendLine(" ,POOR_TYPE_YN ");
                sb.AppendLine(" )VALUES ( ");
                sb.AppendLine(" '" + accu_cd + "' ");
                sb.AppendLine(" ,'" + accu_nm + "' ");
                sb.AppendLine(" ,'N' ");
                sb.AppendLine(" ) ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert account");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int updateAccu(string accu_cd, string accu_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" UPDATE N_ACCOUNT_CODE SET ");
                sb.AppendLine(" ACCU_NM  = '" + accu_nm + "' ");
                sb.AppendLine(" WHERE ACCU_CD = '"+accu_cd+"' ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "Update account");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public DataTable fn_accu_list()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" SELECT ACCU_CD, ACCU_NM FROM N_ACCOUNT_CODE  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_select_Sensor_list(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" (SELECT S_LOC_NM FROM N_SENSOR_LOC WHERE S_LOC_CD = N.S_LOC_CD) AS 설치위치 ");
            sb.AppendLine(" ,N.S_NM AS 센서명칭  ");
            sb.AppendLine(" ,A.INTIME AS 입력시간 ");
            sb.AppendLine(" ,case when A.S_TYPE = '1' then '온도' else '습도' end AS 데이터구분     ");
            sb.AppendLine(" ,case when A.S_TYPE = '1' then N.TMP_LOW else N.HUMI_LOW end AS 하한    ");
            sb.AppendLine(" ,case when A.S_TYPE = '1' then N.TMP_HIGH else N.HUMI_HIGH end AS 상한  ");
            sb.AppendLine(" ,A.value AS 입력값 ");
            sb.AppendLine(" ,case when A.S_TYPE = '1' then  ");
            sb.AppendLine("       case when N.TMP_HIGH+2 < A.value or N.TMP_LOW-2 > A.value then '위험'  ");
            sb.AppendLine("            else case when N.TMP_HIGH < A.value or  N.TMP_LOW > A.value then '주의' ");
            sb.AppendLine("                     else '정상' end  ");
            sb.AppendLine("            end ");
            sb.AppendLine("       else case when N.HUMI_HIGH+2 < A.value or N.HUMI_LOW-2 > A.value then '위험'   ");
            sb.AppendLine("            else case when N.HUMI_HIGH < A.value or N.HUMI_LOW > A.value then '주의'  ");
            sb.AppendLine("                     else '정상' end                                                  ");
            sb.AppendLine("            end ");
            sb.AppendLine("       end AS '상태' ");
            sb.AppendLine(" from F_PLC_INPUT A ");
            sb.AppendLine(" inner join N_SENSOR_CODE N     ");
            sb.AppendLine(" on A.DEVICE_ID = N.DEVICE_ID   ");
            sb.AppendLine(" and A.HOUSE = N.H_IDX          ");
            sb.AppendLine(" and A.NODE = N.N_IDX           ");
            sb.AppendLine(" and A.CHANNEL = N.CHANNEL      ");
            sb.AppendLine(" where 1=1  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.INTIME desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertSLoc(string s_loc_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" declare @MAX int  ");
                sb.AppendLine(" declare @newKey nvarchar(10) ");
                sb.AppendLine(" select @MAX = ISNULL(MAX(substring(S_LOC_CD,4,3)),0)+1 from N_SENSOR_LOC  ");
                sb.AppendLine(" select @newKey = 'SL-' + RIGHT('000'+convert(nvarchar,@MAX),3) ");
                sb.AppendLine(" insert into N_SENSOR_LOC (   ");
                sb.AppendLine("  S_LOC_CD                    ");
                sb.AppendLine("  ,S_LOC_NM                   ");
                sb.AppendLine(" ) values (                   ");
                sb.AppendLine("  @newKey                          ");
                sb.AppendLine("  ,'" + s_loc_nm + "' )                        ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert S_Loc");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int del_sLoc(string s_loc_cd)
        { 
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" DELETE FROM N_SENSOR_LOC  ");
                sb.AppendLine("  WHERE S_LOC_CD = '" + s_loc_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "del S_Loc");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public DataTable fn_sLoc_List()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" * FROM N_SENSOR_LOC ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int updateSLoc(string s_loc_cd, string s_loc_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" Update N_SENSOR_LOC SET ");
                sb.AppendLine(" S_LOC_NM = '"+s_loc_nm+"' ");
                sb.AppendLine("  WHERE S_LOC_CD = '" + s_loc_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update S_Loc");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int fn_updateBookMark(TreeView myTreeView)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" delete from T_BOOKMARK_MENUS WHERE STAFF_CD = '"+Common.p_strStaffNo+"'  ");

                for(int i = 1; i < myTreeView.Nodes.Count; i++)
                {
                    for (int j = 0; j < myTreeView.Nodes[i].Nodes.Count; j++)
                    {
                        if(myTreeView.Nodes[i].Nodes[j].Checked == true)
                        {
                            sb.AppendLine(" insert into T_BOOKMARK_MENUS values ( '" + Common.p_strStaffNo + "', '" + myTreeView.Nodes[i].Nodes[j].Name + "' ) "); 
                        }
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update bookMark");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public DataTable selectBookMarkMenu()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.SubID ");
            sb.AppendLine("     , a.SubName ");
            sb.AppendLine("     , a.AsmName ");
            sb.AppendLine("     , t.TopName ");
            sb.AppendLine("      , case when c.STAFF_CD is null then 'N' else 'Y' end as BOOKMARK ");
            sb.AppendLine(" from T_SubMenu a ");
            sb.AppendLine("  left outer join T_TopMenu t ");
            sb.AppendLine("  on a.TopID = t.TopID ");
            sb.AppendLine(" inner join N_AUTH_SUB b ");
            sb.AppendLine(" on a.TopID = b.TopID ");
            sb.AppendLine("     and a.SubID = b.SubID ");
            sb.AppendLine("  left outer join T_BOOKMARK_MENUS c ");
            sb.AppendLine("  on a.AsmName = c.AsmName ");
            sb.AppendLine("  and c.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and b.AUTH_YN = 'Y'  ");
            sb.AppendLine("     and b.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine("     and c.STAFF_CD is not null ");

            sb.AppendLine(" order by a.SortNo asc ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable selectBookMarkMenu_admin()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.SubID ");
            sb.AppendLine("     , a.SubName ");
            sb.AppendLine("     , a.AsmName ");
            sb.AppendLine("      , case when c.STAFF_CD is null then 'N' else 'Y' end as BOOKMARK ");
            sb.AppendLine("       ,b.TopName ");
            sb.AppendLine(" from T_SubMenu a ");
            sb.AppendLine("  left outer join T_TopMenu b ");
            sb.AppendLine("  on a.TopID = b.TopID ");
            sb.AppendLine("  left outer join T_BOOKMARK_MENUS c ");
            sb.AppendLine("  on a.AsmName = c.AsmName ");
            sb.AppendLine("  and c.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and c.STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine("     and c.STAFF_CD is not null ");

            sb.AppendLine(" order by a.SortNo asc ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_last_Notice()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select top 1 A.TITLE,A.CONTENT,A.INTIME,B.STAFF_NM from n_notice  as A   ");
            sb.AppendLine(" inner join N_STAFF_CODE as B  on A.INSTAFF=B.STAFF_CD ");
            sb.AppendLine(" order by INTIME desc ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_Notice(string condition)
        {
            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.TITLE,A.CONTENT,A.INTIME,B.STAFF_NM from n_notice  as A  ");
            sb.AppendLine("inner join N_STAFF_CODE as B  on A.INSTAFF=B.STAFF_CD");
            sb.AppendLine("where INTIME like '%" + condition + "%' ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_menu_click_log(string sFrmName)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" insert into T_MENU_CLICK_LOG values ('"+DateTime.Now.ToString("yyyy-MM-dd")+"','"+Common.p_strStaffNo+"','"+sFrmName+"'   )");
                
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update bookMark");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public DataTable select_menu_click_log_last20()
        {
            wnAdo wAdo = new wnAdo();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select top 20  ");
            sb.AppendLine("  COUNT(*) as COUNT ");
            sb.AppendLine("  , STAFF_CD       ");
            sb.AppendLine("  , a.AsmName      ");
            sb.AppendLine("  , b.SubName      ");
            sb.AppendLine("  , c.TopName      ");
            sb.AppendLine("  from T_MENU_CLICK_LOG a ");
            sb.AppendLine("  left outer join T_SubMenu b ");
            sb.AppendLine("  on a.AsmName = b.AsmName ");
            sb.AppendLine("  left outer join T_TopMenu c ");
            sb.AppendLine("  on c.TopID = b.TopID ");
            sb.AppendLine("  where STAFF_CD = '" + Common.p_strStaffNo + "' ");
            sb.AppendLine("  and a.INTIME >= '" + DateTime.Now.AddDays(-14).ToString("yyyy-MM-dd") + "' ");
            sb.AppendLine("  group by STAFF_CD,a.AsmName,b.SubName,c.TopName ");
            sb.AppendLine("  order by COUNT(*) desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Plan_List_cal_soyo(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine("    select * from (                                                                                                                     ");
            sb.AppendLine("  	select                                                                                                                             ");
            sb.AppendLine("  	PD.PLAN_DATE                                                                                                                       ");
            sb.AppendLine("  	,PD.PLAN_CD                                                                                                                        ");
            sb.AppendLine("  	,PN.PLAN_NUM                                                                                                                       ");
            sb.AppendLine("  	,PD.SEQ ");
            sb.AppendLine("  	,PD.ITEM_CD AS ITEM_CNT                                                                                                            ");
            sb.AppendLine("  	,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE PD.ITEM_CD =ITEM_CD) AS ITEM_NM                                                            ");
            sb.AppendLine("  	,case when (select count(*) from F_PLAN_DETAIL WHERE PLAN_DATE = PD.PLAN_DATE and PLAN_CD = PD.PLAN_CD)>1 then "); 
            sb.AppendLine(" (SELECT ITEM_NM FROM N_ITEM_CODE WHERE PD.ITEM_CD =ITEM_CD) +' 등 '+(select convert(nvarchar,count(*)) from F_PLAN_DETAIL WHERE PLAN_DATE = PD.PLAN_DATE and PLAN_CD = PD.PLAN_CD)+'개 제품' ");
            sb.AppendLine(" else (SELECT ITEM_NM FROM N_ITEM_CODE WHERE PD.ITEM_CD =ITEM_CD) end AS ITEM_CNT2                                                          ");
            sb.AppendLine("  	,PN.CUST_CD AS CUST_CD                                                                                                             ");
            sb.AppendLine("  	,(SELECT CUST_NM FROM N_CUST_CODE WHERE PN.CUST_CD = CUST_CD) AS CUST_NM                                                           ");
            sb.AppendLine("  	,PN.DELIVER_REQ_DATE                                                                                                               ");
            sb.AppendLine("  	,case when PN.ORDER_YN = 'N' then '미산출' else '산출' end AS ORDER_YN                                                             ");
            sb.AppendLine("  	,PN.COMMENT                                                                                                                        ");
            sb.AppendLine("  	,PD.TOTAL_AMT                                                                                                                      ");
            sb.AppendLine("  	,(SELECT COUNT(*)                                                                                                                  ");
            sb.AppendLine("  	 from N_ITEM_COMP A                                                                                                                ");
            sb.AppendLine("  	 left outer join N_ITEM_CODE B                                                                                                     ");
            sb.AppendLine("  	 on A.ITEM_CD = B.ITEM_CD                                                                                                          ");
            sb.AppendLine("  	 left outer join N_RAW_CODE C                                                                                                      ");
            sb.AppendLine("  	 on A.RAW_MAT_CD = C.RAW_MAT_CD                                                                                                    ");
            sb.AppendLine("  	 left outer join (SELECT                                                                                                           ");
            sb.AppendLine("  		ISNULL(SUM(A.TOTAL_AMT),0) - ISNULL(SUM(B.TEMP_AMT),0) AS NOT_INPUT_ORDER_AMT                                                  ");
            sb.AppendLine("  		,A.RAW_MAT_CD                                                                                                                  ");
            sb.AppendLine("  		 FROM F_ORDER_DETAIL A                                                                                                         ");
            sb.AppendLine("  		 left outer join (SELECT                                                                                                       ");
            sb.AppendLine("  		    SUM(ISNULL(TEMP_AMT,0)) AS TEMP_AMT, ORDER_DATE, ORDER_CD, ORDER_SEQ                                                       ");
            sb.AppendLine("  		    FROM F_RAW_DETAIL                                                                                                          ");
            sb.AppendLine("  		    group by ORDER_DATE,ORDER_CD,ORDER_SEQ) B                                                                                  ");
            sb.AppendLine("  		 on A.ORDER_DATE = B.ORDER_DATE                                                                                                ");
            sb.AppendLine("  		 and A.ORDER_CD = B.ORDER_CD                                                                                                   ");
            sb.AppendLine("  		 and A.SEQ = B.ORDER_SEQ                                                                                                       ");
            sb.AppendLine("  		 group by RAW_MAT_CD                                                                                                           ");
            sb.AppendLine("  		 ) O                                                                                                                           ");
            sb.AppendLine("  	 on O.RAW_MAT_CD = A.RAW_MAT_CD                                                                                                    ");
            sb.AppendLine("  	 where A.ITEM_CD = PD.ITEM_CD                                                                                                      ");
            sb.AppendLine("  	 and ISNULL(C.BAL_STOCK,0)+ISNULL(NOT_INPUT_ORDER_AMT,0) < ISNULL(A.TOTAL_AMT,0)*(ISNULL(PD.TOTAL_AMT,0)-ISNULL(W.INST_AMT,0))*ISNULL(C.CVR_RATIO,1)   ");
            sb.AppendLine("  	 ) as COUNTT                                                                                               ");
            sb.AppendLine("  	from F_PLAN_GROUP P                                                                                        ");
            sb.AppendLine("  left outer join F_PLAN_DETAIL PD                                                                              ");
            sb.AppendLine("  	on P.PLAN_DATE = PD.PLAN_DATE                                                                              ");
            sb.AppendLine("  	and P.PLAN_CD = PD.PLAN_CD                                                                                 ");
            sb.AppendLine("  	and P.ITEM_CD = PD.ITEM_CD                                                                                 ");
            sb.AppendLine("  	left outer join F_PLAN PN                                                                                  ");
            sb.AppendLine("  	on PN.PLAN_DATE = PD.PLAN_DATE                                                                             ");
            sb.AppendLine("  	and PN.PLAN_CD = PD.PLAN_CD                                                                                ");
            sb.AppendLine("  	left outer join (SELECT PLAN_NUM, PLAN_ITEM, ISNULL(SUM(INST_AMT),0) AS INST_AMT FROM F_WORK_INST A        ");
            sb.AppendLine("  	WHERE RAW_OUT_YN = 'Y'                                                                                     ");
            sb.AppendLine("  	group by PLAN_NUM, PLAN_ITEM                                                                               ");
            sb.AppendLine("  	 )W                                                                                                        ");
            sb.AppendLine("  	on W.PLAN_NUM = PN.PLAN_NUM                                                                                ");
            sb.AppendLine("  	and W.PLAN_ITEM = PD.ITEM_CD                                                                               ");
            sb.AppendLine(condition);
            sb.AppendLine("                                                                                                                ");
            sb.AppendLine("  ) A                                                                                                           ");
            //sb.AppendLine("  where COUNTT > 0                                                                                              ");
            sb.AppendLine("   where A.ORDER_YN = '미산출'                                                                                               ");
            sb.AppendLine("  order by A.PLAN_DATE desc , A.PLAN_CD desc                                                                    ");

            Debug.WriteLine(sb);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int fn_Error_Report(string Error_gubun, string Error_Report, string Error_Log)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" INSERT INTO [SM_FACTORY_REPORT].dbo.T_ERROR_REPORT ( ");
                sb.AppendLine(" ERROR_GUBUN, COM_LOCATION, SAUP_NM, ERROR_LOG, ERROR_REPORT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine(" '" + Error_gubun + "', '" + Common.p_loginLocation + "', '" + Common.p_strCompNm + "' , '" + Error_Log.Replace("'", "") + "' , '" + Error_Report.Replace("'", "") + "' ) ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "Error_Report");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int fn_insert_cust_cd_from_Excel(conDataGridView excelGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < excelGrid.Rows.Count; i++)
                {
                    sb.AppendLine(" INSERT INTO N_CUST_CODE ( ");
                    sb.AppendLine(" CUST_CD ");            //cust_cd
                    sb.AppendLine(" ,CUST_GUBUN ");        //cust_gubun
                    sb.AppendLine(" ,CUST_NM ");           //cust_nm
                    sb.AppendLine(" ,OWNER ");             //owner
                    sb.AppendLine(" ,SAUP_NO ");           //saupno
                    sb.AppendLine(" ,UPTAE ");             //uptae
                    sb.AppendLine(" ,JONGMOK ");           //jong
                    sb.AppendLine(" ,DEAL_TYPE ");         //deal_type
                    sb.AppendLine(" ,POST_NO ");           //post
                    sb.AppendLine(" ,ADDR ");              //addr
                    sb.AppendLine(" ,CUST_MANAGER ");      //cust_manager
                    sb.AppendLine(" ,CUST_EMAIL ");        //eamil
                    sb.AppendLine(" ,CUST_PHONE ");        //cust_phone
                    sb.AppendLine(" ,CUST_COMP_PHONE ");   //cust_comp_phone
                    sb.AppendLine(" ,CUST_FAX ");          //fax
                    sb.AppendLine(" ,CUST_OPEN ");         //open_date
                    sb.AppendLine(" ,STAFF_CD ");          //staff
                    sb.AppendLine(" ,USED_CD ");           //used_cd
                    sb.AppendLine(" ,COMMENT ");           //comment
                    sb.AppendLine(" ,TAX_CD ");            //tax
                    sb.AppendLine(" ,BALANCE ");           //balance
                    sb.AppendLine(" ,ISSUE_RATIO ");       //ratio
                    sb.AppendLine(" ) VALUES (");
                    sb.AppendLine(" '" + (excelGrid.Rows[i].Cells[0].Value == null ? "" : excelGrid.Rows[i].Cells[0].Value.ToString()) + "'  ");                 //cust_cd
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[1].Value == null ? "" : excelGrid.Rows[i].Cells[1].Value.ToString()) + "'  ");            //cust_gubun
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[2].Value == null ? "" : excelGrid.Rows[i].Cells[2].Value.ToString()) + "'  ");            //cust_nm
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[3].Value == null ? "" : excelGrid.Rows[i].Cells[3].Value.ToString()) + "'  ");            //owner
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[4].Value == null ? "" : excelGrid.Rows[i].Cells[4].Value.ToString()) + "'  ");            //saupno
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[5].Value == null ? "" : excelGrid.Rows[i].Cells[5].Value.ToString()) + "'  ");            //uptae
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[6].Value == null ? "" : excelGrid.Rows[i].Cells[6].Value.ToString()) + "'   ");           //jongmok                                                                                                      //jong
                    sb.AppendLine(" ,''  ");                                                                                                                 //deal_type
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[7].Value == null ? "" : excelGrid.Rows[i].Cells[7].Value.ToString()) + "'  ");            //post
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[8].Value == null ? "" : excelGrid.Rows[i].Cells[8].Value.ToString()) + "'  ");            //addr
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[9].Value == null ? "" : excelGrid.Rows[i].Cells[9].Value.ToString()) + "'  ");           //cust_manager
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[10].Value == null ? "" : excelGrid.Rows[i].Cells[10].Value.ToString()) + "'  ");          //email                                                                                                    //eamil
                    sb.AppendLine(" ,''  ");                                                                                                                 //cust_phone
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[11].Value == null ? "" : excelGrid.Rows[i].Cells[11].Value.ToString()) + "'  ");           //cust_comp_phone
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[12].Value == null ? "" : excelGrid.Rows[i].Cells[12].Value.ToString()) + "'  ");           //fax
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[13].Value == null ? "" : excelGrid.Rows[i].Cells[13].Value.ToString()) + "'  ");           //open_date
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[14].Value == null ? "" : excelGrid.Rows[i].Cells[14].Value.ToString()) + "'  ");            //staff
                    sb.AppendLine(" ,'1'  ");                                                                                                               //used_cd
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[15].Value == null ? "" : excelGrid.Rows[i].Cells[15].Value.ToString()) + "'  ");           //comment
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[16].Value == null ? "" : excelGrid.Rows[i].Cells[16].Value.ToString()) + "'  ");            //tax
                    sb.AppendLine(" ,'0'  ");                                                                                                                //balance
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[17].Value == null ? "" : excelGrid.Rows[i].Cells[17].Value.ToString()) + "'  ");            //ratio
                    sb.AppendLine(" )  ");                                                                                                                   
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "input cust_cd from Excel");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public int fn_insert_raw_cd_from_Excel(conDataGridView excelGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < excelGrid.Rows.Count; i++)
                {
                    sb.AppendLine(" INSERT INTO N_RAW_CODE ( ");
                    sb.AppendLine(" RAW_MAT_CD ");               //RAW_MAT_CD ");         //1
                    sb.AppendLine(" ,RAW_MAT_GUBUN ");           //RAW_MAT_GUBUN ");      //2
                    sb.AppendLine(" ,RAW_MAT_NM ");              //RAW_MAT_NM ");         //3
                    sb.AppendLine(" ,SPEC ");                    //SPEC ");               //4
                    sb.AppendLine(" ,INPUT_UNIT ");              //INPUT_UNIT ");         //5
                    sb.AppendLine(" ,OUTPUT_UNIT ");             //OUTPUT_UNIT ");        //6
                    sb.AppendLine(" ,CVR_RATIO ");               //CVR_RATIO ");          //7
                    sb.AppendLine(" ,INPUT_PRICE ");             //INPUT_PRICE ");        //8
                    sb.AppendLine(" ,RAW_STORAGE ");             //RAW_STORAGE ");        //9
                    sb.AppendLine(" ,CUST_CD ");                 //CUST_CD ");            //10
                    sb.AppendLine(" ,BASIC_STOCK ");             //BASIC_STOCK ");        //11
                    sb.AppendLine(" ,CHECK_GUBUN ");               //CHECK_GUBUN ");      //12
                    sb.AppendLine(" ,TAX_CD ");                  //TAX_CD ");             //13
                    sb.AppendLine(" ,USED_CD ");                 //USED_CD ");            //14
                    sb.AppendLine(" ,ST_STATUS_YN ");            //ST_STATUS_YN ");       //15
                    sb.AppendLine(" ,BAL_STOCK ");               //BAL_STOCK ");          //16
                    sb.AppendLine(" ,PROP_STOCK ");              //PROP_STOCK ");         //17
                    sb.AppendLine(" ,TYPE_CD ");                 //TYPE_CD ");            //18
                    sb.AppendLine(" ,LINE_CD ");                 //LINE_CD ");            //19
                    sb.AppendLine(" ,COMMENT ");                 //COMMENT ");            //20
                    sb.AppendLine(" ,EX_STAN_QUALITY ");         //EX_STAN_QUALITY ");    //21
                    sb.AppendLine(" ,PART_NO ");                 //PART_NO ");            //22
                    sb.AppendLine(" ,OUTPUT_PRICE ");                 //OUTPUT_PRICE ");            //23
                    sb.AppendLine(" ) VALUES (");                
                    sb.AppendLine(" '" + (excelGrid.Rows[i].Cells[0].Value == null ? "" : excelGrid.Rows[i].Cells[0].Value.ToString()) + "'  ");            //RAW_MAT_CD ");      //1
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[1].Value == null ? "" : excelGrid.Rows[i].Cells[1].Value.ToString()) + "'  ");           //,RAW_MAT_GUBUN ");  //2
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[2].Value == null ? "" : excelGrid.Rows[i].Cells[2].Value.ToString()) + "'  ");           //,RAW_MAT_NM ");     //3
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[3].Value == null ? "" : excelGrid.Rows[i].Cells[3].Value.ToString()) + "'  ");           //,SPEC ");           //4
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[4].Value == null ? "" : excelGrid.Rows[i].Cells[4].Value.ToString()) + "'  ");           //,INPUT_UNIT ");     //5
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[5].Value == null ? "" : excelGrid.Rows[i].Cells[5].Value.ToString()) + "'   ");          //,OUTPUT_UNIT ");    //6                                                                                          //jong
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[6].Value == null ? "" : excelGrid.Rows[i].Cells[6].Value.ToString()) + "'    ");         //,CVR_RATIO ");      //7                                                                                                       //,CVR_RATIO ");      
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[7].Value == null ? "" : excelGrid.Rows[i].Cells[7].Value.ToString()) + "' ");           //,INPUT_PRICE ");     //8
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[8].Value == null ? "" : excelGrid.Rows[i].Cells[8].Value.ToString()) + "'  ");           //,RAW_STORAGE ");    //9
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[9].Value == null ? "" : excelGrid.Rows[i].Cells[9].Value.ToString()) + "' ");           //,CUST_CD ");       //10 
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[10].Value == null ? "" : excelGrid.Rows[i].Cells[10].Value.ToString()) + "' ");           //,BASIC_STOCK ");   //11   
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[11].Value == null ? "" : excelGrid.Rows[i].Cells[11].Value.ToString()) + "' ");           //,CHK_GUBUN ");     //12   
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[12].Value == null ? "" : excelGrid.Rows[i].Cells[12].Value.ToString()) + "' ");           //,TAX_CD ");        //13   
                    sb.AppendLine(" ,'1'  ");         //,USED_CD ");                                                                                                              //14
                    sb.AppendLine(" ,'Y'  ");         //,ST_STATUS_YN ");                                                                                                         //15
                    sb.AppendLine(" ,'0'  ");         //,BAL_STOCK ");                                                                                                            //16
                    sb.AppendLine(" ,'0'  ");         //,PROP_STOCK ");                                                                                                           //17
                    sb.AppendLine(" ,''  ");         //,TYPE_CD ");                                                                                                               //18
                    sb.AppendLine(" ,''  ");         //,LINE_CD ");                                                                                                               //19
                    sb.AppendLine(" ,''  ");         //,COMMENT ");                                                                                                               //20
                    sb.AppendLine(" ,''  ");         //,EX_STAN_QUALITY ");                                                                                                       //21
                    sb.AppendLine(" ,''  ");         //,PART_NO ");                                                                                                               //22
                    sb.AppendLine(" ,'0'  ");          //OUTPUT_PRICE                                                                                                 //23
                    sb.AppendLine(" )  ");

                    if (excelGrid.Rows[i].Cells[9].Value != null && !excelGrid.Rows[i].Cells[9].Value.ToString().Equals(""))
                    {
                        sb.AppendLine(" INSERT INTO N_RAW_CUST ( ");
                        sb.AppendLine(" RAW_MAT_CD ");
                        sb.AppendLine(" ,CUST_CD ");
                        sb.AppendLine(" ,MAIN_YN ");
                        sb.AppendLine(" ,SEQ ");
                        sb.AppendLine(" ,COMMENT ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine(" '" + (excelGrid.Rows[i].Cells[0].Value == null ? "" : excelGrid.Rows[i].Cells[0].Value.ToString()) + "' ");
                        sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[9].Value == null ? "" : excelGrid.Rows[i].Cells[9].Value.ToString()) + "' ");
                        sb.AppendLine(" ,'Y'  ");      
                        sb.AppendLine(" ,'1'  ");      
                        sb.AppendLine(" ,''  ");       
                        sb.AppendLine(" )  ");         
                    }
                                                                                                  
                }                                                                                                                                                                 

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "input raw_mat_cd from Excel");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public int fn_insert_item_cd_from_Excel(conDataGridView excelGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < excelGrid.Rows.Count; i++)
                {
                    sb.AppendLine(" INSERT INTO N_ITEM_CODE ( ");
                    sb.AppendLine(" ITEM_CD ");         //ITEM_CD ");         //1
                    sb.AppendLine(" ,ITEM_GUBUN ");     //,ITEM_GUBUN ");     //2
                    sb.AppendLine(" ,ITEM_NM ");        //,ITEM_NM ");        //3
                    sb.AppendLine(" ,SPEC ");           //,SPEC ");           //4
                    sb.AppendLine(" ,UNIT_CD ");        //,UNIT_CD ");        //5
                    sb.AppendLine(" ,OUTPUT_PRICE ");   //,OUTPUT_PRICE ");   //6
                    sb.AppendLine(" ,BASIC_STOCK ");    //,BASIC_STOCK ");    //7
                    sb.AppendLine(" ,CUST_CD ");        //,CUST_CD ");        //8
                    sb.AppendLine(" ,VAT_CD ");         //,VAT_CD ");         //9
                    //                                  //                    //10
                    sb.AppendLine(" ,TYPE_CD ");        //,TYPE_CD ");        //11
                    sb.AppendLine(" ,LINE_CD ");        //,LINE_CD ");        //12
                    sb.AppendLine(" ,EXAM_GRADE_YN ");  //,EXAM_GRADE_YN ")   //13
                    sb.AppendLine(" ,PROP_STOCK ");     //,PROP_STOCK ");     //14
                    sb.AppendLine(" ,INPUT_PRICE ");    //,INPUT_PRICE ");    //15
                    sb.AppendLine(" ,BAL_STOCK ");      //,BAL_STOCK ");      //16
                    sb.AppendLine(" ,COMMENT ");        //,COMMENT ");        //17
                    sb.AppendLine(" ,PACK_AMT ");       //,PACK_AMT ");       //18
                    sb.AppendLine(" ,STOCK_LOC ");      //,STOCK_LOC ");      //19
                    sb.AppendLine(" ,CHARGE_AMT ");     //,CHARGE_AMT ");     //20
                    sb.AppendLine(" ,BOX_BAR_CD ");     //,BOX_BAR_CD ");     //21
                    sb.AppendLine(" ,UNIT_BAR_CD ");     //,BOX_BAR_CD ");     //21
                    sb.AppendLine(" ,BOX_AMT ");        //,BOX_AMT ");        //22
                    sb.AppendLine(" ,UNIT_AMT ");       //,UNIT_AMT ");       //23
                    sb.AppendLine(" ,ITEM_WEIGHT ");    //,ITEM_WEIGHT ");    //24
                    sb.AppendLine(" ,PRINT_YN ");       //,PRINT_YN ");       //25
                    sb.AppendLine(" ,USED_CD ");        //,USED_CD ");        //26
                    sb.AppendLine(" ,INPUT_DATE ");     //,INPUT_DATE ");     //27
                    sb.AppendLine(" ,LINK_CD ");        //,LINK_CD ");        //28
                    sb.AppendLine(" )VALUES( ");
                    sb.AppendLine(" '" + (excelGrid.Rows[i].Cells[0].Value == null ? "" : excelGrid.Rows[i].Cells[0].Value.ToString()) + "' ");   //1
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[1].Value == null ? "" : excelGrid.Rows[i].Cells[1].Value.ToString()) + "' ");  //2
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[2].Value == null ? "" : excelGrid.Rows[i].Cells[2].Value.ToString()) + "' ");  //3
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[3].Value == null ? "" : excelGrid.Rows[i].Cells[3].Value.ToString()) + "' ");  //4
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[4].Value == null ? "" : excelGrid.Rows[i].Cells[4].Value.ToString()) + "' ");  //5
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[5].Value == null ? "" : excelGrid.Rows[i].Cells[5].Value.ToString()) + "' ");  //6
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[6].Value == null ? "" : excelGrid.Rows[i].Cells[6].Value.ToString()) + "' ");  //7
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[7].Value == null ? "" : excelGrid.Rows[i].Cells[7].Value.ToString()) + "' ");  //8
                    sb.AppendLine(" ,'" + (excelGrid.Rows[i].Cells[8].Value == null ? "" : excelGrid.Rows[i].Cells[8].Value.ToString()) + "' ");  //9
                    //10
                    sb.AppendLine(" ,'' ");                                                                                                       //11
                    sb.AppendLine(" ,'' ");                                                                                                       //12
                    sb.AppendLine(" ,'' ");                                                                                                       //13
                    sb.AppendLine(" ,'0' ");                                                                                                      //14
                    sb.AppendLine(" ,'0' ");                                                                                                      //15
                    sb.AppendLine(" ,'0' ");                                                                                                      //16
                    sb.AppendLine(" ,'' ");                                                                                                       //17
                    sb.AppendLine(" ,'0' ");                                                                                                      //18
                    sb.AppendLine(" ,'' ");                                                                                                       //19
                    sb.AppendLine(" ,'0' ");                                                                                                      //20
                    sb.AppendLine(" ,'' ");                                                                                                       //21
                    sb.AppendLine(" ,'' ");                                                                                                        //2
                    sb.AppendLine(" ,'0' ");                                                                                                      //22
                    sb.AppendLine(" ,'1' ");                                                                                                      //23
                    sb.AppendLine(" ,'0' ");                                                                                                      //24
                    sb.AppendLine(" ,'N' ");                                                                                                      //25
                    sb.AppendLine(" ,'1' ");                                                                                                      //26
                    sb.AppendLine(" ,'" + DateTime.Now.ToString("yyyy-MM-dd") + "' ");                                                                //27
                    sb.AppendLine(" ,'' ");                                                                                                       //28
                    sb.AppendLine(" )  ");

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "input item_cd from Excel");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public DataTable select_program_alram()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");

            sb.AppendLine("  select                                                                                                                                                         ");
            sb.AppendLine("  (select                                                                                                                                                        ");
            sb.AppendLine("  COUNT (*) AS NOT_BUY                                                                                                                                           ");
            sb.AppendLine("   from F_RAW_INPUT A                                                                                                                                            ");
            sb.AppendLine("  where CUST_CD = '' or CUST_CD is null) AS NOT_BUY                                                                                                              ");
            sb.AppendLine("  ,(select                                                                                                                                                       ");
            sb.AppendLine("  COUNT(*) AS JUMUN_OVER                                                                                                                                         ");
            sb.AppendLine("  from F_JUMUN A                                                                                                                                                 ");
            sb.AppendLine("  where 1=1                                                                                                                                                      ");
            sb.AppendLine("  and COMPLETE_YN = 'N' and COMPLETE_YN is not null                                                                                                              ");
            sb.AppendLine("  and DELIVERY_REQ_DATE < CONVERT(nvarchar,getdate(),23)                                                                                                         ");
            sb.AppendLine("   ) AS JUMUN_OVER                                                                                                                                               ");
            sb.AppendLine("  ,(select                                                                                                                                                       ");
            sb.AppendLine("  COUNT(*) AS JUMUN_WAR                                                                                                                                          ");
            sb.AppendLine("  from F_JUMUN A                                                                                                                                                 ");
            sb.AppendLine("  where 1=1                                                                                                                                                      ");
            sb.AppendLine("  and COMPLETE_YN = 'N' and COMPLETE_YN is not null                                                                                                              ");
            sb.AppendLine("  and DELIVERY_REQ_DATE <= CONVERT(nvarchar,getdate()+2,23)                                         ");
            sb.AppendLine("  ) AS JUMUN_WAR                                                                                                                                                 ");
            sb.AppendLine("  ,(                                                                                                                                                             ");
            sb.AppendLine("  select                                                                                                                                                         ");
            sb.AppendLine("  COUNT(*) AS ORDER_OVER                                                                                                                                         ");
            sb.AppendLine("  FROM F_ORDER_DETAIL A                                                                                                                                          ");
            sb.AppendLine("  left outer join (SELECT ORDER_DATE, ORDER_CD, ORDER_SEQ, SUM(TEMP_AMT) AS INPUT_AMT FROM F_RAW_DETAIL group by ORDER_DATE,ORDER_CD,ORDER_SEQ) B                ");
            sb.AppendLine("  on A.ORDER_DATE = B.ORDER_DATE                                                                                                                                 ");
            sb.AppendLine("  and A.ORDER_CD = B.ORDER_CD                                                                                                                                    ");
            sb.AppendLine("  and A.SEQ = B.ORDER_SEQ                                                                                                                                        ");
            sb.AppendLine("  left outer join F_ORDER C                                                                                                                                      ");
            sb.AppendLine("  on A.ORDER_DATE = C.ORDER_DATE                                                                                                                                 ");
            sb.AppendLine("  and A.ORDER_CD = C.ORDER_CD                                                                                                                                    ");
            sb.AppendLine("  where A.INPUT_YN = 'N' or A.INPUT_YN is null                                                                                                                   ");
            sb.AppendLine("  and A.TOTAL_AMT - ISNULL(B.INPUT_AMT,0) > 0                                                                                                                    ");
            sb.AppendLine("  and C.INPUT_REQ_DATE < CONVERT(nvarchar,getdate(),23)                                                                                                          ");
            sb.AppendLine("  ) AS ORDER_OVER                                                                                                                                                ");
            sb.AppendLine("  ,(                                                                                                                                                             ");
            sb.AppendLine("  select                                                                                                                                                         ");
            sb.AppendLine("  COUNT(*) AS ORDER_WAR                                                                                                                                          ");
            sb.AppendLine("  FROM F_ORDER_DETAIL A                                                                                                                                          ");
            sb.AppendLine("  left outer join (SELECT ORDER_DATE, ORDER_CD, ORDER_SEQ, SUM(TEMP_AMT) AS INPUT_AMT FROM F_RAW_DETAIL group by ORDER_DATE,ORDER_CD,ORDER_SEQ) B                ");
            sb.AppendLine("  on A.ORDER_DATE = B.ORDER_DATE                                                                                                                                 ");
            sb.AppendLine("  and A.ORDER_CD = B.ORDER_CD                                                                                                                                    ");
            sb.AppendLine("  and A.SEQ = B.ORDER_SEQ                                                                                                                                        ");
            sb.AppendLine("  left outer join F_ORDER C                                                                                                                                      ");
            sb.AppendLine("  on A.ORDER_DATE = C.ORDER_DATE                                                                                                                                 ");
            sb.AppendLine("  and A.ORDER_CD = C.ORDER_CD                                                                                                                                    ");
            sb.AppendLine("  where A.INPUT_YN = 'N' or A.INPUT_YN is null                                                                                                                   ");
            sb.AppendLine("  and A.TOTAL_AMT - ISNULL(B.INPUT_AMT,0) > 0                                                                                                                    ");
            sb.AppendLine("  and C.INPUT_REQ_DATE <= CONVERT(nvarchar,getdate()+2,23)                                              ");
            sb.AppendLine("  ) AS ORDER_WAR                                                                                                                                                 ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_all_custCd(string cust_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine(" select distinct * from (select CUST_CD from F_PLAN    ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_RAW_INPUT                       ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_BUY                             ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_JUMUN                           ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_SALES                           ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_ITEM_OUT                        ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_WORK_INST                       ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_COLLECT                         ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_GIVE                            ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from T_CUST_BALANCE_HIS                ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from T_CUST_DAY_TOTAL                  ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from N_RAW_CODE                        ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from N_RAW_CUST                        ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from N_ITEM_CODE                       ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_ESTIMATE                        ");
            sb.AppendLine(" union all                                             ");
            sb.AppendLine(" select CUST_CD from F_ORDER                           ");
            sb.AppendLine(" )A                                                    ");
            sb.AppendLine(" where A.CUST_CD = '"+cust_cd+"'       ");

            


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_all_itemCd(string item_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine("  select distinct * from ( ");
            sb.AppendLine("  select ITEM_CD from F_PLAN_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_JUMUN_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_SALES_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_ITEM_OUT_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_WORK_INST ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select PRODUCT_CD from F_ESTIMATE_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_ITEM_INPUT ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select ITEM_CD from F_PLAN_GROUP ");
            sb.AppendLine("  )A  ");
            sb.AppendLine("  where A.ITEM_CD = '"+item_cd+"' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_all_rawCd(string raw_mat_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine("  select distinct * from ( ");
            sb.AppendLine("  select RAW_MAT_CD from F_RAW_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select RAW_MAT_CD from F_ORDER_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select RAW_MAT_CD from F_BUY_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select RAW_MAT_CD from N_ITEM_COMP ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select RAW_MAT_CD from F_RAW_OUTPUT ");
            sb.AppendLine("  )A  ");
            sb.AppendLine("  where A.RAW_MAT_CD = '" + raw_mat_cd + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable select_all_flowCd(string flow_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    ");
            sb.AppendLine("  select distinct * from ( ");
            sb.AppendLine("  select FLOW_CD from N_ITEM_FLOW  ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select FLOW_CD from F_WORK_FLOW_DETAIL ");
            sb.AppendLine("  union all  ");
            sb.AppendLine("  select FLOW_CD from F_ITEM_INPUT ");
            sb.AppendLine("  )A  ");
            sb.AppendLine("  where A.FLOW_CD = '" + flow_cd + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Order_Status(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select   ");
            sb.AppendLine("  A.ORDER_DATE  ");
            sb.AppendLine("  ,A.ORDER_CD  ");
            sb.AppendLine("  ,A.INPUT_REQ_DATE  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  ,B.DONE_COUNT  ");
            sb.AppendLine("  ,B.TOTAL_COUNT  ");
            sb.AppendLine("  ,convert(nvarchar,B.DONE_COUNT) + '/' + convert(nvarchar,B.TOTAL_COUNT) AS 완료여부  ");
            sb.AppendLine("  ,case when B.DONE_COUNT = B.TOTAL_COUNT then '완료' else '미완료' end as FLAG  ");
            sb.AppendLine("  ,(select case when B.TOTAL_COUNT > 1 then RAW_MAT_NM+' 외 '+convert(nvarchar,(B.TOTAL_COUNT-1))+'개' else RAW_MAT_NM end as RAW_MAT_NM FROM N_RAW_CODE WHERE RAW_MAT_CD = (select top 1 RAW_MAT_CD from F_ORDER_DETAIL where A.ORDER_DATE = ORDER_DATE and A.ORDER_CD = ORDER_CD)) as RAW_MAT_NM  ");
            sb.AppendLine("  from F_ORDER A  ");
            sb.AppendLine("  left outer join (select ORDER_DATE,ORDER_CD,SUM(DONE_COUNT) AS DONE_COUNT,SUM(TOTAL_COUNT) AS TOTAL_COUNT from (SELECT   ");
            sb.AppendLine("  			A.ORDER_DATE  ");
            sb.AppendLine("  			, A.ORDER_CD   ");
            sb.AppendLine("  			, A.SEQ  ");
            sb.AppendLine("  			, ISNULL(SUM(B.TEMP_AMT),0) AS INPUT_AMT  ");
            sb.AppendLine("  			, ISNULL(A.TOTAL_AMT,0) AS ORDER_AMT  ");
            sb.AppendLine("  			, case when ISNULL(SUM(B.TEMP_AMT),0) >= ISNULL(A.TOTAL_AMT,0) then 1 else 0 end DONE_COUNT  ");
            sb.AppendLine("  			, COUNT(*) as TOTAL_COUNT  ");
            sb.AppendLine("  			from F_ORDER_DETAIL A  ");
            sb.AppendLine("  			left outer join (SELECT ORDER_DATE, ORDER_CD, ORDER_SEQ,SUM(TEMP_AMT) AS TEMP_AMT FROM F_RAW_DETAIL group by ORDER_DATE, ORDER_CD,ORDER_SEQ) B  ");
            sb.AppendLine("  			on A.ORDER_DATE = B.ORDER_DATE  ");
            sb.AppendLine("  			and A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine("  			and A.SEQ = B.ORDER_SEQ  ");
            sb.AppendLine("  			group by A.ORDER_DATE,A.ORDER_CD,A.SEQ, A.TOTAL_AMT  ");
            sb.AppendLine("  			)A group by ORDER_DATE,ORDER_CD ) B  ");
            sb.AppendLine("  on A.ORDER_DATE = B.ORDER_DATE  ");
            sb.AppendLine("  and A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine("  where 1=1   ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Order_Status_detail(string order_date, string order_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  SELECT   ");
	        sb.AppendLine("  A.ORDER_DATE  ");
            sb.AppendLine(" ,ISNULL((select top 1 INPUT_DATE FROM F_RAW_DETAIL WHERE ORDER_DATE = A.ORDER_DATE and ORDER_CD = A.ORDER_CD and ORDER_SEQ = A.SEQ order by INPUT_DATE DESC, INPUT_CD DESC),'-') AS INPUT_DATE ");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE RAW_MAT_CD = (SELECT RAW_MAT_CD FROM F_ORDER_DETAIL WHERE ORDER_DATE = A.ORDER_DATE and ORDER_CD = A.ORDER_CD and SEQ = A.SEQ)) AS RAW_MAT_NM  ");
	        sb.AppendLine(" ,(SELECT SPEC FROM N_RAW_CODE WHERE RAW_MAT_CD = (SELECT RAW_MAT_CD FROM F_ORDER_DETAIL WHERE ORDER_DATE = A.ORDER_DATE and ORDER_CD = A.ORDER_CD and SEQ = A.SEQ)) AS SPEC  ");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = (SELECT INPUT_UNIT FROM N_RAW_CODE WHERE RAW_MAT_CD = (SELECT RAW_MAT_CD FROM F_ORDER_DETAIL WHERE ORDER_DATE = A.ORDER_DATE and ORDER_CD = A.ORDER_CD and SEQ = A.SEQ))) AS UNIT_NM ");
	        sb.AppendLine("  , A.ORDER_CD   ");
	        sb.AppendLine("  , A.SEQ  ");
	        sb.AppendLine("  , ISNULL(SUM(B.TEMP_AMT),0) AS INPUT_AMT  ");
	        sb.AppendLine("  , A.TOTAL_AMT AS ORDER_AMT  ");
            sb.AppendLine("  , case when ISNULL(SUM(B.TEMP_AMT),0) >= ISNULL(A.TOTAL_AMT,0) then 'Y' else 'N' end as comp  ");
	        sb.AppendLine("  from F_ORDER_DETAIL A  ");
	        sb.AppendLine("  left outer join F_RAW_DETAIL B  ");
	        sb.AppendLine("  on A.ORDER_DATE = B.ORDER_DATE  ");
	        sb.AppendLine("  and A.ORDER_CD = B.ORDER_CD  ");
	        sb.AppendLine("  and A.SEQ = B.ORDER_SEQ  ");
            sb.AppendLine("  where A.ORDER_DATE = '"+order_date+"' and A.ORDER_CD = '"+order_cd+"'  ");
	        sb.AppendLine("  group by A.ORDER_DATE,A.ORDER_CD,A.SEQ,A.TOTAL_AMT  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_item_CompList_SearchByRaw(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine(" select  ");
            sb.AppendLine(" A.ITEM_CD ");
            sb.AppendLine(" ,N.ITEM_NM ");
            sb.AppendLine(" ,N.SPEC ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS UNIT_NM ");
            sb.AppendLine(" from N_ITEM_COMP A ");
            sb.AppendLine(" left outer join N_ITEM_CODE N ");
            sb.AppendLine(" on A.ITEM_CD = N.ITEM_CD ");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Select_Inter_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine("  select ");
            sb.AppendLine("  *  ");
            sb.AppendLine("  ,(SELECT M_NAME FROM N_COUNTER_CODE WHERE M_CODE = A.M_CODE ) AS M_NAME  ");
            sb.AppendLine("  ,(SELECT S_LOC_NM FROM N_SENSOR_LOC WHERE S_LOC_CD = (SELECT LOC_CD FROM N_COUNTER_CODE WHERE M_CODE = A.M_CODE )) AS LOC_NM  ");
            sb.AppendLine("  from F_INTER_COUNT A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by INTER_DATE DESC, INTER_CD DESC  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_counter_code(string M_CODE, string M_NAME, string LOC_CD)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" insert into N_COUNTER_CODE ");
                sb.AppendLine(" values ( '"+M_CODE+"' , '"+M_NAME+"' , '"+LOC_CD+"' ) ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert COUNTER_CODE ");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public int Update_counter_code(string M_CODE, string M_NAME, string LOC_CD)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" UPDATE N_COUNTER_CODE SET ");
                sb.AppendLine(" M_NAME =  '" + M_NAME + "' ,LOC_CD = '" + LOC_CD + "'  ");
                sb.AppendLine(" WHERE M_CODE = '"+M_CODE+"'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "update COUNTER_CODE ");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public DataTable select_Counter_code()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine("  select ");
            sb.AppendLine("  A.M_CODE ");
            sb.AppendLine("  ,A.M_NAME ");
            sb.AppendLine("  ,A.LOC_CD ");
            sb.AppendLine("  ,isnull(B.S_LOC_NM,'') AS LOC_NM ");
            sb.AppendLine("  from N_COUNTER_CODE A");
            sb.AppendLine("  LEFT OUTER JOIN N_SENSOR_LOC B ");
            sb.AppendLine("  on A.LOC_CD = B.S_LOC_CD ");
            sb.AppendLine(" where 1=1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int delete_counter_code(string M_CODE)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" delete from N_COUNTER_CODE ");
                sb.AppendLine(" WHERE M_CODE = '" + M_CODE + "'  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "delete COUNTER_CODE ");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                Popup.pop오류리포트 msg = new Popup.pop오류리포트(ex.Message + " - " + ex.ToString());
                msg.ShowDialog();
                return 9;
            }
        }

        public DataTable fn_Select_Inter_Count_Monitor()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  ");
            sb.AppendLine(" SELECT*                                                                                                          ");
            sb.AppendLine(" FROM                                                                                                             ");
            sb.AppendLine(" (SELECT                                                                                                          ");
            sb.AppendLine(" A.M_CODE,                                                                                                        ");
            sb.AppendLine(" ISNULL(B.M_NAME,'') AS M_NAME,                                                                                   ");
            sb.AppendLine(" A.COUNT,                                                                                                         ");
            sb.AppendLine(" LEFT(CONVERT(NVARCHAR,A.INTER_TIME,120),16) AS INTER_TIME,                                                       ");
            sb.AppendLine(" A.START_TIME, ");
            sb.AppendLine(" A.END_TIME,  ");
            sb.AppendLine(" SUBSTRING(CONVERT(NVARCHAR,GETDATE(),120),11,6) as getDat,                                                       ");
            sb.AppendLine(" SUBSTRING(CONVERT(NVARCHAR,A.INTER_TIME,120),11,6) as end_ti,                                                    ");
            sb.AppendLine(" SUBSTRING(CONVERT(NVARCHAR,GETDATE(),120),0,11) as inter_da,                                                     ");
            sb.AppendLine(" ROW_NUMBER()                                                                                                     ");
            sb.AppendLine(" OVER(PARTITION BY A.M_CODE ORDER BY INTER_DATE desc, INTER_CD desc) AS RANKNO                           ");
            sb.AppendLine(" FROM F_INTER_COUNT A                                                                                             ");
            sb.AppendLine(" LEFT OUTER JOIN N_COUNTER_CODE B ON A.M_CODE = B.M_CODE                                                          ");
            sb.AppendLine(" where 1=1                                                                                                        ");
            sb.AppendLine(" ) T                                                                                                              ");
            sb.AppendLine("                                                                                                                  ");
            sb.AppendLine(" WHERE RankNo = 1                                                                                                 ");
            sb.AppendLine(" ORDER BY M_CODE                                                                                                  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int fn_insert_gara_new(string date)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("  ");
                
                sb.AppendLine(" declare @flag int                                                                                               ");
                sb.AppendLine(" declare @cd int                                                                                                 ");
                sb.AppendLine("                                                                                                                 ");
                sb.AppendLine(" if (select top 1 END_TIME from F_INTER_COUNT order by INTER_DATE desc, INTER_CD desc) = '00:00'                 ");
                sb.AppendLine(" begin                                                                                                           ");
                sb.AppendLine(" select @cd = ISNULL(MAX(INTER_CD),0)+1 from F_INTER_COUNT                                                       ");
                sb.AppendLine(" where INTER_DATE = '"+date+"'                                                                                 ");
                sb.AppendLine(" insert into F_INTER_COUNT (INTER_DATE                                                                           ");
                sb.AppendLine(" ,INTER_CD                                                                                                       ");
                sb.AppendLine(" ,START_TIME                                                                                                     ");
                sb.AppendLine(" ,END_TIME                                                                                                       ");
                sb.AppendLine(" ,COUNT                                                                                                          ");
                sb.AppendLine(" ,INTER_TIME                                                                                                     ");
                sb.AppendLine(" ,M_CODE                                                                                                         ");
                sb.AppendLine(" ,OTHER_VALUE1                                                                                                   ");
                sb.AppendLine(" ,OTHER_VALUE2                                                                                                   ");
                sb.AppendLine(" ,INTIME                                                                                                         ");
                sb.AppendLine(" ) values (                                                                                                      ");
                sb.AppendLine(" '"+date+"'                                                                                                    ");
                sb.AppendLine(" ,@cd                                                                                                            ");
                sb.AppendLine(" ,(SELECT top 1 START_TIME FROM F_INTER_COUNT order by INTER_DATE desc, INTER_CD desc)                           ");
                sb.AppendLine(" ,'00:00'                                                                                                        ");
                sb.AppendLine(" ,(SELECT top 1 convert(int,ISNULL(COUNT,0))+1 FROM F_INTER_COUNT order by INTER_DATE desc, INTER_CD desc)       ");
                sb.AppendLine(" ,substring(convert(nvarchar,GETDATE(),120),0,17)                                                                ");
                sb.AppendLine(" ,'01'                                                                                                           ");
                sb.AppendLine(" ,'1'                                                                                                            ");
                sb.AppendLine(" ,'2'                                                                                                            ");
                sb.AppendLine(" ,convert(nvarchar,GETDATE(),120)                                                                                ");
                sb.AppendLine(" )                                                                                                               ");
                sb.AppendLine(" end                                                                                                             ");
                sb.AppendLine(" else                                                                                                            ");
                sb.AppendLine(" begin                                                                                                           ");
                sb.AppendLine(" select @cd = ISNULL(MAX(INTER_CD),0)+1 from F_INTER_COUNT                                                       ");
                sb.AppendLine(" where INTER_DATE = '"+date+"'                                                                                 ");
                sb.AppendLine(" insert into F_INTER_COUNT (INTER_DATE                                                                           ");
                sb.AppendLine(" ,INTER_CD                                                                                                       ");
                sb.AppendLine(" ,START_TIME                                                                                                     ");
                sb.AppendLine(" ,END_TIME                                                                                                       ");
                sb.AppendLine(" ,COUNT                                                                                                          ");
                sb.AppendLine(" ,INTER_TIME                                                                                                     ");
                sb.AppendLine(" ,M_CODE                                                                                                         ");
                sb.AppendLine(" ,OTHER_VALUE1                                                                                                   ");
                sb.AppendLine(" ,OTHER_VALUE2                                                                                                   ");
                sb.AppendLine(" ,INTIME                                                                                                         ");
                sb.AppendLine(" ) values (                                                                                                      ");
                sb.AppendLine(" '"+date+"'                                                                                                    ");
                sb.AppendLine(" ,@cd                                                                                                            ");
                sb.AppendLine(" ,substring(convert(nvarchar,GETDATE(),120),12,5)                                                                ");
                sb.AppendLine(" ,'00:00'                                                                                                        ");
                sb.AppendLine(" ,1                                                                                                              ");
                sb.AppendLine(" ,substring(convert(nvarchar,GETDATE(),120),0,17)                                                                ");
                sb.AppendLine(" ,'01'                                                                                                           ");
                sb.AppendLine(" ,'1'                                                                                                            ");
                sb.AppendLine(" ,'2'                                                                                                            ");
                sb.AppendLine(" ,convert(nvarchar,GETDATE(),120)                                                                                ");
                sb.AppendLine(" )                                                                                                               ");
                sb.AppendLine(" end                                                                                                             ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "INERT GARA COUNTER ");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }

        public int fn_insert_gara_end(string date)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("  ");

                sb.AppendLine(" declare @cd int ");
                sb.AppendLine(" select @cd = ISNULL(MAX(INTER_CD),0)+1 from F_INTER_COUNT                                                    ");
                sb.AppendLine(" where INTER_DATE = '" + date + "'                                                                            ");
                sb.AppendLine("                                                                                                              ");
                sb.AppendLine(" insert into F_INTER_COUNT (INTER_DATE                                                                        ");
                sb.AppendLine(" ,INTER_CD                                                                                                    ");
                sb.AppendLine(" ,START_TIME                                                                                                  ");
                sb.AppendLine(" ,END_TIME                                                                                                    ");
                sb.AppendLine(" ,COUNT                                                                                                       ");
                sb.AppendLine(" ,INTER_TIME                                                                                                  ");
                sb.AppendLine(" ,M_CODE                                                                                                      ");
                sb.AppendLine(" ,OTHER_VALUE1                                                                                                ");
                sb.AppendLine(" ,OTHER_VALUE2                                                                                                ");
                sb.AppendLine(" ,INTIME                                                                                                      ");
                sb.AppendLine(" ) values (                                                                                                   ");
                sb.AppendLine(" '" + date + "'                                                                                               ");
                sb.AppendLine(" ,@cd                                                                                                         ");
                sb.AppendLine(" ,(SELECT top 1 START_TIME FROM F_INTER_COUNT order by INTER_DATE desc, INTER_CD desc)                        ");
                sb.AppendLine(" ,substring(convert(nvarchar,GETDATE(),120),12,5)                                                             ");
                sb.AppendLine(" ,(SELECT top 1 convert(int,ISNULL(COUNT,0))+1 FROM F_INTER_COUNT order by INTER_DATE desc, INTER_CD desc)    ");
                sb.AppendLine(" ,substring(convert(nvarchar,GETDATE(),120),0,17)                                                             ");
                sb.AppendLine(" ,'01'                                                                                                        ");
                sb.AppendLine(" ,'1'                                                                                                         ");
                sb.AppendLine(" ,'2'                                                                                                         ");
                sb.AppendLine(" ,convert(nvarchar,GETDATE(),120)                                                                             ");
                sb.AppendLine(" )                                                                                                            ");   

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc(sCommand, "INERT GARA COUNTER ");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                return 9;
            }
        }
    }
}
